android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    android.support.v4.util.SimpleArrayMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    boolean isSupportFragmentClass(android.content.Context,java.lang.String) -> b
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    android.support.v4.util.SimpleArrayMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> a
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.i:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.j:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    android.support.v4.util.SimpleArrayMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SimpleArrayMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.k:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.l:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.m:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.n:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.p:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.s:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.u:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.v:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.w:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.x:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.y:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.z:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.aa:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ab:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.ArrayMap -> android.support.v4.c.a:
    android.support.v4.util.MapCollections mCollections -> a
    android.support.v4.util.MapCollections getCollection() -> b
    void putAll(java.util.Map) -> putAll
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
android.support.v4.util.ArrayMap$1 -> android.support.v4.c.b:
    android.support.v4.util.ArrayMap this$0 -> a
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.ContainerHelpers -> android.support.v4.c.c:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealLongArraySize(int) -> b
    int idealByteArraySize(int) -> c
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int binarySearch(int[],int,int) -> a
    int binarySearch(long[],int,long) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.d:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.e:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.LongSparseArray -> android.support.v4.c.f:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    long[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    android.support.v4.util.LongSparseArray clone() -> a
    java.lang.Object get(long) -> a
    java.lang.Object get(long,java.lang.Object) -> a
    void removeAt(int) -> a
    void gc() -> d
    void put(long,java.lang.Object) -> b
    int size() -> b
    long keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
android.support.v4.util.MapCollections -> android.support.v4.c.g:
    android.support.v4.util.MapCollections$EntrySet mEntrySet -> b
    android.support.v4.util.MapCollections$KeySet mKeySet -> c
    android.support.v4.util.MapCollections$ValuesCollection mValues -> d
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.lang.Object[] toArrayHelper(int) -> b
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.MapCollections$ArrayIterator -> android.support.v4.c.h:
    int mOffset -> a
    int mSize -> b
    int mIndex -> c
    boolean mCanRemove -> d
    android.support.v4.util.MapCollections this$0 -> e
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
android.support.v4.util.MapCollections$EntrySet -> android.support.v4.c.i:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.util.Map$Entry) -> a
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
android.support.v4.util.MapCollections$KeySet -> android.support.v4.c.j:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
android.support.v4.util.MapCollections$MapIterator -> android.support.v4.c.k:
    int mEnd -> a
    int mIndex -> b
    boolean mEntryValid -> c
    android.support.v4.util.MapCollections this$0 -> d
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object next() -> next
android.support.v4.util.MapCollections$ValuesCollection -> android.support.v4.c.l:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
android.support.v4.util.SimpleArrayMap -> android.support.v4.c.m:
    java.lang.Object[] mBaseCache -> b
    int mBaseCacheSize -> c
    java.lang.Object[] mTwiceBaseCache -> d
    int mTwiceBaseCacheSize -> e
    int[] mHashes -> f
    java.lang.Object[] mArray -> g
    int mSize -> h
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> e
    void freeArrays(int[],java.lang.Object[],int) -> a
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    int indexOfValue(java.lang.Object) -> a
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> d
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.n:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    android.support.v4.util.SparseArrayCompat clone() -> a
    void gc() -> d
    int size() -> b
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
android.support.v4.view.GravityCompat -> android.support.v4.view.a:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.b:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.c:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.d:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.e:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.f:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.g:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.h:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.i:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.j:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.k:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.l:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.m:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.n:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.o:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.p:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.q:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.r:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.s:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.t:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.u:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.v:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.w:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.x:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.y:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.z:
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.aa:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ab:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ac:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ad:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ae:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> android.support.v4.view.af:
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.ag:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.ah:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.ai:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.aj:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.ak:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.al:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.am:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> aa
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> ab
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ac
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ad
    int mDrawingOrder -> ae
    java.util.ArrayList mDrawingOrderedChildren -> af
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> ag
    java.lang.Runnable mEndScrollRunnable -> ah
    int mScrollState -> ai
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestParentDisallowInterceptTouchEvent(boolean) -> c
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.an:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ao:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ap:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.aq:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ar:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.as:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.at:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.au:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.av:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.aw:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.ax:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.AutoScrollHelper -> android.support.v4.widget.a:
    android.support.v4.widget.AutoScrollHelper$ClampedScroller mScroller -> a
    android.view.animation.Interpolator mEdgeInterpolator -> b
    android.view.View mTarget -> c
    java.lang.Runnable mRunnable -> d
    float[] mRelativeEdges -> e
    float[] mMaximumEdges -> f
    int mEdgeType -> g
    int mActivationDelay -> h
    float[] mRelativeVelocity -> i
    float[] mMinimumVelocity -> j
    float[] mMaximumVelocity -> k
    boolean mAlreadyDelayed -> l
    boolean mNeedsReset -> m
    boolean mNeedsCancel -> n
    boolean mAnimating -> o
    boolean mEnabled -> p
    boolean mExclusive -> q
    int DEFAULT_ACTIVATION_DELAY -> r
    android.support.v4.widget.AutoScrollHelper setEnabled(boolean) -> a
    boolean isEnabled() -> a
    android.support.v4.widget.AutoScrollHelper setExclusive(boolean) -> b
    android.support.v4.widget.AutoScrollHelper setMaximumVelocity(float,float) -> a
    android.support.v4.widget.AutoScrollHelper setMinimumVelocity(float,float) -> b
    android.support.v4.widget.AutoScrollHelper setRelativeVelocity(float,float) -> c
    android.support.v4.widget.AutoScrollHelper setEdgeType(int) -> a
    android.support.v4.widget.AutoScrollHelper setRelativeEdges(float,float) -> d
    android.support.v4.widget.AutoScrollHelper setMaximumEdges(float,float) -> e
    android.support.v4.widget.AutoScrollHelper setActivationDelay(int) -> b
    android.support.v4.widget.AutoScrollHelper setRampUpDuration(int) -> c
    android.support.v4.widget.AutoScrollHelper setRampDownDuration(int) -> d
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean shouldAnimate() -> b
    void startAnimating() -> c
    void requestStop() -> d
    float computeTargetVelocity(int,float,float,float) -> a
    void scrollTargetBy(int,int) -> a
    boolean canTargetScrollHorizontally(int) -> e
    boolean canTargetScrollVertically(int) -> f
    float getEdgeValue(float,float,float,float) -> a
    float constrainEdgeValue(float,float) -> f
    int constrain(int,int,int) -> b
    float constrain(float,float,float) -> b
    void cancelTargetTouch() -> e
    boolean access$100(android.support.v4.widget.AutoScrollHelper) -> a
    boolean access$200(android.support.v4.widget.AutoScrollHelper) -> b
    boolean access$202(android.support.v4.widget.AutoScrollHelper,boolean) -> a
    android.support.v4.widget.AutoScrollHelper$ClampedScroller access$300(android.support.v4.widget.AutoScrollHelper) -> c
    boolean access$400(android.support.v4.widget.AutoScrollHelper) -> d
    boolean access$102(android.support.v4.widget.AutoScrollHelper,boolean) -> b
    boolean access$500(android.support.v4.widget.AutoScrollHelper) -> e
    boolean access$502(android.support.v4.widget.AutoScrollHelper,boolean) -> c
    void access$600(android.support.v4.widget.AutoScrollHelper) -> f
    android.view.View access$700(android.support.v4.widget.AutoScrollHelper) -> g
    int access$800(int,int,int) -> a
    float access$900(float,float,float) -> a
android.support.v4.widget.AutoScrollHelper$1 -> android.support.v4.widget.b:
android.support.v4.widget.AutoScrollHelper$ClampedScroller -> android.support.v4.widget.c:
    int mRampUpDuration -> a
    int mRampDownDuration -> b
    float mTargetVelocityX -> c
    float mTargetVelocityY -> d
    long mStartTime -> e
    long mDeltaTime -> f
    int mDeltaX -> g
    int mDeltaY -> h
    long mStopTime -> i
    float mStopValue -> j
    int mEffectiveRampDown -> k
    void setRampUpDuration(int) -> a
    void setRampDownDuration(int) -> b
    void start() -> a
    void requestStop() -> b
    boolean isFinished() -> c
    float getValueAt(long) -> a
    float interpolateValue(float) -> a
    void computeScrollDelta() -> d
    void setTargetVelocity(float,float) -> a
    int getHorizontalDirection() -> e
    int getVerticalDirection() -> f
    int getDeltaX() -> g
    int getDeltaY() -> h
android.support.v4.widget.AutoScrollHelper$ScrollAnimationRunnable -> android.support.v4.widget.d:
    android.support.v4.widget.AutoScrollHelper this$0 -> a
    void run() -> run
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewAbsoluteGravity(android.view.View) -> e
    boolean checkDrawerViewAbsoluteGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.e:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.f:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.g:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.h:
    int mAbsGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.i:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.j:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.k:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.l:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.m:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.n:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    android.support.v4.widget.ScrollerCompat create(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.o:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.p:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.q:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.r:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.s:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.t:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.u:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.v:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.w:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.x:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.y:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.z:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.aa:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.ab:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.ac:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,android.support.v4.widget.ViewDragHelper$Callback) -> a
    android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,float,android.support.v4.widget.ViewDragHelper$Callback) -> a
    void setMinVelocity(float) -> a
    int getViewDragState() -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> b
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> d
    void ensureMotionHistorySizeForId(int) -> e
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> a
    void setDragState(int) -> b
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> c
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.ad:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$2 -> android.support.v4.widget.ae:
    android.support.v4.widget.ViewDragHelper this$0 -> a
    void run() -> run
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.af:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.util.Pools -> android.a.a:
android.util.Pools$Pool -> android.a.b:
    java.lang.Object acquire() -> a
    boolean release(java.lang.Object) -> a
android.util.Pools$SimplePool -> android.a.c:
    java.lang.Object[] mPool -> a
    int mPoolSize -> b
    java.lang.Object acquire() -> a
    boolean release(java.lang.Object) -> a
    boolean isInPool(java.lang.Object) -> b
android.util.Pools$SynchronizedPool -> android.a.d:
    java.lang.Object mLock -> a
    java.lang.Object acquire() -> a
    boolean release(java.lang.Object) -> a
com.android.gallery3d.common.BitmapUtils -> com.a.a.a.a:
    int computeSampleSizeLarger(float) -> a
    android.graphics.Bitmap resizeBitmapByScale(android.graphics.Bitmap,float,boolean) -> a
    android.graphics.Bitmap$Config getConfig(android.graphics.Bitmap) -> a
com.android.gallery3d.common.Utils -> com.a.a.a.b:
    long[] sCrcTable -> a
    boolean IS_DEBUG_BUILD -> b
    void assertTrue(boolean) -> a
    int nextPowerOf2(int) -> a
    int prevPowerOf2(int) -> b
    int clamp(int,int,int) -> a
    void closeSilently(java.io.Closeable) -> a
    int ceilLog2(float) -> a
    int floorLog2(float) -> b
com.android.gallery3d.exif.CountedDataInputStream -> com.a.a.b.a:
    int mCount -> b
    byte[] mByteArray -> c
    java.nio.ByteBuffer mByteBuffer -> d
    boolean $assertionsDisabled -> a
    int getReadByteCount() -> a
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    int read() -> read
    long skip(long) -> skip
    void skipOrThrow(long) -> a
    void skipTo(long) -> b
    void readOrThrow(byte[],int,int) -> a
    void readOrThrow(byte[]) -> a
    void setByteOrder(java.nio.ByteOrder) -> a
    java.nio.ByteOrder getByteOrder() -> b
    short readShort() -> c
    int readUnsignedShort() -> d
    int readInt() -> e
    long readUnsignedInt() -> f
    java.lang.String readString(int,java.nio.charset.Charset) -> a
com.android.gallery3d.exif.ExifData -> com.a.a.b.b:
    byte[] USER_COMMENT_ASCII -> a
    byte[] USER_COMMENT_JIS -> b
    byte[] USER_COMMENT_UNICODE -> c
    com.android.gallery3d.exif.IfdData[] mIfdDatas -> d
    byte[] mThumbnail -> e
    java.util.ArrayList mStripBytes -> f
    java.nio.ByteOrder mByteOrder -> g
    void setCompressedThumbnail(byte[]) -> a
    void setStripBytes(int,byte[]) -> a
    com.android.gallery3d.exif.IfdData getIfdData(int) -> a
    void addIfdData(com.android.gallery3d.exif.IfdData) -> a
    com.android.gallery3d.exif.ExifTag getTag(short,int) -> a
    boolean equals(java.lang.Object) -> equals
com.android.gallery3d.exif.ExifInterface -> com.a.a.b.c:
    int TAG_IMAGE_WIDTH -> a
    int TAG_IMAGE_LENGTH -> b
    int TAG_BITS_PER_SAMPLE -> c
    int TAG_COMPRESSION -> d
    int TAG_PHOTOMETRIC_INTERPRETATION -> e
    int TAG_IMAGE_DESCRIPTION -> f
    int TAG_MAKE -> g
    int TAG_MODEL -> h
    int TAG_STRIP_OFFSETS -> i
    int TAG_ORIENTATION -> j
    int TAG_SAMPLES_PER_PIXEL -> k
    int TAG_ROWS_PER_STRIP -> l
    int TAG_STRIP_BYTE_COUNTS -> m
    int TAG_X_RESOLUTION -> n
    int TAG_Y_RESOLUTION -> o
    int TAG_PLANAR_CONFIGURATION -> p
    int TAG_RESOLUTION_UNIT -> q
    int TAG_TRANSFER_FUNCTION -> r
    int TAG_SOFTWARE -> s
    int TAG_DATE_TIME -> t
    int TAG_ARTIST -> u
    int TAG_WHITE_POINT -> v
    int TAG_PRIMARY_CHROMATICITIES -> w
    int TAG_Y_CB_CR_COEFFICIENTS -> x
    int TAG_Y_CB_CR_SUB_SAMPLING -> y
    int TAG_Y_CB_CR_POSITIONING -> z
    int TAG_REFERENCE_BLACK_WHITE -> A
    int TAG_COPYRIGHT -> B
    int TAG_EXIF_IFD -> C
    int TAG_GPS_IFD -> D
    int TAG_JPEG_INTERCHANGE_FORMAT -> E
    int TAG_JPEG_INTERCHANGE_FORMAT_LENGTH -> F
    int TAG_EXPOSURE_TIME -> G
    int TAG_F_NUMBER -> H
    int TAG_EXPOSURE_PROGRAM -> I
    int TAG_SPECTRAL_SENSITIVITY -> J
    int TAG_ISO_SPEED_RATINGS -> K
    int TAG_OECF -> L
    int TAG_EXIF_VERSION -> M
    int TAG_DATE_TIME_ORIGINAL -> N
    int TAG_DATE_TIME_DIGITIZED -> O
    int TAG_COMPONENTS_CONFIGURATION -> P
    int TAG_COMPRESSED_BITS_PER_PIXEL -> Q
    int TAG_SHUTTER_SPEED_VALUE -> R
    int TAG_APERTURE_VALUE -> S
    int TAG_BRIGHTNESS_VALUE -> T
    int TAG_EXPOSURE_BIAS_VALUE -> U
    int TAG_MAX_APERTURE_VALUE -> V
    int TAG_SUBJECT_DISTANCE -> W
    int TAG_METERING_MODE -> X
    int TAG_LIGHT_SOURCE -> Y
    int TAG_FLASH -> Z
    int TAG_FOCAL_LENGTH -> aa
    int TAG_SUBJECT_AREA -> ab
    int TAG_MAKER_NOTE -> ac
    int TAG_USER_COMMENT -> ad
    int TAG_SUB_SEC_TIME -> ae
    int TAG_SUB_SEC_TIME_ORIGINAL -> af
    int TAG_SUB_SEC_TIME_DIGITIZED -> ag
    int TAG_FLASHPIX_VERSION -> ah
    int TAG_COLOR_SPACE -> ai
    int TAG_PIXEL_X_DIMENSION -> aj
    int TAG_PIXEL_Y_DIMENSION -> ak
    int TAG_RELATED_SOUND_FILE -> al
    int TAG_INTEROPERABILITY_IFD -> am
    int TAG_FLASH_ENERGY -> an
    int TAG_SPATIAL_FREQUENCY_RESPONSE -> ao
    int TAG_FOCAL_PLANE_X_RESOLUTION -> ap
    int TAG_FOCAL_PLANE_Y_RESOLUTION -> aq
    int TAG_FOCAL_PLANE_RESOLUTION_UNIT -> ar
    int TAG_SUBJECT_LOCATION -> as
    int TAG_EXPOSURE_INDEX -> at
    int TAG_SENSING_METHOD -> au
    int TAG_FILE_SOURCE -> av
    int TAG_SCENE_TYPE -> aw
    int TAG_CFA_PATTERN -> ax
    int TAG_CUSTOM_RENDERED -> ay
    int TAG_EXPOSURE_MODE -> az
    int TAG_WHITE_BALANCE -> aA
    int TAG_DIGITAL_ZOOM_RATIO -> aB
    int TAG_FOCAL_LENGTH_IN_35_MM_FILE -> aC
    int TAG_SCENE_CAPTURE_TYPE -> aD
    int TAG_GAIN_CONTROL -> aE
    int TAG_CONTRAST -> aF
    int TAG_SATURATION -> aG
    int TAG_SHARPNESS -> aH
    int TAG_DEVICE_SETTING_DESCRIPTION -> aI
    int TAG_SUBJECT_DISTANCE_RANGE -> aJ
    int TAG_IMAGE_UNIQUE_ID -> aK
    int TAG_GPS_VERSION_ID -> aL
    int TAG_GPS_LATITUDE_REF -> aM
    int TAG_GPS_LATITUDE -> aN
    int TAG_GPS_LONGITUDE_REF -> aO
    int TAG_GPS_LONGITUDE -> aP
    int TAG_GPS_ALTITUDE_REF -> aQ
    int TAG_GPS_ALTITUDE -> aR
    int TAG_GPS_TIME_STAMP -> aS
    int TAG_GPS_SATTELLITES -> aT
    int TAG_GPS_STATUS -> aU
    int TAG_GPS_MEASURE_MODE -> aV
    int TAG_GPS_DOP -> aW
    int TAG_GPS_SPEED_REF -> aX
    int TAG_GPS_SPEED -> aY
    int TAG_GPS_TRACK_REF -> aZ
    int TAG_GPS_TRACK -> ba
    int TAG_GPS_IMG_DIRECTION_REF -> bb
    int TAG_GPS_IMG_DIRECTION -> bc
    int TAG_GPS_MAP_DATUM -> bd
    int TAG_GPS_DEST_LATITUDE_REF -> be
    int TAG_GPS_DEST_LATITUDE -> bf
    int TAG_GPS_DEST_LONGITUDE_REF -> bg
    int TAG_GPS_DEST_LONGITUDE -> bh
    int TAG_GPS_DEST_BEARING_REF -> bi
    int TAG_GPS_DEST_BEARING -> bj
    int TAG_GPS_DEST_DISTANCE_REF -> bk
    int TAG_GPS_DEST_DISTANCE -> bl
    int TAG_GPS_PROCESSING_METHOD -> bm
    int TAG_GPS_AREA_INFORMATION -> bn
    int TAG_GPS_DATE_STAMP -> bo
    int TAG_GPS_DIFFERENTIAL -> bp
    int TAG_INTEROPERABILITY_INDEX -> bq
    java.util.HashSet sOffsetTags -> bt
    java.util.HashSet sBannedDefines -> br
    com.android.gallery3d.exif.ExifData mData -> bu
    java.nio.ByteOrder DEFAULT_BYTE_ORDER -> bs
    java.text.DateFormat mDateTimeStampFormat -> bv
    java.text.DateFormat mGPSDateStampFormat -> bw
    java.util.Calendar mGPSTimeStampCalendar -> bx
    android.util.SparseIntArray mTagInfo -> by
    int defineTag(int,short) -> a
    short getTrueTagKey(int) -> a
    int getTrueIfd(int) -> b
    void readExif(java.io.InputStream) -> a
    void readExif(java.lang.String) -> a
    com.android.gallery3d.exif.ExifTag getTag(int,int) -> a
    java.lang.Integer getTagIntValue(int,int) -> b
    java.lang.Integer getTagIntValue(int) -> c
    int[] getTagIntValues(int,int) -> c
    int getDefinedTagDefaultIfd(int) -> d
    boolean isOffsetTag(short) -> a
    int getRotationForOrientationValue(short) -> b
    void closeSilently(java.io.Closeable) -> a
    android.util.SparseIntArray getTagInfo() -> a
    void initTagInfo() -> b
    int getAllowedIfdFlagsFromInfo(int) -> e
    boolean isIfdAllowed(int,int) -> d
    int getFlagsFromAllowedIfds(int[]) -> a
com.android.gallery3d.exif.ExifInvalidFormatException -> com.a.a.b.d:
com.android.gallery3d.exif.ExifParser -> com.a.a.b.e:
    java.nio.charset.Charset US_ASCII -> a
    com.android.gallery3d.exif.CountedDataInputStream mTiffStream -> b
    int mOptions -> c
    int mIfdStartOffset -> d
    int mNumOfTagInIfd -> e
    int mIfdType -> f
    com.android.gallery3d.exif.ExifTag mTag -> g
    com.android.gallery3d.exif.ExifParser$ImageEvent mImageEvent -> h
    com.android.gallery3d.exif.ExifTag mStripSizeTag -> i
    com.android.gallery3d.exif.ExifTag mJpegSizeTag -> j
    boolean mNeedToParseOffsetsInCurrentIfd -> k
    boolean mContainExifData -> l
    int mApp1End -> m
    int mOffsetToApp1EndFromSOF -> n
    byte[] mDataAboveIfd0 -> o
    int mIfd0Position -> p
    int mTiffStartPosition -> q
    com.android.gallery3d.exif.ExifInterface mInterface -> r
    short TAG_EXIF_IFD -> s
    short TAG_GPS_IFD -> t
    short TAG_INTEROPERABILITY_IFD -> u
    short TAG_JPEG_INTERCHANGE_FORMAT -> v
    short TAG_JPEG_INTERCHANGE_FORMAT_LENGTH -> w
    short TAG_STRIP_OFFSETS -> x
    short TAG_STRIP_BYTE_COUNTS -> y
    java.util.TreeMap mCorrespondingEvent -> z
    boolean isIfdRequested(int) -> b
    boolean isThumbnailRequested() -> n
    com.android.gallery3d.exif.ExifParser parse(java.io.InputStream,com.android.gallery3d.exif.ExifInterface) -> a
    int next() -> a
    void skipRemainingTagsInCurrentIfd() -> b
    boolean needToParseOffsetsInCurrentIfd() -> o
    com.android.gallery3d.exif.ExifTag getTag() -> c
    int getCurrentIfd() -> d
    int getStripIndex() -> e
    int getStripSize() -> f
    int getCompressedImageSize() -> g
    void skipTo(int) -> c
    void registerForTagValue(com.android.gallery3d.exif.ExifTag) -> a
    void registerIfd(int,long) -> a
    void registerCompressedImage(long) -> a
    void registerUncompressedStrip(int,long) -> b
    com.android.gallery3d.exif.ExifTag readTag() -> p
    void checkOffsetOrImageTag(com.android.gallery3d.exif.ExifTag) -> c
    boolean checkAllowed(int,int) -> a
    void readFullTagValue(com.android.gallery3d.exif.ExifTag) -> b
    void parseTiffHeader() -> q
    boolean seekTiffData(java.io.InputStream) -> a
    int read(byte[]) -> a
    java.lang.String readString(int) -> a
    java.lang.String readString(int,java.nio.charset.Charset) -> a
    int readUnsignedShort() -> h
    long readUnsignedLong() -> i
    com.android.gallery3d.exif.Rational readUnsignedRational() -> j
    int readLong() -> k
    com.android.gallery3d.exif.Rational readRational() -> l
    java.nio.ByteOrder getByteOrder() -> m
com.android.gallery3d.exif.ExifParser$ExifTagEvent -> com.a.a.b.f:
    com.android.gallery3d.exif.ExifTag tag -> a
    boolean isRequested -> b
com.android.gallery3d.exif.ExifParser$IfdEvent -> com.a.a.b.g:
    int ifd -> a
    boolean isRequested -> b
com.android.gallery3d.exif.ExifParser$ImageEvent -> com.a.a.b.h:
    int stripIndex -> a
    int type -> b
com.android.gallery3d.exif.ExifReader -> com.a.a.b.i:
    com.android.gallery3d.exif.ExifInterface mInterface -> a
    com.android.gallery3d.exif.ExifData read(java.io.InputStream) -> a
com.android.gallery3d.exif.ExifTag -> com.a.a.b.j:
    java.nio.charset.Charset US_ASCII -> a
    int[] TYPE_TO_SIZE_MAP -> b
    short mTagId -> c
    short mDataType -> d
    boolean mHasDefinedDefaultComponentCount -> e
    int mComponentCountActual -> f
    int mIfd -> g
    java.lang.Object mValue -> h
    int mOffset -> i
    java.text.SimpleDateFormat TIME_FORMAT -> j
    boolean isValidIfd(int) -> a
    boolean isValidType(short) -> a
    int getElementSize(short) -> b
    int getIfd() -> a
    void setIfd(int) -> b
    short getTagId() -> b
    short getDataType() -> c
    int getDataSize() -> d
    int getComponentCount() -> e
    void forceSetComponentCount(int) -> c
    boolean hasValue() -> f
    boolean setValue(int[]) -> a
    boolean setValue(long[]) -> a
    boolean setValue(java.lang.String) -> a
    boolean setValue(com.android.gallery3d.exif.Rational[]) -> a
    boolean setValue(byte[],int,int) -> a
    boolean setValue(byte[]) -> a
    int[] getValueAsInts() -> g
    java.lang.String forceGetValueAsString() -> h
    long getValueAt(int) -> d
    int getOffset() -> i
    void setOffset(int) -> e
    void setHasDefinedCount(boolean) -> a
    boolean hasDefinedCount() -> j
    boolean checkBadComponentCount(int) -> f
    java.lang.String convertTypeToString(short) -> c
    boolean checkOverflowForUnsignedShort(int[]) -> b
    boolean checkOverflowForUnsignedLong(long[]) -> b
    boolean checkOverflowForUnsignedLong(int[]) -> c
    boolean checkOverflowForUnsignedRational(com.android.gallery3d.exif.Rational[]) -> b
    boolean checkOverflowForRational(com.android.gallery3d.exif.Rational[]) -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.android.gallery3d.exif.IfdData -> com.a.a.b.k:
    int mIfdId -> a
    java.util.Map mExifTags -> b
    int mOffsetToNextIfd -> c
    int[] sIfds -> d
    int[] getIfds() -> a
    com.android.gallery3d.exif.ExifTag[] getAllTags() -> b
    int getId() -> c
    com.android.gallery3d.exif.ExifTag getTag(short) -> a
    com.android.gallery3d.exif.ExifTag setTag(com.android.gallery3d.exif.ExifTag) -> a
    int getTagCount() -> d
    boolean equals(java.lang.Object) -> equals
com.android.gallery3d.exif.JpegHeader -> com.a.a.b.l:
    boolean isSofMarker(short) -> a
com.android.gallery3d.exif.Rational -> com.a.a.b.m:
    long mNumerator -> a
    long mDenominator -> b
    long getNumerator() -> a
    long getDenominator() -> b
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.android.gallery3d.glrenderer.BasicTexture -> com.a.a.c.a:
    int mId -> a
    int mState -> b
    int mWidth -> c
    int mHeight -> d
    int mTextureWidth -> e
    int mTextureHeight -> f
    boolean mHasBorder -> h
    com.android.gallery3d.glrenderer.GLCanvas mCanvasRef -> g
    java.util.WeakHashMap sAllTextures -> i
    java.lang.ThreadLocal sInFinalizer -> j
    void setAssociatedCanvas(com.android.gallery3d.glrenderer.GLCanvas) -> a
    void setSize(int,int) -> a
    boolean isFlippedVertically() -> a
    int getId() -> b
    int getWidth() -> c
    int getHeight() -> d
    int getTextureWidth() -> e
    int getTextureHeight() -> f
    boolean hasBorder() -> g
    void setBorder(boolean) -> a
    void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int) -> a
    boolean onBind(com.android.gallery3d.glrenderer.GLCanvas) -> b
    int getTarget() -> h
    boolean isLoaded() -> i
    void recycle() -> j
    void freeResource() -> m
    void finalize() -> finalize
    void invalidateAllTextures() -> k
com.android.gallery3d.glrenderer.BitmapTexture -> com.a.a.c.b:
    android.graphics.Bitmap mContentBitmap -> h
    void onFreeBitmap(android.graphics.Bitmap) -> a
    android.graphics.Bitmap onGetBitmap() -> a_
com.android.gallery3d.glrenderer.GLCanvas -> com.a.a.c.c:
    com.android.gallery3d.glrenderer.GLId getGLId() -> a
    void translate(float,float) -> a
    void rotate(float,float,float,float) -> a
    void save(int) -> a
    void restore() -> b
    void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int) -> a
    void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF) -> a
    boolean unloadTexture(com.android.gallery3d.glrenderer.BasicTexture) -> a
    void setTextureParameters(com.android.gallery3d.glrenderer.BasicTexture) -> b
    void initializeTextureSize(com.android.gallery3d.glrenderer.BasicTexture,int,int) -> a
    void initializeTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.Bitmap) -> a
    void texSubImage2D(com.android.gallery3d.glrenderer.BasicTexture,int,int,android.graphics.Bitmap,int,int) -> a
com.android.gallery3d.glrenderer.GLES20Canvas -> com.a.a.c.d:
    java.lang.String TAG -> e
    float[] BOX_COORDINATES -> f
    float[] BOUNDS_COORDINATES -> g
    float[] mMatrices -> h
    float[] mAlphas -> i
    com.android.gallery3d.util.IntArray mSaveFlags -> j
    int mCurrentAlphaIndex -> k
    int mCurrentMatrixIndex -> l
    int mWidth -> m
    int mHeight -> n
    float[] mProjectionMatrix -> o
    int mScreenWidth -> p
    int mScreenHeight -> q
    int mDrawProgram -> r
    int mTextureProgram -> s
    int mOesTextureProgram -> t
    int mMeshProgram -> u
    int mBoxCoordinates -> v
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mDrawParameters -> a
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mTextureParameters -> b
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mOesTextureParameters -> c
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mMeshParameters -> d
    com.android.gallery3d.util.IntArray mUnboundTextures -> w
    com.android.gallery3d.util.IntArray mDeleteBuffers -> x
    int mCountDrawMesh -> y
    int mCountTextureRect -> z
    int mCountFillRect -> A
    int mCountDrawLine -> B
    int[] mFrameBuffer -> C
    java.util.ArrayList mTargetTextures -> D
    float[] mTempMatrix -> E
    float[] mTempColor -> F
    android.graphics.RectF mTempSourceRect -> G
    android.graphics.RectF mTempTargetRect -> H
    float[] mTempTextureMatrix -> I
    int[] mTempIntArray -> J
    com.android.gallery3d.glrenderer.GLId mGLId -> K
    java.nio.FloatBuffer createBuffer(float[]) -> a
    int assembleProgram(int,int,com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[]) -> a
    int loadShader(int,java.lang.String) -> a
    void setSize(int,int) -> a
    void clearBuffer() -> c
    float getAlpha() -> d
    void translate(float,float) -> a
    void scale(float,float,float) -> a
    void rotate(float,float,float,float) -> a
    void save(int) -> a
    void restore() -> b
    void enableBlending(boolean) -> a
    void setPosition(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[],int) -> a
    void draw(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[],int,int,float,float,float,float) -> a
    void setMatrix(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[],float,float,float,float) -> a
    void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int) -> a
    void copyTextureCoordinates(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF) -> a
    void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF) -> a
    void drawTextureRect(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF) -> b
    void setTextureMatrix(android.graphics.RectF) -> a
    void convertCoordinate(android.graphics.RectF,android.graphics.RectF,com.android.gallery3d.glrenderer.BasicTexture) -> a
    void drawTextureRect(com.android.gallery3d.glrenderer.BasicTexture,float[],android.graphics.RectF) -> a
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] prepareTexture(com.android.gallery3d.glrenderer.BasicTexture) -> c
    void prepareTexture(com.android.gallery3d.glrenderer.BasicTexture,int,com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[]) -> a
    boolean unloadTexture(com.android.gallery3d.glrenderer.BasicTexture) -> a
    com.android.gallery3d.glrenderer.RawTexture getTargetTexture() -> f
    void setTextureParameters(com.android.gallery3d.glrenderer.BasicTexture) -> b
    void initializeTextureSize(com.android.gallery3d.glrenderer.BasicTexture,int,int) -> a
    void initializeTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.Bitmap) -> a
    void texSubImage2D(com.android.gallery3d.glrenderer.BasicTexture,int,int,android.graphics.Bitmap,int,int) -> a
    int uploadBuffer(java.nio.FloatBuffer) -> a
    int uploadBuffer(java.nio.Buffer,int) -> a
    void checkError() -> e
    com.android.gallery3d.glrenderer.GLId getGLId() -> a
com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter -> com.a.a.c.e:
    void loadHandle(int) -> a
com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter -> com.a.a.c.f:
    int handle -> a
    java.lang.String mName -> b
    void loadHandle(int) -> a
com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter -> com.a.a.c.g:
    void loadHandle(int) -> a
com.android.gallery3d.glrenderer.GLES20IdImpl -> com.a.a.c.h:
    int[] mTempIntArray -> a
    int generateTexture() -> a
    void glGenBuffers(int,int[],int) -> a
com.android.gallery3d.glrenderer.GLId -> com.a.a.c.i:
    int generateTexture() -> a
    void glGenBuffers(int,int[],int) -> a
com.android.gallery3d.glrenderer.RawTexture -> com.a.a.c.j:
    boolean mOpaque -> h
    boolean mIsFlipped -> i
    boolean isOpaque() -> l
    boolean isFlippedVertically() -> a
    boolean onBind(com.android.gallery3d.glrenderer.GLCanvas) -> b
    int getTarget() -> h
com.android.gallery3d.glrenderer.Texture -> com.a.a.c.k:
    boolean isOpaque() -> l
com.android.gallery3d.glrenderer.UploadedTexture -> com.a.a.c.l:
    java.util.HashMap sBorderLines -> h
    com.android.gallery3d.glrenderer.UploadedTexture$BorderKey sBorderKey -> j
    boolean mContentValid -> k
    boolean mIsUploading -> l
    boolean mOpaque -> m
    boolean mThrottled -> n
    int sUploadedCount -> o
    android.graphics.Bitmap mBitmap -> i
    int mBorder -> p
    android.graphics.Bitmap getBorderLine(boolean,android.graphics.Bitmap$Config,int) -> a
    android.graphics.Bitmap getBitmap() -> o
    void freeBitmap() -> p
    int getWidth() -> c
    int getHeight() -> d
    android.graphics.Bitmap onGetBitmap() -> a_
    void onFreeBitmap(android.graphics.Bitmap) -> a
    void invalidateContent() -> m
    boolean isContentValid() -> n
    void updateContent(com.android.gallery3d.glrenderer.GLCanvas) -> c
    void uploadToCanvas(com.android.gallery3d.glrenderer.GLCanvas) -> d
    boolean onBind(com.android.gallery3d.glrenderer.GLCanvas) -> b
    int getTarget() -> h
    boolean isOpaque() -> l
    void recycle() -> j
com.android.gallery3d.glrenderer.UploadedTexture$BorderKey -> com.a.a.c.m:
    boolean vertical -> a
    android.graphics.Bitmap$Config config -> b
    int length -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    com.android.gallery3d.glrenderer.UploadedTexture$BorderKey clone() -> a
    java.lang.Object clone() -> clone
com.android.gallery3d.util.IntArray -> com.a.a.d.a:
    int[] mData -> a
    int mSize -> b
    void add(int) -> a
    int removeLast() -> a
com.android.photos.BitmapRegionTileSource -> com.a.b.a:
    com.android.photos.SimpleBitmapRegionDecoder mDecoder -> a
    int mWidth -> b
    int mHeight -> c
    int mTileSize -> d
    com.android.gallery3d.glrenderer.BasicTexture mPreview -> e
    int mRotation -> f
    android.graphics.Rect mWantRegion -> g
    android.graphics.BitmapFactory$Options mOptions -> h
    int getTileSize() -> a
    int getImageWidth() -> b
    int getImageHeight() -> c
    com.android.gallery3d.glrenderer.BasicTexture getPreview() -> d
    int getRotation() -> e
    android.graphics.Bitmap getTile(int,int,int,android.graphics.Bitmap) -> a
    android.graphics.Bitmap decodePreview(com.android.photos.BitmapRegionTileSource$BitmapSource,int) -> a
    android.graphics.Bitmap ensureGLCompatibleBitmap(android.graphics.Bitmap) -> a
com.android.photos.BitmapRegionTileSource$BitmapSource -> com.a.b.b:
    com.android.photos.SimpleBitmapRegionDecoder mDecoder -> a
    android.graphics.Bitmap mPreview -> b
    int mPreviewSize -> c
    int mRotation -> d
    com.android.photos.BitmapRegionTileSource$BitmapSource$State mState -> e
    boolean loadInBackground() -> a
    com.android.photos.BitmapRegionTileSource$BitmapSource$State getLoadingState() -> b
    com.android.photos.SimpleBitmapRegionDecoder getBitmapRegionDecoder() -> c
    android.graphics.Bitmap getPreviewBitmap() -> d
    int getPreviewSize() -> e
    int getRotation() -> f
    boolean readExif(com.android.gallery3d.exif.ExifInterface) -> a
    com.android.photos.SimpleBitmapRegionDecoder loadBitmapRegionDecoder() -> g
    android.graphics.Bitmap loadPreviewBitmap(android.graphics.BitmapFactory$Options) -> a
com.android.photos.BitmapRegionTileSource$BitmapSource$State -> com.a.b.c:
    com.android.photos.BitmapRegionTileSource$BitmapSource$State NOT_LOADED -> a
    com.android.photos.BitmapRegionTileSource$BitmapSource$State LOADED -> b
    com.android.photos.BitmapRegionTileSource$BitmapSource$State ERROR_LOADING -> c
    com.android.photos.BitmapRegionTileSource$BitmapSource$State[] ENUM$VALUES -> d
    com.android.photos.BitmapRegionTileSource$BitmapSource$State[] values() -> values
    com.android.photos.BitmapRegionTileSource$BitmapSource$State valueOf(java.lang.String) -> valueOf
com.android.photos.BitmapRegionTileSource$FilePathBitmapSource -> com.a.b.d:
    java.lang.String mPath -> a
    com.android.photos.SimpleBitmapRegionDecoder loadBitmapRegionDecoder() -> g
    android.graphics.Bitmap loadPreviewBitmap(android.graphics.BitmapFactory$Options) -> a
    boolean readExif(com.android.gallery3d.exif.ExifInterface) -> a
com.android.photos.BitmapRegionTileSource$ResourceBitmapSource -> com.a.b.e:
    android.content.res.Resources mRes -> a
    int mResId -> b
    java.io.InputStream regenerateInputStream() -> h
    com.android.photos.SimpleBitmapRegionDecoder loadBitmapRegionDecoder() -> g
    android.graphics.Bitmap loadPreviewBitmap(android.graphics.BitmapFactory$Options) -> a
    boolean readExif(com.android.gallery3d.exif.ExifInterface) -> a
com.android.photos.BitmapRegionTileSource$UriBitmapSource -> com.a.b.f:
    android.content.Context mContext -> a
    android.net.Uri mUri -> b
    java.io.InputStream regenerateInputStream() -> h
    com.android.photos.SimpleBitmapRegionDecoder loadBitmapRegionDecoder() -> g
    android.graphics.Bitmap loadPreviewBitmap(android.graphics.BitmapFactory$Options) -> a
    boolean readExif(com.android.gallery3d.exif.ExifInterface) -> a
com.android.photos.DumbBitmapRegionDecoder -> com.a.b.g:
    android.graphics.Bitmap mBuffer -> a
    android.graphics.Canvas mTempCanvas -> b
    android.graphics.Paint mTempPaint -> c
    com.android.photos.DumbBitmapRegionDecoder newInstance(java.lang.String) -> a
    com.android.photos.DumbBitmapRegionDecoder newInstance(java.io.InputStream) -> a
    int getWidth() -> a
    int getHeight() -> b
    android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options) -> a
com.android.photos.SimpleBitmapRegionDecoder -> com.a.b.h:
    int getWidth() -> a
    int getHeight() -> b
    android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options) -> a
com.android.photos.SimpleBitmapRegionDecoderWrapper -> com.a.b.i:
    android.graphics.BitmapRegionDecoder mDecoder -> a
    com.android.photos.SimpleBitmapRegionDecoderWrapper newInstance(java.lang.String,boolean) -> a
    com.android.photos.SimpleBitmapRegionDecoderWrapper newInstance(java.io.InputStream,boolean) -> a
    int getWidth() -> a
    int getHeight() -> b
    android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options) -> a
com.android.photos.views.TiledImageRenderer -> com.a.b.a.a:
    android.util.Pools$Pool sTilePool -> h
    int mTileSize -> i
    com.android.photos.views.TiledImageRenderer$TileSource mModel -> j
    com.android.gallery3d.glrenderer.BasicTexture mPreview -> k
    int mLevelCount -> a
    int mLevel -> l
    int mOffsetX -> m
    int mOffsetY -> n
    int mUploadQuota -> o
    boolean mRenderComplete -> p
    android.graphics.RectF mSourceRect -> q
    android.graphics.RectF mTargetRect -> r
    android.support.v4.util.LongSparseArray mActiveTiles -> s
    java.lang.Object mQueueLock -> t
    com.android.photos.views.TiledImageRenderer$TileQueue mRecycledQueue -> u
    com.android.photos.views.TiledImageRenderer$TileQueue mUploadQueue -> v
    com.android.photos.views.TiledImageRenderer$TileQueue mDecodeQueue -> w
    int mImageWidth -> b
    int mImageHeight -> c
    int mCenterX -> d
    int mCenterY -> e
    float mScale -> f
    int mRotation -> g
    boolean mLayoutTiles -> x
    android.graphics.Rect mTileRange -> y
    android.graphics.Rect[] mActiveRange -> z
    com.android.photos.views.TiledImageRenderer$TileDecoder mTileDecoder -> A
    boolean mBackgroundTileUploaded -> B
    int mViewWidth -> C
    int mViewHeight -> D
    android.view.View mParent -> E
    int suggestedTileSize(android.content.Context) -> a
    boolean isHighResolution(android.content.Context) -> b
    void invalidate() -> d
    void setModel(com.android.photos.views.TiledImageRenderer$TileSource,int) -> a
    void calculateLevelCount() -> e
    void notifyModelInvalidated() -> a
    void setViewSize(int,int) -> a
    void setPosition(int,int,float) -> a
    void layoutTiles() -> f
    void invalidateTiles() -> g
    void getRange(android.graphics.Rect,int,int,int,int) -> a
    void getRange(android.graphics.Rect,int,int,int,float,int) -> a
    void freeTextures() -> b
    boolean draw(com.android.gallery3d.glrenderer.GLCanvas) -> a
    void uploadBackgroundTiles(com.android.gallery3d.glrenderer.GLCanvas) -> b
    void queueForDecode(com.android.photos.views.TiledImageRenderer$Tile) -> a
    void decodeTile(com.android.photos.views.TiledImageRenderer$Tile) -> b
    com.android.photos.views.TiledImageRenderer$Tile obtainTile(int,int,int) -> a
    void recycleTile(com.android.photos.views.TiledImageRenderer$Tile) -> c
    void activateTile(int,int,int) -> b
    com.android.photos.views.TiledImageRenderer$Tile getTile(int,int,int) -> c
    long makeTileKey(int,int,int) -> d
    void uploadTiles(com.android.gallery3d.glrenderer.GLCanvas) -> c
    void drawTile(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,float,float,float) -> a
    boolean drawTile(com.android.photos.views.TiledImageRenderer$Tile,com.android.gallery3d.glrenderer.GLCanvas,android.graphics.RectF,android.graphics.RectF) -> a
    android.util.Pools$Pool access$0() -> c
    int access$1(com.android.photos.views.TiledImageRenderer) -> a
    com.android.photos.views.TiledImageRenderer$TileSource access$2(com.android.photos.views.TiledImageRenderer) -> b
    com.android.photos.views.TiledImageRenderer$Tile access$3(com.android.photos.views.TiledImageRenderer,int,int,int) -> a
    int access$4(com.android.photos.views.TiledImageRenderer) -> c
    java.lang.Object access$5(com.android.photos.views.TiledImageRenderer) -> d
    com.android.photos.views.TiledImageRenderer$TileQueue access$6(com.android.photos.views.TiledImageRenderer) -> e
    void access$7(com.android.photos.views.TiledImageRenderer,com.android.photos.views.TiledImageRenderer$Tile) -> a
com.android.photos.views.TiledImageRenderer$Tile -> com.a.b.a.b:
    int mX -> h
    int mY -> j
    int mTileLevel -> k
    com.android.photos.views.TiledImageRenderer$Tile mNext -> l
    android.graphics.Bitmap mDecodedTile -> m
    int mTileState -> n
    com.android.photos.views.TiledImageRenderer this$0 -> o
    void onFreeBitmap(android.graphics.Bitmap) -> a
    boolean decode() -> o
    android.graphics.Bitmap onGetBitmap() -> a_
    int getTextureWidth() -> e
    int getTextureHeight() -> f
    void update(int,int,int) -> a
    com.android.photos.views.TiledImageRenderer$Tile getParentTile() -> p
    java.lang.String toString() -> toString
com.android.photos.views.TiledImageRenderer$TileDecoder -> com.a.b.a.c:
    com.android.photos.views.TiledImageRenderer this$0 -> a
    void finishAndWait() -> a
    com.android.photos.views.TiledImageRenderer$Tile waitForTile() -> b
    void run() -> run
com.android.photos.views.TiledImageRenderer$TileQueue -> com.a.b.a.d:
    com.android.photos.views.TiledImageRenderer$Tile mHead -> a
    com.android.photos.views.TiledImageRenderer$Tile pop() -> a
    boolean push(com.android.photos.views.TiledImageRenderer$Tile) -> a
    boolean contains(com.android.photos.views.TiledImageRenderer$Tile) -> b
    void clean() -> b
com.android.photos.views.TiledImageRenderer$TileSource -> com.a.b.a.e:
    int getTileSize() -> a
    int getImageWidth() -> b
    int getImageHeight() -> c
    int getRotation() -> e
    com.android.gallery3d.glrenderer.BasicTexture getPreview() -> d
    android.graphics.Bitmap getTile(int,int,int,android.graphics.Bitmap) -> a
com.android.photos.views.TiledImageView -> com.a.b.a.f:
    boolean IS_SUPPORTED -> c
    boolean USE_CHOREOGRAPHER -> d
    android.opengl.GLSurfaceView mGLSurfaceView -> e
    boolean mInvalPending -> f
    android.view.Choreographer$FrameCallback mFrameCallback -> g
    float[] mValues -> h
    java.lang.Object mLock -> a
    com.android.photos.views.TiledImageView$ImageRendererWrapper mRenderer -> b
    java.lang.Runnable mFreeTextures -> i
    android.graphics.RectF mTempRectF -> j
    void setVisibility(int) -> setVisibility
    void destroy() -> a
    void setTileSource(com.android.photos.views.TiledImageRenderer$TileSource,java.lang.Runnable) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void updateScaleIfNecessaryLocked(com.android.photos.views.TiledImageView$ImageRendererWrapper) -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void setTranslationX(float) -> setTranslationX
    void invalidate() -> invalidate
    void invalOnVsync() -> b
    void access$0(com.android.photos.views.TiledImageView,boolean) -> a
    android.opengl.GLSurfaceView access$1(com.android.photos.views.TiledImageView) -> a
com.android.photos.views.TiledImageView$1 -> com.a.b.a.g:
    com.android.photos.views.TiledImageView this$0 -> a
    void run() -> run
com.android.photos.views.TiledImageView$2 -> com.a.b.a.h:
    com.android.photos.views.TiledImageView this$0 -> a
    void doFrame(long) -> doFrame
com.android.photos.views.TiledImageView$ImageRendererWrapper -> com.a.b.a.i:
    float scale -> a
    int centerX -> b
    int centerY -> c
    int rotation -> d
    com.android.photos.views.TiledImageRenderer$TileSource source -> e
    java.lang.Runnable isReadyCallback -> f
    com.android.photos.views.TiledImageRenderer image -> g
com.android.photos.views.TiledImageView$TileRenderer -> com.a.b.a.j:
    com.android.gallery3d.glrenderer.GLES20Canvas mCanvas -> b
    com.android.photos.views.TiledImageView this$0 -> a
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
com.google.protobuf.nano.CodedInputByteBufferNano -> com.b.a.a.a:
    byte[] buffer -> a
    int bufferStart -> b
    int bufferSize -> c
    int bufferSizeAfterLimit -> d
    int bufferPos -> e
    int lastTag -> f
    int currentLimit -> g
    int recursionDepth -> h
    int recursionLimit -> i
    int sizeLimit -> j
    com.google.protobuf.nano.CodedInputByteBufferNano newInstance(byte[],int,int) -> a
    int readTag() -> a
    void checkLastTagWas(int) -> a
    boolean skipField(int) -> b
    void skipMessage() -> b
    long readInt64() -> c
    int readInt32() -> d
    boolean readBool() -> e
    java.lang.String readString() -> f
    void readMessage(com.google.protobuf.nano.MessageNano) -> a
    byte[] readBytes() -> g
    int readRawVarint32() -> h
    long readRawVarint64() -> i
    int readRawLittleEndian32() -> j
    long readRawLittleEndian64() -> k
    int pushLimit(int) -> c
    void recomputeBufferSizeAfterLimit() -> p
    void popLimit(int) -> d
    int getBytesUntilLimit() -> l
    boolean isAtEnd() -> m
    int getPosition() -> n
    void rewindToPosition(int) -> e
    byte readRawByte() -> o
    byte[] readRawBytes(int) -> f
    void skipRawBytes(int) -> g
com.google.protobuf.nano.CodedOutputByteBufferNano -> com.b.a.a.b:
    byte[] buffer -> a
    int limit -> b
    int position -> c
    com.google.protobuf.nano.CodedOutputByteBufferNano newInstance(byte[],int,int) -> a
    void writeInt64(int,long) -> a
    void writeInt32(int,int) -> a
    void writeBool(int,boolean) -> a
    void writeString(int,java.lang.String) -> a
    void writeMessage(int,com.google.protobuf.nano.MessageNano) -> a
    void writeBytes(int,byte[]) -> a
    void writeInt64NoTag(long) -> a
    void writeInt32NoTag(int) -> a
    void writeBoolNoTag(boolean) -> a
    void writeStringNoTag(java.lang.String) -> a
    void writeMessageNoTag(com.google.protobuf.nano.MessageNano) -> a
    void writeBytesNoTag(byte[]) -> a
    int computeInt64Size(int,long) -> b
    int computeInt32Size(int,int) -> b
    int computeBoolSize(int,boolean) -> b
    int computeStringSize(int,java.lang.String) -> b
    int computeMessageSize(int,com.google.protobuf.nano.MessageNano) -> b
    int computeBytesSize(int,byte[]) -> b
    int computeInt64SizeNoTag(long) -> b
    int computeInt32SizeNoTag(int) -> b
    int computeBoolSizeNoTag(boolean) -> b
    int computeStringSizeNoTag(java.lang.String) -> b
    int computeMessageSizeNoTag(com.google.protobuf.nano.MessageNano) -> b
    int computeBytesSizeNoTag(byte[]) -> b
    int spaceLeft() -> a
    void checkNoSpaceLeft() -> b
    void writeRawByte(byte) -> a
    void writeRawByte(int) -> c
    void writeRawBytes(byte[]) -> c
    void writeRawBytes(byte[],int,int) -> b
    void writeTag(int,int) -> c
    int computeTagSize(int) -> d
    void writeRawVarint32(int) -> e
    int computeRawVarint32Size(int) -> f
    void writeRawVarint64(long) -> c
    int computeRawVarint64Size(long) -> d
com.google.protobuf.nano.CodedOutputByteBufferNano$OutOfSpaceException -> com.b.a.a.c:
com.google.protobuf.nano.InvalidProtocolBufferNanoException -> com.b.a.a.d:
    com.google.protobuf.nano.InvalidProtocolBufferNanoException truncatedMessage() -> a
    com.google.protobuf.nano.InvalidProtocolBufferNanoException negativeSize() -> b
    com.google.protobuf.nano.InvalidProtocolBufferNanoException malformedVarint() -> c
    com.google.protobuf.nano.InvalidProtocolBufferNanoException invalidTag() -> d
    com.google.protobuf.nano.InvalidProtocolBufferNanoException invalidEndTag() -> e
    com.google.protobuf.nano.InvalidProtocolBufferNanoException invalidWireType() -> f
    com.google.protobuf.nano.InvalidProtocolBufferNanoException recursionLimitExceeded() -> g
com.google.protobuf.nano.MessageNano -> com.b.a.a.e:
    int getCachedSize() -> a
    int getSerializedSize() -> b
    void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano) -> a
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> a
    byte[] toByteArray(com.google.protobuf.nano.MessageNano) -> a
    void toByteArray(com.google.protobuf.nano.MessageNano,byte[],int,int) -> a
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.MessageNano,byte[]) -> a
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.MessageNano,byte[],int,int) -> b
    java.lang.String toString() -> toString
com.google.protobuf.nano.MessageNanoPrinter -> com.b.a.a.f:
    java.lang.String print(com.google.protobuf.nano.MessageNano) -> a
    void print(java.lang.String,java.lang.Class,java.lang.Object,java.lang.StringBuffer,java.lang.StringBuffer) -> a
    java.lang.String deCamelCaseify(java.lang.String) -> a
    java.lang.String sanitizeString(java.lang.String) -> b
    java.lang.String escapeString(java.lang.String) -> c
com.google.protobuf.nano.WireFormatNano -> com.b.a.a.g:
    int MESSAGE_SET_ITEM_TAG -> a
    int MESSAGE_SET_ITEM_END_TAG -> b
    int MESSAGE_SET_TYPE_ID_TAG -> c
    int MESSAGE_SET_MESSAGE_TAG -> d
    int[] EMPTY_INT_ARRAY -> e
    long[] EMPTY_LONG_ARRAY -> f
    float[] EMPTY_FLOAT_ARRAY -> g
    double[] EMPTY_DOUBLE_ARRAY -> h
    boolean[] EMPTY_BOOLEAN_ARRAY -> i
    java.lang.String[] EMPTY_STRING_ARRAY -> j
    byte[][] EMPTY_BYTES_ARRAY -> k
    byte[] EMPTY_BYTES -> l
    int getTagWireType(int) -> a
    int getTagFieldNumber(int) -> b
    int makeTag(int,int) -> a
    boolean parseUnknownField(com.google.protobuf.nano.CodedInputByteBufferNano,int) -> a
    int getRepeatedFieldArrayLength(com.google.protobuf.nano.CodedInputByteBufferNano,int) -> b
com.phonemetra.turbo.launcher.Alarm -> com.phonemetra.turbo.launcher.a:
    long mAlarmTriggerTime -> a
    boolean mWaitingForCallback -> b
    android.os.Handler mHandler -> c
    com.phonemetra.turbo.launcher.OnAlarmListener mAlarmListener -> d
    boolean mAlarmPending -> e
    void setOnAlarmListener(com.phonemetra.turbo.launcher.OnAlarmListener) -> a
    void setAlarm(long) -> a
    void cancelAlarm() -> a
    void run() -> run
    boolean alarmPending() -> b
com.phonemetra.turbo.launcher.AllAppsList -> com.phonemetra.turbo.launcher.b:
    java.util.ArrayList data -> a
    java.util.ArrayList added -> b
    java.util.ArrayList removed -> c
    java.util.ArrayList modified -> d
    com.phonemetra.turbo.launcher.IconCache mIconCache -> e
    com.phonemetra.turbo.launcher.AppFilter mAppFilter -> f
    void add(com.phonemetra.turbo.launcher.AppInfo) -> a
    void clear() -> a
    void addPackage(android.content.Context,java.lang.String) -> a
    void removePackage(java.lang.String) -> a
    void updatePackage(android.content.Context,java.lang.String) -> b
    java.util.List findActivitiesForPackage(android.content.Context,java.lang.String) -> c
    boolean findActivity(java.util.List,android.content.ComponentName) -> a
    boolean findActivity(java.util.ArrayList,android.content.ComponentName) -> a
    com.phonemetra.turbo.launcher.AppInfo findApplicationInfoLocked(java.lang.String,java.lang.String) -> a
com.phonemetra.turbo.launcher.AlphaDisableableButton -> com.phonemetra.turbo.launcher.AlphaDisableableButton:
    float DISABLED_ALPHA_VALUE -> a
    void setEnabled(boolean) -> setEnabled
com.phonemetra.turbo.launcher.AppFilter -> com.phonemetra.turbo.launcher.c:
    boolean shouldShowApp(android.content.ComponentName) -> a
    com.phonemetra.turbo.launcher.AppFilter loadByName(java.lang.String) -> a
com.phonemetra.turbo.launcher.AppInfo -> com.phonemetra.turbo.launcher.d:
    android.content.Intent intent -> a
    android.graphics.Bitmap iconBitmap -> b
    long firstInstallTime -> c
    android.content.ComponentName componentName -> d
    int flags -> e
    android.content.Intent getIntent() -> a
    android.content.Intent getRestoredIntent() -> b
    int initFlags(android.content.pm.PackageInfo) -> a
    long initFirstInstallTime(android.content.pm.PackageInfo) -> b
    void setActivity(android.content.ComponentName,int) -> a
    java.lang.String toString() -> toString
    com.phonemetra.turbo.launcher.ShortcutInfo makeShortcut() -> c
com.phonemetra.turbo.launcher.AppWidgetResizeFrame -> com.phonemetra.turbo.launcher.e:
    com.phonemetra.turbo.launcher.LauncherAppWidgetHostView mWidgetView -> h
    com.phonemetra.turbo.launcher.CellLayout mCellLayout -> i
    com.phonemetra.turbo.launcher.DragLayer mDragLayer -> j
    android.widget.ImageView mLeftHandle -> k
    android.widget.ImageView mRightHandle -> l
    android.widget.ImageView mTopHandle -> m
    android.widget.ImageView mBottomHandle -> n
    boolean mLeftBorderActive -> o
    boolean mRightBorderActive -> p
    boolean mTopBorderActive -> q
    boolean mBottomBorderActive -> r
    int mWidgetPaddingLeft -> s
    int mWidgetPaddingRight -> t
    int mWidgetPaddingTop -> u
    int mWidgetPaddingBottom -> v
    int mBaselineWidth -> w
    int mBaselineHeight -> x
    int mBaselineX -> y
    int mBaselineY -> z
    int mRunningHInc -> A
    int mRunningVInc -> B
    int mMinHSpan -> C
    int mMinVSpan -> D
    int mDeltaX -> E
    int mDeltaY -> F
    int mDeltaXAddOn -> G
    int mDeltaYAddOn -> H
    int mBackgroundPadding -> I
    int mTouchTargetWidth -> J
    int mTopTouchRegionAdjustment -> K
    int mBottomTouchRegionAdjustment -> L
    int[] mDirectionVector -> a
    int[] mLastDirectionVector -> b
    int[] mTmpPt -> c
    int SNAP_DURATION -> d
    int BACKGROUND_PADDING -> e
    float DIMMED_HANDLE_ALPHA -> f
    float RESIZE_THRESHOLD -> g
    android.graphics.Rect mTmpRect -> M
    com.phonemetra.turbo.launcher.Launcher mLauncher -> N
    boolean beginResizeIfPointInRegion(int,int) -> a
    void updateDeltas(int,int) -> b
    void visualizeResizeForDelta(int,int) -> c
    void visualizeResizeForDelta(int,int,boolean) -> a
    void resizeWidgetIfNeeded(boolean) -> b
    void updateWidgetSizeRanges(android.appwidget.AppWidgetHostView,com.phonemetra.turbo.launcher.Launcher,int,int) -> a
    android.graphics.Rect getWidgetSizeRanges(com.phonemetra.turbo.launcher.Launcher,int,int,android.graphics.Rect) -> a
    void commitResize() -> a
    void onTouchUp() -> b
    void snapToWidget(boolean) -> a
com.phonemetra.turbo.launcher.AppWidgetResizeFrame$1 -> com.phonemetra.turbo.launcher.f:
    com.phonemetra.turbo.launcher.AppWidgetResizeFrame this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.AppWidgetResizeFrame$2 -> com.phonemetra.turbo.launcher.g:
    com.phonemetra.turbo.launcher.AppWidgetResizeFrame this$0 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.AppsCustomizeAsyncTask -> com.phonemetra.turbo.launcher.h:
    com.phonemetra.turbo.launcher.AsyncTaskPageData$Type dataType -> a
    int page -> b
    int threadPriority -> c
    com.phonemetra.turbo.launcher.AsyncTaskPageData doInBackground(com.phonemetra.turbo.launcher.AsyncTaskPageData[]) -> a
    void onPostExecute(com.phonemetra.turbo.launcher.AsyncTaskPageData) -> a
    void setThreadPriority(int) -> a
    void syncThreadPriority() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.AppsCustomizeCellLayout -> com.phonemetra.turbo.launcher.i:
    void removeAllViewsOnPage() -> a
    int getPageChildCount() -> getPageChildCount
com.phonemetra.turbo.launcher.AppsCustomizeLayout -> com.phonemetra.turbo.launcher.AppsCustomizeLayout:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView mAppsCustomizePane -> a
    android.widget.FrameLayout mContent -> b
    boolean mInTransition -> c
    boolean mTransitioningToWorkspace -> d
    boolean mResetAfterTransition -> e
    android.graphics.Rect mInsets -> f
    void setInsets(android.graphics.Rect) -> setInsets
    void onFinishInflate() -> onFinishInflate
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    int getDescendantFocusability() -> getDescendantFocusability
    void reset() -> a
    void enableAndBuildHardwareLayer() -> e
    android.view.View getContent() -> getContent
    void onLauncherTransitionPrepare(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> a
    void onLauncherTransitionStart(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> b
    void onLauncherTransitionStep(com.phonemetra.turbo.launcher.Launcher,float) -> a
    void onLauncherTransitionEnd(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> c
    void setVisibilityOfSiblingsWithLowerZOrder(int) -> setVisibilityOfSiblingsWithLowerZOrder
    void onWindowVisible() -> b
    void onTrimMemory() -> c
    boolean isTransitioning() -> d
com.phonemetra.turbo.launcher.AppsCustomizePagedView -> com.phonemetra.turbo.launcher.AppsCustomizePagedView:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType mContentType -> at
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode mSortMode -> au
    int mFilterApps -> av
    com.phonemetra.turbo.launcher.Launcher mLauncher -> aw
    com.phonemetra.turbo.launcher.DragController mDragController -> ax
    android.view.LayoutInflater mLayoutInflater -> ay
    android.content.pm.PackageManager mPackageManager -> az
    int mSaveInstanceStateItemIndex -> aA
    com.phonemetra.turbo.launcher.PagedViewIcon mPressedIcon -> aB
    java.util.ArrayList mApps -> aC
    java.util.ArrayList mWidgets -> aD
    java.util.ArrayList mFilteredApps -> aE
    java.util.ArrayList mFilteredWidgets -> aF
    java.util.ArrayList mProtectedApps -> aG
    java.util.ArrayList mProtectedPackages -> aH
    android.graphics.Canvas mCanvas -> aI
    com.phonemetra.turbo.launcher.IconCache mIconCache -> aJ
    int mContentWidth -> aK
    int mContentHeight -> aL
    int mWidgetCountX -> aM
    int mWidgetCountY -> aN
    int mWidgetWidthGap -> aO
    int mWidgetHeightGap -> aP
    com.phonemetra.turbo.launcher.PagedViewCellLayout mWidgetSpacingLayout -> aQ
    int mNumAppsPages -> aR
    int mNumWidgetPages -> aS
    android.graphics.Rect mAllAppsPadding -> aT
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$State mState -> aU
    boolean mIsSwitchingState -> aV
    boolean mAppsCustomizeFadeInAdjacentScreens -> aW
    float mNewScale -> aX
    float[] mOldBackgroundAlphas -> aY
    float[] mOldAlphas -> aZ
    float[] mNewBackgroundAlphas -> ba
    float[] mNewAlphas -> bb
    float TRANSITION_MAX_ROTATION -> bc
    boolean mOverscrollTransformsSet -> bd
    float mLastOverscrollPivotX -> be
    java.util.ArrayList mRunningTasks -> a
    java.lang.Runnable mInflateWidgetRunnable -> bf
    java.lang.Runnable mBindWidgetRunnable -> bg
    int mWidgetCleanupState -> b
    int mWidgetLoadingId -> c
    com.phonemetra.turbo.launcher.PendingAddWidgetInfo mCreateWidgetInfo -> d
    boolean mDraggingWidget -> bh
    android.widget.Toast mWidgetInstructionToast -> bi
    boolean mInTransition -> bj
    java.util.ArrayList mDeferredSyncWidgetPageItems -> bk
    java.util.ArrayList mDeferredPrepareLoadWidgetPreviewsTasks -> bl
    android.graphics.Rect mTmpRect -> bm
    float mOverviewModeShrinkFactor -> bn
    int mOverviewModePageOffset -> bo
    com.phonemetra.turbo.launcher.BitmapCache mCachedShortcutPreviewBitmap -> e
    com.phonemetra.turbo.launcher.PaintCache mCachedShortcutPreviewPaint -> f
    com.phonemetra.turbo.launcher.CanvasCache mCachedShortcutPreviewCanvas -> g
    com.phonemetra.turbo.launcher.CanvasCache mCachedAppWidgetPreviewCanvas -> h
    com.phonemetra.turbo.launcher.RectCache mCachedAppWidgetPreviewSrcRect -> i
    com.phonemetra.turbo.launcher.RectCache mCachedAppWidgetPreviewDestRect -> j
    com.phonemetra.turbo.launcher.PaintCache mCachedAppWidgetPreviewPaint -> k
    com.phonemetra.turbo.launcher.WidgetPreviewLoader mWidgetPreviewLoader -> l
    boolean mInBulkBind -> bp
    boolean mNeedToUpdatePageCountsAndInvalidateData -> bq
    boolean sAccessibilityEnabled -> br
    com.phonemetra.turbo.launcher.Workspace$ZoomInInterpolator mZoomInInterpolator -> bs
    int[] $SWITCH_TABLE$com$phonemetra$turbo$launcher$AppsCustomizePagedView$SortMode -> bt
    void init() -> a
    void onFinishInflate() -> onFinishInflate
    void setAllAppsPadding(android.graphics.Rect) -> setAllAppsPadding
    void setWidgetsPageIndicatorPadding(int) -> setWidgetsPageIndicatorPadding
    com.phonemetra.turbo.launcher.WidgetPreviewLoader getWidgetPreviewLoader() -> getWidgetPreviewLoader
    int getMiddleComponentIndexOnCurrentPage() -> getMiddleComponentIndexOnCurrentPage
    int getSaveInstanceStateIndex() -> getSaveInstanceStateIndex
    int getPageForComponent(int) -> a
    void restorePageForIndex(int) -> b
    void updatePageCounts() -> U
    void onDataReady(int,int) -> a
    void onMeasure(int,int) -> onMeasure
    void onPackagesUpdated(java.util.ArrayList) -> a
    void setBulkBind(boolean) -> setBulkBind
    void updatePageCountsAndInvalidateData() -> V
    void onClick(android.view.View) -> onClick
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void determineDraggingStart(android.view.MotionEvent) -> a
    void beginDraggingApplication(android.view.View) -> h
    android.os.Bundle getDefaultOptionsForWidget(com.phonemetra.turbo.launcher.Launcher,com.phonemetra.turbo.launcher.PendingAddWidgetInfo) -> a
    void preloadWidget(com.phonemetra.turbo.launcher.PendingAddWidgetInfo) -> a
    void onShortPress(android.view.View) -> a
    void cleanupWidgetPreloading(boolean) -> c
    void cleanUpShortPress(android.view.View) -> b
    boolean beginDraggingWidget(android.view.View) -> i
    boolean beginDragging(android.view.View) -> c
    void endDragging(android.view.View,boolean,boolean) -> a
    android.view.View getContent() -> getContent
    void onLauncherTransitionPrepare(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> a
    void onLauncherTransitionStart(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> b
    void onLauncherTransitionStep(com.phonemetra.turbo.launcher.Launcher,float) -> a
    void onLauncherTransitionEnd(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> c
    void onDropCompleted(android.view.View,com.phonemetra.turbo.launcher.DropTarget$DragObject,boolean,boolean) -> a
    void onFlingToDeleteCompleted() -> d_
    boolean supportsFlingToDelete() -> c
    boolean supportsAppInfoDropTarget() -> d
    boolean supportsDeleteDropTarget() -> e
    float getIntrinsicIconScaleFactor() -> getIntrinsicIconScaleFactor
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onResume() -> f
    void clearAllWidgetPages() -> g
    void cancelAllTasks() -> W
    void setContentType(com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType) -> setContentType
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType getContentType() -> getContentType
    void snapToPage(int,int,int) -> a_
    void setVisibilityOnChildren(android.view.ViewGroup,int) -> a
    void setupPage(com.phonemetra.turbo.launcher.AppsCustomizeCellLayout) -> setupPage
    void setChildAlpha(android.view.View,float) -> a
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    boolean shouldDrawChild(android.view.View) -> d
    void syncAppsPageItems(int,boolean) -> a
    int getWidgetPageLoadPriority(int) -> q
    int getThreadPriorityForPage(int) -> r
    int getSleepForPage(int) -> s
    void prepareLoadWidgetPreviewsTask(int,java.util.ArrayList,int,int,int) -> a
    void setupPage(com.phonemetra.turbo.launcher.PagedViewGridLayout) -> setupPage
    void syncWidgetPageItems(int,boolean) -> b
    void loadWidgetPreviewsInBackground(com.phonemetra.turbo.launcher.AppsCustomizeAsyncTask,com.phonemetra.turbo.launcher.AsyncTaskPageData) -> a
    void onSyncWidgetPageItems(com.phonemetra.turbo.launcher.AsyncTaskPageData,boolean) -> a
    void syncPages() -> h
    void syncPageItems(int,boolean) -> c
    android.view.View getPageAt(int) -> c
    int indexToPage(int) -> d
    void setFadeInAdjacentScreens(boolean) -> setFadeInAdjacentScreens
    void screenScrolled(int) -> e
    void enableHwLayersOnVisiblePages() -> X
    void overScroll(float) -> a
    void updatePageAlphaValues(int) -> t
    boolean isInOverviewMode() -> i
    void exitOverviewMode(boolean) -> a
    void exitOverviewMode(int,boolean) -> d
    void enableOverviewMode(boolean,int,boolean) -> a
    int getOverviewModeTranslationY() -> getOverviewModeTranslationY
    void setState(com.phonemetra.turbo.launcher.AppsCustomizePagedView$State) -> setState
    void updateAccessibilityFlags() -> Y
    void initAnimationArrays() -> Z
    android.animation.Animator getChangeStateAnimation(com.phonemetra.turbo.launcher.AppsCustomizePagedView$State,boolean,int,int) -> a
    int getPageContentWidth() -> getPageContentWidth
    void onPageEndMoving() -> j
    void onTransitionPrepare() -> aa
    void onTransitionEnd() -> ab
    java.util.Comparator getComparatorForSortMode() -> getComparatorForSortMode
    void setSortMode(com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode) -> setSortMode
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode getSortMode() -> getSortMode
    void setup(com.phonemetra.turbo.launcher.Launcher,com.phonemetra.turbo.launcher.DragController) -> a
    void invalidateOnDataChange() -> ac
    void setShowSystemApps(boolean) -> setShowSystemApps
    void setShowDownloadedApps(boolean) -> setShowDownloadedApps
    boolean getShowSystemApps() -> getShowSystemApps
    boolean getShowDownloadedApps() -> getShowDownloadedApps
    void setApps(java.util.ArrayList) -> setApps
    void addAppsWithoutInvalidate(java.util.ArrayList) -> e
    void addApps(java.util.ArrayList) -> b
    int findAppByComponent(java.util.List,com.phonemetra.turbo.launcher.AppInfo) -> a
    void removeAppsWithoutInvalidate(java.util.ArrayList) -> f
    void removeApps(java.util.ArrayList) -> c
    void updateApps(java.util.ArrayList) -> d
    void updateProtectedAppsList(android.content.Context) -> a
    void filterAppsWithoutInvalidate() -> k
    void filterApps() -> l
    void filterWidgetsWithoutInvalidate() -> m
    void filterWidgets() -> n
    void reset() -> o
    com.phonemetra.turbo.launcher.AppsCustomizeLayout getLayout() -> getLayout
    void surrender() -> p
    void iconPressed(com.phonemetra.turbo.launcher.PagedViewIcon) -> a
    void resetDrawableState() -> q
    int getAssociatedLowerPageBound(int) -> f
    int getAssociatedUpperPageBound(int) -> g
    java.lang.String getCurrentPageDescription() -> getCurrentPageDescription
    boolean access$0() -> r
    com.phonemetra.turbo.launcher.Launcher access$1(com.phonemetra.turbo.launcher.AppsCustomizePagedView) -> a
    void access$2(com.phonemetra.turbo.launcher.AppsCustomizePagedView,com.phonemetra.turbo.launcher.AppsCustomizeAsyncTask,com.phonemetra.turbo.launcher.AsyncTaskPageData) -> a
    void access$3(com.phonemetra.turbo.launcher.AppsCustomizePagedView,com.phonemetra.turbo.launcher.AsyncTaskPageData,boolean) -> a
    com.phonemetra.turbo.launcher.PagedViewCellLayout access$4(com.phonemetra.turbo.launcher.AppsCustomizePagedView) -> b
    boolean access$5(com.phonemetra.turbo.launcher.AppsCustomizePagedView) -> c
    java.util.ArrayList access$6(com.phonemetra.turbo.launcher.AppsCustomizePagedView) -> d
    int access$7(com.phonemetra.turbo.launcher.AppsCustomizePagedView) -> e
    void access$8(com.phonemetra.turbo.launcher.AppsCustomizePagedView,int,java.util.ArrayList,int,int,int) -> a
    void access$9(com.phonemetra.turbo.launcher.AppsCustomizePagedView) -> f
    float[] access$10(com.phonemetra.turbo.launcher.AppsCustomizePagedView) -> g
    float[] access$11(com.phonemetra.turbo.launcher.AppsCustomizePagedView) -> h
    int[] $SWITCH_TABLE$com$phonemetra$turbo$launcher$AppsCustomizePagedView$SortMode() -> s
com.phonemetra.turbo.launcher.AppsCustomizePagedView$1 -> com.phonemetra.turbo.launcher.j:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    android.os.Bundle val$options -> b
    com.phonemetra.turbo.launcher.PendingAddWidgetInfo val$info -> c
    void run() -> run
com.phonemetra.turbo.launcher.AppsCustomizePagedView$10 -> com.phonemetra.turbo.launcher.k:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    com.phonemetra.turbo.launcher.CellLayout val$cl -> b
    int val$i -> c
    void onAnimationUpdate(float,float) -> a
com.phonemetra.turbo.launcher.AppsCustomizePagedView$2 -> com.phonemetra.turbo.launcher.l:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    android.appwidget.AppWidgetProviderInfo val$pInfo -> b
    com.phonemetra.turbo.launcher.PendingAddWidgetInfo val$info -> c
    void run() -> run
com.phonemetra.turbo.launcher.AppsCustomizePagedView$3 -> com.phonemetra.turbo.launcher.m:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.AppsCustomizePagedView$4 -> com.phonemetra.turbo.launcher.n:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.AppsCustomizePagedView$5 -> com.phonemetra.turbo.launcher.o:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    int val$sleepMs -> b
    void run(com.phonemetra.turbo.launcher.AppsCustomizeAsyncTask,com.phonemetra.turbo.launcher.AsyncTaskPageData) -> a
com.phonemetra.turbo.launcher.AppsCustomizePagedView$6 -> com.phonemetra.turbo.launcher.p:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    void run(com.phonemetra.turbo.launcher.AppsCustomizeAsyncTask,com.phonemetra.turbo.launcher.AsyncTaskPageData) -> a
com.phonemetra.turbo.launcher.AppsCustomizePagedView$7 -> com.phonemetra.turbo.launcher.q:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    int val$cellWidth -> b
    int val$cellHeight -> c
    com.phonemetra.turbo.launcher.PagedViewGridLayout val$layout -> d
    boolean val$immediate -> e
    int val$page -> f
    java.util.ArrayList val$items -> g
    void run() -> run
com.phonemetra.turbo.launcher.AppsCustomizePagedView$8 -> com.phonemetra.turbo.launcher.r:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.AppsCustomizePagedView$9 -> com.phonemetra.turbo.launcher.s:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView this$0 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.AppsCustomizePagedView$AlphaUpdateListener -> com.phonemetra.turbo.launcher.t:
    android.view.View view -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
    void updateVisibility(android.view.View) -> a
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType -> com.phonemetra.turbo.launcher.u:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType Applications -> a
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType Widgets -> b
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType[] ENUM$VALUES -> c
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType[] values() -> values
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType valueOf(java.lang.String) -> valueOf
com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode -> com.phonemetra.turbo.launcher.v:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode Title -> a
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode LaunchCount -> b
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode InstallTime -> c
    int mValue -> d
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode[] ENUM$VALUES -> e
    int getValue() -> a
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode getModeForValue(int) -> a
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode[] values() -> values
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode valueOf(java.lang.String) -> valueOf
com.phonemetra.turbo.launcher.AppsCustomizePagedView$State -> com.phonemetra.turbo.launcher.w:
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$State NORMAL -> a
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$State OVERVIEW -> b
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$State[] ENUM$VALUES -> c
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$State[] values() -> values
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$State valueOf(java.lang.String) -> valueOf
com.phonemetra.turbo.launcher.AsyncTaskCallback -> com.phonemetra.turbo.launcher.x:
    void run(com.phonemetra.turbo.launcher.AppsCustomizeAsyncTask,com.phonemetra.turbo.launcher.AsyncTaskPageData) -> a
com.phonemetra.turbo.launcher.AsyncTaskPageData -> com.phonemetra.turbo.launcher.y:
    int page -> a
    java.util.ArrayList items -> b
    java.util.ArrayList generatedImages -> c
    int maxImageWidth -> d
    int maxImageHeight -> e
    com.phonemetra.turbo.launcher.AsyncTaskCallback doInBackgroundCallback -> f
    com.phonemetra.turbo.launcher.AsyncTaskCallback postExecuteCallback -> g
    com.phonemetra.turbo.launcher.WidgetPreviewLoader widgetPreviewLoader -> h
    void cleanup(boolean) -> a
com.phonemetra.turbo.launcher.AsyncTaskPageData$Type -> com.phonemetra.turbo.launcher.z:
    com.phonemetra.turbo.launcher.AsyncTaskPageData$Type LoadWidgetPreviewData -> a
    com.phonemetra.turbo.launcher.AsyncTaskPageData$Type[] ENUM$VALUES -> b
    com.phonemetra.turbo.launcher.AsyncTaskPageData$Type[] values() -> values
    com.phonemetra.turbo.launcher.AsyncTaskPageData$Type valueOf(java.lang.String) -> valueOf
com.phonemetra.turbo.launcher.BitmapCache -> com.phonemetra.turbo.launcher.aa:
    android.graphics.Bitmap initialValue() -> a
    java.lang.Object initialValue() -> b
com.phonemetra.turbo.launcher.BitmapFactoryOptionsCache -> com.phonemetra.turbo.launcher.ab:
    android.graphics.BitmapFactory$Options initialValue() -> a
    java.lang.Object initialValue() -> b
com.phonemetra.turbo.launcher.BubbleTextView -> com.phonemetra.turbo.launcher.BubbleTextView:
    int mPrevAlpha -> a
    com.phonemetra.turbo.launcher.HolographicOutlineHelper mOutlineHelper -> b
    android.graphics.Canvas mTempCanvas -> c
    android.graphics.Rect mTempRect -> d
    boolean mDidInvalidateForPressedState -> e
    android.graphics.Bitmap mPressedOrFocusedBackground -> f
    int mFocusedOutlineColor -> g
    int mFocusedGlowColor -> h
    int mPressedOutlineColor -> i
    int mPressedGlowColor -> j
    int mTextColor -> k
    boolean mShadowsEnabled -> l
    boolean mIsTextVisible -> m
    boolean mBackgroundSizeChanged -> n
    android.graphics.drawable.Drawable mBackground -> o
    boolean mStayPressed -> p
    com.phonemetra.turbo.launcher.CheckLongPressHelper mLongPressHelper -> q
    void onFinishInflate() -> onFinishInflate
    void init() -> c
    void applyFromShortcutInfo(com.phonemetra.turbo.launcher.ShortcutInfo,com.phonemetra.turbo.launcher.IconCache) -> a
    boolean setFrame(int,int,int,int) -> setFrame
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void setTag(java.lang.Object) -> setTag
    void drawableStateChanged() -> drawableStateChanged
    void drawWithPadding(android.graphics.Canvas,int) -> a
    void setGlowColor(int) -> setGlowColor
    android.graphics.Bitmap createGlowingOutline(android.graphics.Canvas,int,int) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setStayPressed(boolean) -> setStayPressed
    void setCellLayoutPressedOrFocusedIcon() -> a
    void clearPressedOrFocusedBackground() -> b
    android.graphics.Bitmap getPressedOrFocusedBackground() -> getPressedOrFocusedBackground
    int getPressedOrFocusedBackgroundPadding() -> getPressedOrFocusedBackgroundPadding
    void draw(android.graphics.Canvas) -> draw
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setTextColor(int) -> setTextColor
    void setShadowsEnabled(boolean) -> setShadowsEnabled
    void setTextVisibility(boolean) -> setTextVisibility
    boolean onSetAlpha(int) -> onSetAlpha
    void cancelLongPress() -> cancelLongPress
com.phonemetra.turbo.launcher.ButtonDropTarget -> com.phonemetra.turbo.launcher.ac:
    int mTransitionDuration -> a
    com.phonemetra.turbo.launcher.Launcher mLauncher -> b
    int mBottomDragPadding -> f
    com.phonemetra.turbo.launcher.SearchDropTargetBar mSearchDropTargetBar -> c
    boolean mActive -> d
    int mHoverColor -> e
    void setLauncher(com.phonemetra.turbo.launcher.Launcher) -> setLauncher
    boolean acceptDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    void setSearchDropTargetBar(com.phonemetra.turbo.launcher.SearchDropTargetBar) -> setSearchDropTargetBar
    android.graphics.drawable.Drawable getCurrentDrawable() -> getCurrentDrawable
    void onDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> b
    void onFlingToDelete(com.phonemetra.turbo.launcher.DropTarget$DragObject,int,int,android.graphics.PointF) -> a
    void onDragEnter(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> c
    void onDragOver(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> d
    void onDragExit(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> e
    void onDragStart(com.phonemetra.turbo.launcher.DragSource,java.lang.Object,int) -> a
    boolean isDropEnabled() -> e_
    void onDragEnd() -> b
    void getHitRectRelativeToDragLayer(android.graphics.Rect) -> a
    boolean isRtl() -> c
    android.graphics.Rect getIconRect(int,int,int,int) -> a
com.phonemetra.turbo.launcher.CanvasCache -> com.phonemetra.turbo.launcher.ad:
    android.graphics.Canvas initialValue() -> a
    java.lang.Object initialValue() -> b
com.phonemetra.turbo.launcher.CellLayout -> com.phonemetra.turbo.launcher.CellLayout:
    com.phonemetra.turbo.launcher.Launcher mLauncher -> f
    int mCellWidth -> g
    int mCellHeight -> h
    int mFixedCellWidth -> i
    int mFixedCellHeight -> j
    int mCountX -> k
    int mCountY -> l
    int mOriginalWidthGap -> m
    int mOriginalHeightGap -> n
    int mWidthGap -> o
    int mHeightGap -> p
    int mMaxGap -> q
    boolean mScrollingTransformsDirty -> r
    boolean mDropPending -> s
    android.graphics.Rect mRect -> t
    com.phonemetra.turbo.launcher.CellLayout$CellInfo mCellInfo -> u
    int[] mTmpXY -> v
    int[] mTmpPoint -> w
    int[] mTempLocation -> a
    boolean[][] mOccupied -> b
    boolean[][] mTmpOccupied -> c
    boolean mLastDownOnOccupiedCell -> x
    android.view.View$OnTouchListener mInterceptTouchListener -> y
    java.util.ArrayList mFolderOuterRings -> z
    int[] mFolderLeaveBehindCell -> A
    float FOREGROUND_ALPHA_DAMPER -> B
    int mForegroundAlpha -> C
    float mBackgroundAlpha -> D
    float mBackgroundAlphaMultiplier -> E
    boolean mDrawBackground -> F
    android.graphics.drawable.Drawable mNormalBackground -> G
    android.graphics.drawable.Drawable mActiveGlowBackground -> H
    android.graphics.drawable.Drawable mOverScrollForegroundDrawable -> I
    android.graphics.drawable.Drawable mOverScrollLeft -> J
    android.graphics.drawable.Drawable mOverScrollRight -> K
    android.graphics.Rect mBackgroundRect -> L
    android.graphics.Rect mForegroundRect -> M
    int mForegroundPadding -> N
    int mFixedWidth -> O
    int mFixedHeight -> P
    boolean mIsDragOverlapping -> Q
    boolean mUseActiveGlowBackground -> d
    android.graphics.Rect[] mDragOutlines -> R
    float[] mDragOutlineAlphas -> S
    com.phonemetra.turbo.launcher.InterruptibleInOutAnimator[] mDragOutlineAnims -> T
    int mDragOutlineCurrent -> U
    android.graphics.Paint mDragOutlinePaint -> V
    com.phonemetra.turbo.launcher.BubbleTextView mPressedOrFocusedIcon -> W
    java.util.HashMap mReorderAnimators -> aa
    java.util.HashMap mShakeAnimators -> ab
    boolean mItemPlacementDirty -> ac
    int[] mDragCell -> ad
    boolean mDragging -> ae
    android.animation.TimeInterpolator mEaseOutInterpolator -> af
    com.phonemetra.turbo.launcher.ShortcutAndWidgetContainer mShortcutsAndWidgets -> ag
    boolean mIsHotseat -> ah
    float mHotseatScale -> ai
    float mReorderPreviewAnimationMagnitude -> aj
    java.util.ArrayList mIntersectingViews -> ak
    android.graphics.Rect mOccupiedRect -> al
    int[] mDirectionVector -> am
    int[] mPreviousReorderDirection -> e
    com.phonemetra.turbo.launcher.DropTarget$DragEnforcer mDragEnforcer -> an
    android.graphics.Rect mTempRect -> ao
    android.graphics.PorterDuffXfermode sAddBlendMode -> ap
    android.graphics.Paint sPaint -> aq
    java.util.Stack mTempRectStack -> ar
    void enableHardwareLayer(boolean) -> a
    void buildHardwareLayer() -> b
    float getChildrenScale() -> getChildrenScale
    void setCellDimensions(int,int) -> a
    void setGridSize(int,int) -> b
    void setInvertIfRtl(boolean) -> setInvertIfRtl
    void setDropPending(boolean) -> setDropPending
    boolean isDropPending() -> c
    void invalidateBubbleTextView(com.phonemetra.turbo.launcher.BubbleTextView) -> a
    void setOverScrollAmount(float,boolean) -> a
    void setPressedOrFocusedIcon(com.phonemetra.turbo.launcher.BubbleTextView) -> setPressedOrFocusedIcon
    void setIsDragOverlapping(boolean) -> setIsDragOverlapping
    void setUseActiveGlowBackground(boolean) -> setUseActiveGlowBackground
    void disableBackground() -> d
    boolean getIsDragOverlapping() -> getIsDragOverlapping
    void setOverscrollTransformsDirty(boolean) -> setOverscrollTransformsDirty
    void resetOverscrollTransforms() -> e
    void onDraw(android.graphics.Canvas) -> onDraw
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void showFolderAccept(com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator) -> a
    void hideFolderAccept(com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator) -> b
    void setFolderLeaveBehindCell(int,int) -> c
    void clearFolderLeaveBehind() -> f
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void restoreInstanceState(android.util.SparseArray) -> a
    void cancelLongPress() -> cancelLongPress
    void setOnInterceptTouchListener(android.view.View$OnTouchListener) -> setOnInterceptTouchListener
    int getCountX() -> getCountX
    int getCountY() -> getCountY
    void setIsHotseat(boolean) -> setIsHotseat
    boolean addViewToCellLayout(android.view.View,int,int,com.phonemetra.turbo.launcher.CellLayout$LayoutParams,boolean) -> a
    void removeAllViews() -> removeAllViews
    void removeAllViewsInLayout() -> removeAllViewsInLayout
    void removeView(android.view.View) -> removeView
    void removeViewAt(int) -> removeViewAt
    void removeViewInLayout(android.view.View) -> removeViewInLayout
    void removeViews(int,int) -> removeViews
    void removeViewsInLayout(int,int) -> removeViewsInLayout
    void onAttachedToWindow() -> onAttachedToWindow
    void setTagToCellInfoForPoint(int,int) -> d
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void clearTagCellInfo() -> a
    com.phonemetra.turbo.launcher.CellLayout$CellInfo getTag() -> getTag
    void pointToCellExact(int,int,int[]) -> a
    void cellToPoint(int,int,int[]) -> b
    void cellToCenterPoint(int,int,int[]) -> c
    void regionToCenterPoint(int,int,int,int,int[]) -> a
    void regionToRect(int,int,int,int,android.graphics.Rect) -> a
    float getDistanceFromCell(float,float,int[]) -> a
    int getCellWidth() -> getCellWidth
    int getCellHeight() -> getCellHeight
    int getWidthGap() -> getWidthGap
    int getHeightGap() -> getHeightGap
    void setFixedSize(int,int) -> e
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
    void setChildrenDrawnWithCacheEnabled(boolean) -> setChildrenDrawnWithCacheEnabled
    float getBackgroundAlpha() -> getBackgroundAlpha
    void setBackgroundAlphaMultiplier(float) -> setBackgroundAlphaMultiplier
    float getBackgroundAlphaMultiplier() -> getBackgroundAlphaMultiplier
    void setBackgroundAlpha(float) -> setBackgroundAlpha
    void setShortcutAndWidgetAlpha(float) -> setShortcutAndWidgetAlpha
    com.phonemetra.turbo.launcher.ShortcutAndWidgetContainer getShortcutsAndWidgets() -> getShortcutsAndWidgets
    android.view.View getChildAt(int,int) -> f
    boolean animateChildToPosition(android.view.View,int,int,int,int,boolean,boolean) -> a
    void visualizeDropLocation(android.view.View,android.graphics.Bitmap,int,int,int,int,int,int,boolean,android.graphics.Point,android.graphics.Rect) -> a
    void clearDragOutlines() -> g
    int[] findNearestVacantArea(int,int,int,int,int[]) -> b
    int[] findNearestVacantArea(int,int,int,int,int,int,int[],int[]) -> a
    int[] findNearestArea(int,int,int,int,android.view.View,boolean,int[]) -> a
    void lazyInitTempRectStack() -> m
    void recycleTempRects(java.util.Stack) -> a
    int[] findNearestArea(int,int,int,int,int,int,android.view.View,boolean,int[],int[],boolean[][]) -> a
    int[] findNearestArea(int,int,int,int,int[],boolean[][],boolean[][],int[]) -> a
    boolean addViewToTempLocation(android.view.View,android.graphics.Rect,int[],com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration) -> a
    boolean pushViewsToTempLocation(java.util.ArrayList,android.graphics.Rect,int[],android.view.View,com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration) -> a
    boolean addViewsToTempLocation(java.util.ArrayList,android.graphics.Rect,int[],android.view.View,com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration) -> b
    void markCellsForRect(android.graphics.Rect,boolean[][],boolean) -> a
    boolean attemptPushInDirection(java.util.ArrayList,android.graphics.Rect,int[],android.view.View,com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration) -> c
    boolean rearrangementExists(int,int,int,int,int[],android.view.View,com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration) -> a
    void computeDirectionVector(float,float,int[]) -> b
    void copyOccupiedArray(boolean[][]) -> a
    com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration findReorderSolution(int,int,int,int,int,int,int[],android.view.View,boolean,com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration) -> a
    void copyCurrentStateToSolution(com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration,boolean) -> a
    void copySolutionToTempState(com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration,android.view.View) -> a
    void animateItemsToSolution(com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration,android.view.View,boolean) -> a
    void beginOrAdjustReorderPreviewAnimations(com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration,android.view.View,int,int) -> a
    void completeAndClearReorderPreviewAnimations() -> n
    void commitTempPlacement() -> o
    void setUseTempCoords(boolean) -> setUseTempCoords
    com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration findConfigurationNoShuffle(int,int,int,int,int,int,android.view.View,com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration) -> a
    void prepareChildForDrag(android.view.View) -> a
    void getDirectionVectorForDrop(int,int,int,int,android.view.View,int[]) -> c
    void getViewsIntersectingRegion(int,int,int,int,android.view.View,android.graphics.Rect,java.util.ArrayList) -> a
    boolean isNearestDropLocationOccupied(int,int,int,int,android.view.View,int[]) -> a
    void revertTempState() -> h
    boolean createAreaForResize(int,int,int,int,android.view.View,int[],boolean) -> a
    int[] performReorder(int,int,int,int,int,int,android.view.View,int[],int[],int) -> a
    void setItemPlacementDirty(boolean) -> setItemPlacementDirty
    boolean isItemPlacementDirty() -> i
    int[] findNearestVacantArea(int,int,int,int,android.view.View,int[]) -> b
    int[] findNearestVacantArea(int,int,int,int,int,int,android.view.View,int[],int[]) -> a
    int[] findNearestArea(int,int,int,int,int[]) -> c
    boolean findCellForSpan(int[],int,int) -> a
    boolean findCellForSpanThatIntersects(int[],int,int,int,int) -> a
    boolean findCellForSpanThatIntersectsIgnoring(int[],int,int,int,int,android.view.View,boolean[][]) -> a
    void onDragEnter() -> j
    void onDragExit() -> k
    void onDropChild(android.view.View) -> b
    void cellToRect(int,int,int,int,android.graphics.Rect) -> b
    int[] rectToCell(int,int,int[]) -> d
    void calculateSpans(com.phonemetra.turbo.launcher.ItemInfo) -> a
    boolean getVacantCell(int[],int,int) -> b
    boolean findVacantCell(int[],int,int,int,int,boolean[][]) -> a
    void clearOccupiedCells() -> p
    void markCellsAsOccupiedForView(android.view.View) -> c
    void markCellsAsOccupiedForView(android.view.View,boolean[][]) -> a
    void markCellsAsUnoccupiedForView(android.view.View) -> d
    void markCellsAsUnoccupiedForView(android.view.View,boolean[][]) -> b
    void markCellsForView(int,int,int,int,boolean[][],boolean) -> a
    int getDesiredWidth() -> getDesiredWidth
    int getDesiredHeight() -> getDesiredHeight
    boolean isOccupied(int,int) -> g
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean lastDownOnOccupiedCell() -> l
    java.lang.Object getTag() -> getTag
    int access$1(com.phonemetra.turbo.launcher.CellLayout) -> a
    int access$2(com.phonemetra.turbo.launcher.CellLayout) -> b
    int[] access$3(com.phonemetra.turbo.launcher.CellLayout) -> c
    float access$4(com.phonemetra.turbo.launcher.CellLayout) -> d
    java.util.HashMap access$5(com.phonemetra.turbo.launcher.CellLayout) -> e
    float[] access$6(com.phonemetra.turbo.launcher.CellLayout) -> f
    android.graphics.Rect[] access$7(com.phonemetra.turbo.launcher.CellLayout) -> g
    java.util.HashMap access$8(com.phonemetra.turbo.launcher.CellLayout) -> h
com.phonemetra.turbo.launcher.CellLayout$1 -> com.phonemetra.turbo.launcher.ae:
    com.phonemetra.turbo.launcher.CellLayout this$0 -> a
    com.phonemetra.turbo.launcher.InterruptibleInOutAnimator val$anim -> b
    int val$thisIndex -> c
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.CellLayout$2 -> com.phonemetra.turbo.launcher.af:
    com.phonemetra.turbo.launcher.CellLayout this$0 -> a
    com.phonemetra.turbo.launcher.InterruptibleInOutAnimator val$anim -> b
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.CellLayout$3 -> com.phonemetra.turbo.launcher.ag:
    com.phonemetra.turbo.launcher.CellLayout this$0 -> a
    com.phonemetra.turbo.launcher.CellLayout$LayoutParams val$lp -> b
    int val$oldX -> c
    int val$newX -> d
    int val$oldY -> e
    int val$newY -> f
    android.view.View val$child -> g
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.CellLayout$4 -> com.phonemetra.turbo.launcher.ah:
    boolean cancelled -> a
    com.phonemetra.turbo.launcher.CellLayout this$0 -> b
    com.phonemetra.turbo.launcher.CellLayout$LayoutParams val$lp -> c
    android.view.View val$child -> d
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
com.phonemetra.turbo.launcher.CellLayout$CellAndSpan -> com.phonemetra.turbo.launcher.ai:
    int x -> a
    int y -> b
    int spanX -> c
    int spanY -> d
    com.phonemetra.turbo.launcher.CellLayout this$0 -> e
    void copy(com.phonemetra.turbo.launcher.CellLayout$CellAndSpan) -> a
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.CellLayout$CellInfo -> com.phonemetra.turbo.launcher.aj:
    android.view.View cell -> a
    int cellX -> b
    int cellY -> c
    int spanX -> d
    int spanY -> e
    long screenId -> f
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration -> com.phonemetra.turbo.launcher.ak:
    java.util.HashMap map -> a
    java.util.HashMap savedMap -> j
    java.util.ArrayList sortedViews -> b
    java.util.ArrayList intersectingViews -> c
    boolean isSolution -> d
    int dragViewX -> e
    int dragViewY -> f
    int dragViewSpanX -> g
    int dragViewSpanY -> h
    com.phonemetra.turbo.launcher.CellLayout this$0 -> i
    void save() -> a
    void restore() -> b
    void add(android.view.View,com.phonemetra.turbo.launcher.CellLayout$CellAndSpan) -> a
    int area() -> c
com.phonemetra.turbo.launcher.CellLayout$LayoutParams -> com.phonemetra.turbo.launcher.al:
    int cellX -> a
    int cellY -> b
    int tmpCellX -> c
    int tmpCellY -> d
    boolean useTmpCoords -> e
    int cellHSpan -> f
    int cellVSpan -> g
    boolean isLockedToGrid -> h
    boolean isFullscreen -> i
    boolean canReorder -> j
    int x -> k
    int y -> l
    boolean dropped -> m
    void setup(int,int,int,int,boolean,int) -> a
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.CellLayout$ReorderPreviewAnimation -> com.phonemetra.turbo.launcher.am:
    android.view.View child -> a
    float finalDeltaX -> b
    float finalDeltaY -> c
    float initDeltaX -> d
    float initDeltaY -> e
    float finalScale -> f
    float initScale -> g
    int mode -> h
    boolean repeating -> i
    android.animation.Animator a -> j
    com.phonemetra.turbo.launcher.CellLayout this$0 -> k
    void animate() -> a
    void cancel() -> b
    void completeAnimationImmediately() -> c
    void access$0(com.phonemetra.turbo.launcher.CellLayout$ReorderPreviewAnimation) -> a
    com.phonemetra.turbo.launcher.CellLayout access$1(com.phonemetra.turbo.launcher.CellLayout$ReorderPreviewAnimation) -> b
com.phonemetra.turbo.launcher.CellLayout$ReorderPreviewAnimation$1 -> com.phonemetra.turbo.launcher.an:
    com.phonemetra.turbo.launcher.CellLayout$ReorderPreviewAnimation this$1 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.CellLayout$ReorderPreviewAnimation$2 -> com.phonemetra.turbo.launcher.ao:
    com.phonemetra.turbo.launcher.CellLayout$ReorderPreviewAnimation this$1 -> a
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
com.phonemetra.turbo.launcher.CellLayout$ViewCluster -> com.phonemetra.turbo.launcher.ap:
    java.util.ArrayList views -> a
    com.phonemetra.turbo.launcher.CellLayout$ItemConfiguration config -> b
    android.graphics.Rect boundingRect -> c
    int[] leftEdge -> d
    int[] rightEdge -> e
    int[] topEdge -> f
    int[] bottomEdge -> g
    boolean leftEdgeDirty -> h
    boolean rightEdgeDirty -> i
    boolean topEdgeDirty -> j
    boolean bottomEdgeDirty -> k
    boolean boundingRectDirty -> l
    com.phonemetra.turbo.launcher.CellLayout$ViewCluster$PositionComparator comparator -> m
    com.phonemetra.turbo.launcher.CellLayout this$0 -> n
    void resetEdges() -> a
    void computeEdge(int,int[]) -> a
    boolean isViewTouchingEdge(android.view.View,int) -> a
    void shift(int,int) -> a
    void addView(android.view.View) -> a
    android.graphics.Rect getBoundingRect() -> b
    int[] getEdge(int) -> a
    int[] getLeftEdge() -> c
    int[] getRightEdge() -> d
    int[] getTopEdge() -> e
    int[] getBottomEdge() -> f
    void sortConfigurationForEdgePush(int) -> b
com.phonemetra.turbo.launcher.CellLayout$ViewCluster$PositionComparator -> com.phonemetra.turbo.launcher.aq:
    int whichEdge -> a
    com.phonemetra.turbo.launcher.CellLayout$ViewCluster this$1 -> b
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.CheckLongPressHelper -> com.phonemetra.turbo.launcher.ar:
    android.view.View mView -> a
    boolean mHasPerformedLongPress -> b
    com.phonemetra.turbo.launcher.CheckLongPressHelper$CheckForLongPress mPendingCheckForLongPress -> c
    void postCheckForLongPress() -> a
    void cancelLongPress() -> b
    boolean hasPerformedLongPress() -> c
    android.view.View access$0(com.phonemetra.turbo.launcher.CheckLongPressHelper) -> a
    boolean access$1(com.phonemetra.turbo.launcher.CheckLongPressHelper) -> b
    void access$2(com.phonemetra.turbo.launcher.CheckLongPressHelper,boolean) -> a
com.phonemetra.turbo.launcher.CheckLongPressHelper$CheckForLongPress -> com.phonemetra.turbo.launcher.as:
    com.phonemetra.turbo.launcher.CheckLongPressHelper this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.CheckableFrameLayout -> com.phonemetra.turbo.launcher.CheckableFrameLayout:
    int[] CHECKED_STATE_SET -> b
    boolean mChecked -> a
    boolean isChecked() -> isChecked
    void setChecked(boolean) -> setChecked
    void toggle() -> toggle
    int[] onCreateDrawableState(int) -> onCreateDrawableState
com.phonemetra.turbo.launcher.CropView -> com.phonemetra.turbo.launcher.CropView:
    android.view.ScaleGestureDetector mScaleGestureDetector -> f
    long mTouchDownTime -> g
    float mFirstX -> h
    float mFirstY -> i
    float mLastX -> j
    float mLastY -> k
    float mCenterX -> l
    float mCenterY -> m
    float mMinScale -> n
    boolean mTouchEnabled -> o
    android.graphics.RectF mTempEdges -> p
    float[] mTempPoint -> q
    float[] mTempCoef -> r
    float[] mTempAdjustment -> s
    float[] mTempImageDims -> t
    float[] mTempRendererCenter -> u
    com.phonemetra.turbo.launcher.CropView$TouchCallback mTouchCallback -> c
    android.graphics.Matrix mRotateMatrix -> d
    android.graphics.Matrix mInverseRotateMatrix -> e
    float[] getImageDims() -> getImageDims
    void getEdgesHelper(android.graphics.RectF) -> a
    int getImageRotation() -> getImageRotation
    android.graphics.RectF getCrop() -> getCrop
    android.graphics.Point getSourceDimensions() -> getSourceDimensions
    void setTileSource(com.android.photos.views.TiledImageRenderer$TileSource,java.lang.Runnable) -> a
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void setScale(float) -> setScale
    void updateMinScale(int,int,com.android.photos.views.TiledImageRenderer$TileSource,boolean) -> a
    boolean onScaleBegin(android.view.ScaleGestureDetector) -> onScaleBegin
    boolean onScale(android.view.ScaleGestureDetector) -> onScale
    void onScaleEnd(android.view.ScaleGestureDetector) -> onScaleEnd
    void moveToLeft() -> b
    void updateCenter() -> c
    void setTouchEnabled(boolean) -> setTouchEnabled
    void setTouchCallback(com.phonemetra.turbo.launcher.CropView$TouchCallback) -> setTouchCallback
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.phonemetra.turbo.launcher.CropView$1 -> com.phonemetra.turbo.launcher.at:
    com.phonemetra.turbo.launcher.CropView this$0 -> a
    void onGlobalLayout() -> onGlobalLayout
com.phonemetra.turbo.launcher.CropView$TouchCallback -> com.phonemetra.turbo.launcher.au:
    void onTouchDown() -> a
    void onTap() -> b
    void onTouchUp() -> c
com.phonemetra.turbo.launcher.DeferredHandler -> com.phonemetra.turbo.launcher.av:
    java.util.LinkedList mQueue -> a
    android.os.MessageQueue mMessageQueue -> b
    com.phonemetra.turbo.launcher.DeferredHandler$Impl mHandler -> c
    void post(java.lang.Runnable) -> a
    void post(java.lang.Runnable,int) -> a
    void postIdle(java.lang.Runnable) -> b
    void postIdle(java.lang.Runnable,int) -> b
    void cancelAllRunnablesOfType(int) -> a
    void flush() -> a
    void scheduleNextLocked() -> b
    java.util.LinkedList access$0(com.phonemetra.turbo.launcher.DeferredHandler) -> a
com.phonemetra.turbo.launcher.DeferredHandler$IdleRunnable -> com.phonemetra.turbo.launcher.aw:
    java.lang.Runnable mRunnable -> a
    com.phonemetra.turbo.launcher.DeferredHandler this$0 -> b
    void run() -> run
com.phonemetra.turbo.launcher.DeferredHandler$Impl -> com.phonemetra.turbo.launcher.ax:
    com.phonemetra.turbo.launcher.DeferredHandler this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    boolean queueIdle() -> queueIdle
com.phonemetra.turbo.launcher.DeleteDropTarget -> com.phonemetra.turbo.launcher.DeleteDropTarget:
    int DELETE_ANIMATION_DURATION -> f
    int FLING_DELETE_ANIMATION_DURATION -> g
    float FLING_TO_DELETE_FRICTION -> h
    int MODE_FLING_DELETE_TO_TRASH -> i
    int MODE_FLING_DELETE_ALONG_VECTOR -> j
    int mFlingDeleteMode -> k
    android.content.res.ColorStateList mOriginalTextColor -> l
    android.graphics.drawable.TransitionDrawable mUninstallDrawable -> m
    android.graphics.drawable.TransitionDrawable mRemoveDrawable -> n
    android.graphics.drawable.TransitionDrawable mCurrentDrawable -> o
    boolean mWaitingForUninstall -> p
    void onFinishInflate() -> onFinishInflate
    boolean isAllAppsApplication(com.phonemetra.turbo.launcher.DragSource,java.lang.Object) -> a
    boolean isAllAppsWidget(com.phonemetra.turbo.launcher.DragSource,java.lang.Object) -> b
    boolean isDragSourceWorkspaceOrFolder(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> f
    boolean isWorkspaceOrFolderApplication(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> g
    boolean isWorkspaceOrFolderWidget(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> h
    boolean isWorkspaceFolder(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> i
    void setHoverColor() -> c
    void resetHoverColor() -> d
    boolean acceptDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    boolean willAcceptDrop(java.lang.Object) -> a
    void onDragStart(com.phonemetra.turbo.launcher.DragSource,java.lang.Object,int) -> a
    void onDragEnd() -> b
    void onDragEnter(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> c
    void onDragExit(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> e
    void animateToTrashAndCompleteDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> j
    void deferCompleteDropIfUninstalling(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> k
    boolean isUninstallFromWorkspace(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> l
    void completeDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> m
    void onDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> b
    android.animation.ValueAnimator$AnimatorUpdateListener createFlingToTrashAnimatorListener(com.phonemetra.turbo.launcher.DragLayer,com.phonemetra.turbo.launcher.DropTarget$DragObject,android.graphics.PointF,android.view.ViewConfiguration) -> a
    android.animation.ValueAnimator$AnimatorUpdateListener createFlingAlongVectorAnimatorListener(com.phonemetra.turbo.launcher.DragLayer,com.phonemetra.turbo.launcher.DropTarget$DragObject,android.graphics.PointF,long,int,android.view.ViewConfiguration) -> a
    void onFlingToDelete(com.phonemetra.turbo.launcher.DropTarget$DragObject,int,int,android.graphics.PointF) -> a
    void access$0(com.phonemetra.turbo.launcher.DeleteDropTarget,com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    void access$1(com.phonemetra.turbo.launcher.DeleteDropTarget,boolean) -> a
com.phonemetra.turbo.launcher.DeleteDropTarget$1 -> com.phonemetra.turbo.launcher.ay:
    com.phonemetra.turbo.launcher.DeleteDropTarget this$0 -> a
    com.phonemetra.turbo.launcher.DropTarget$DragObject val$d -> b
    void run() -> run
com.phonemetra.turbo.launcher.DeleteDropTarget$2 -> com.phonemetra.turbo.launcher.az:
    com.phonemetra.turbo.launcher.DeleteDropTarget this$0 -> a
    android.content.ComponentName val$componentName -> b
    com.phonemetra.turbo.launcher.DragSource val$dragSource -> c
    void run() -> run
com.phonemetra.turbo.launcher.DeleteDropTarget$3 -> com.phonemetra.turbo.launcher.ba:
    com.phonemetra.turbo.launcher.DeleteDropTarget this$0 -> a
    com.phonemetra.turbo.launcher.LauncherAppWidgetHost val$appWidgetHost -> b
    com.phonemetra.turbo.launcher.LauncherAppWidgetInfo val$launcherAppWidgetInfo -> c
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.DeleteDropTarget$4 -> com.phonemetra.turbo.launcher.bb:
    com.phonemetra.turbo.launcher.DeleteDropTarget this$0 -> a
    float getInterpolation(float) -> getInterpolation
com.phonemetra.turbo.launcher.DeleteDropTarget$5 -> com.phonemetra.turbo.launcher.bc:
    com.phonemetra.turbo.launcher.DeleteDropTarget this$0 -> a
    com.phonemetra.turbo.launcher.DragLayer val$dragLayer -> b
    android.animation.TimeInterpolator val$scaleAlphaInterpolator -> c
    float val$x1 -> d
    float val$x2 -> e
    float val$x3 -> f
    float val$y1 -> g
    float val$y2 -> h
    float val$y3 -> i
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.DeleteDropTarget$6 -> com.phonemetra.turbo.launcher.bd:
    int mCount -> b
    float mOffset -> c
    com.phonemetra.turbo.launcher.DeleteDropTarget this$0 -> a
    long val$startTime -> d
    int val$duration -> e
    float getInterpolation(float) -> getInterpolation
com.phonemetra.turbo.launcher.DeleteDropTarget$7 -> com.phonemetra.turbo.launcher.be:
    com.phonemetra.turbo.launcher.DeleteDropTarget this$0 -> a
    boolean val$isAllApps -> b
    com.phonemetra.turbo.launcher.DropTarget$DragObject val$d -> c
    void run() -> run
com.phonemetra.turbo.launcher.DeleteDropTarget$FlingAlongVectorAnimatorUpdateListener -> com.phonemetra.turbo.launcher.bf:
    com.phonemetra.turbo.launcher.DragLayer mDragLayer -> a
    android.graphics.PointF mVelocity -> b
    android.graphics.Rect mFrom -> c
    long mPrevTime -> d
    boolean mHasOffsetForScale -> e
    float mFriction -> f
    android.animation.TimeInterpolator mAlphaInterpolator -> g
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.DeviceProfile -> com.phonemetra.turbo.launcher.bg:
    java.lang.String name -> a
    float minWidthDps -> b
    float minHeightDps -> c
    float numRows -> d
    float numColumns -> e
    float numHotseatIcons -> f
    float iconSize -> ab
    float iconTextSize -> ac
    int iconDrawablePaddingOriginalPx -> ad
    float hotseatIconSize -> ae
    boolean isLandscape -> g
    boolean isTablet -> h
    boolean isLargeTablet -> i
    boolean isLayoutRtl -> j
    boolean transposeLayoutWithOrientation -> k
    int desiredWorkspaceLeftRightMarginPx -> l
    int edgeMarginPx -> m
    android.graphics.Rect defaultWidgetPadding -> n
    int widthPx -> o
    int heightPx -> p
    int availableWidthPx -> q
    int availableHeightPx -> r
    int defaultPageSpacingPx -> s
    int overviewModeMinIconZoneHeightPx -> t
    int overviewModeMaxIconZoneHeightPx -> u
    int overviewModeBarItemWidthPx -> v
    int overviewModeBarSpacerWidthPx -> w
    float overviewModeIconZoneRatio -> x
    float overviewModeScaleFactor -> y
    int iconSizePx -> z
    int iconTextSizePx -> A
    int iconDrawablePaddingPx -> B
    int cellWidthPx -> C
    int cellHeightPx -> D
    int allAppsIconSizePx -> E
    int allAppsIconTextSizePx -> F
    int allAppsCellWidthPx -> G
    int allAppsCellHeightPx -> H
    int allAppsCellPaddingPx -> I
    int folderBackgroundOffset -> J
    int folderIconSizePx -> K
    int folderCellWidthPx -> L
    int folderCellHeightPx -> M
    int hotseatCellWidthPx -> N
    int hotseatCellHeightPx -> O
    int hotseatIconSizePx -> P
    int hotseatBarHeightPx -> Q
    int hotseatAllAppsRank -> R
    int allAppsNumRows -> S
    int allAppsNumCols -> T
    int searchBarSpaceWidthPx -> U
    int searchBarSpaceMaxWidthPx -> V
    int searchBarSpaceHeightPx -> W
    int searchBarHeightPx -> X
    int pageIndicatorHeightPx -> Y
    boolean searchBarVisible -> Z
    float dragViewScale -> aa
    java.util.ArrayList mCallbacks -> af
    void addCallback(com.phonemetra.turbo.launcher.DeviceProfile$DeviceProfileCallbacks) -> a
    void updateAvailableDimensions(android.content.Context) -> a
    void updateIconSize(float,int,android.content.res.Resources,android.util.DisplayMetrics) -> a
    void updateFromConfiguration(android.content.Context,android.content.res.Resources,int,int,int,int) -> a
    float dist(android.graphics.PointF,android.graphics.PointF) -> a
    float weight(android.graphics.PointF,android.graphics.PointF,float) -> a
    float invDistWeightedInterpolate(float,float,java.util.ArrayList) -> a
    int getSearchBarTopOffset() -> a
    android.graphics.Rect getSearchBarBounds(int) -> a
    android.graphics.Rect getWorkspacePadding() -> b
    android.graphics.Rect getWorkspacePadding(int) -> b
    int getWorkspacePageSpacing(int) -> c
    android.graphics.Rect getOverviewModeButtonBarRect() -> c
    float getOverviewModeScale() -> d
    android.graphics.Rect getHotseatRect() -> e
    int calculateCellWidth(int,int) -> a
    int calculateCellHeight(int,int) -> b
    boolean isPhone() -> f
    boolean isTablet() -> g
    boolean isLargeTablet() -> h
    boolean isVerticalBarLayout() -> i
    void layout(com.phonemetra.turbo.launcher.Launcher) -> a
    float access$0(com.phonemetra.turbo.launcher.DeviceProfile,android.graphics.PointF,android.graphics.PointF) -> a
com.phonemetra.turbo.launcher.DeviceProfile$1 -> com.phonemetra.turbo.launcher.bh:
    com.phonemetra.turbo.launcher.DeviceProfile this$0 -> a
    android.graphics.PointF val$xy -> b
    int compare(com.phonemetra.turbo.launcher.DeviceProfileQuery,com.phonemetra.turbo.launcher.DeviceProfileQuery) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.DeviceProfile$DeviceProfileCallbacks -> com.phonemetra.turbo.launcher.bi:
    void onAvailableSizeChanged(com.phonemetra.turbo.launcher.DeviceProfile) -> a
com.phonemetra.turbo.launcher.DeviceProfileQuery -> com.phonemetra.turbo.launcher.bj:
    float widthDps -> a
    float heightDps -> b
    float value -> c
    android.graphics.PointF dimens -> d
com.phonemetra.turbo.launcher.DragController -> com.phonemetra.turbo.launcher.bk:
    int DRAG_ACTION_MOVE -> a
    int DRAG_ACTION_COPY -> b
    com.phonemetra.turbo.launcher.Launcher mLauncher -> d
    android.os.Handler mHandler -> e
    android.graphics.Rect mRectTemp -> f
    int[] mCoordinatesTemp -> g
    boolean mDragging -> h
    int mMotionDownX -> i
    int mMotionDownY -> j
    int mScrollZone -> k
    com.phonemetra.turbo.launcher.DropTarget$DragObject mDragObject -> l
    java.util.ArrayList mDropTargets -> m
    java.util.ArrayList mListeners -> n
    com.phonemetra.turbo.launcher.DropTarget mFlingToDeleteDropTarget -> o
    android.os.IBinder mWindowToken -> p
    android.view.View mScrollView -> q
    android.view.View mMoveTarget -> r
    com.phonemetra.turbo.launcher.DragScroller mDragScroller -> s
    int mScrollState -> t
    com.phonemetra.turbo.launcher.DragController$ScrollRunnable mScrollRunnable -> u
    com.phonemetra.turbo.launcher.DropTarget mLastDropTarget -> v
    android.view.inputmethod.InputMethodManager mInputMethodManager -> w
    int[] mLastTouch -> x
    long mLastTouchUpTime -> y
    int mDistanceSinceScroll -> z
    int[] mTmpPoint -> A
    android.graphics.Rect mDragLayerRect -> B
    int mFlingToDeleteThresholdVelocity -> c
    android.view.VelocityTracker mVelocityTracker -> C
    void startDrag(android.view.View,android.graphics.Bitmap,com.phonemetra.turbo.launcher.DragSource,java.lang.Object,int,android.graphics.Point,float) -> a
    com.phonemetra.turbo.launcher.DragView startDrag(android.graphics.Bitmap,int,int,com.phonemetra.turbo.launcher.DragSource,java.lang.Object,int,android.graphics.Point,android.graphics.Rect,float) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> a
    boolean isDragging() -> a
    void cancelDrag() -> b
    void onAppsRemoved(java.util.ArrayList,java.util.ArrayList) -> a
    void endDrag() -> f
    void onDeferredEndDrag(com.phonemetra.turbo.launcher.DragView) -> a
    void onDeferredEndFling(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    int[] getClampedDragLayerPos(float,float) -> a
    long getLastGestureUpTime() -> c
    void resetLastGestureUpTime() -> d
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> a
    void setMoveTarget(android.view.View) -> a
    boolean dispatchUnhandledMove(android.view.View,int) -> a
    void clearScrollRunnable() -> g
    void handleMoveEvent(int,int) -> a
    void forceTouchMove() -> e
    void checkTouchMove(com.phonemetra.turbo.launcher.DropTarget) -> d
    void checkScrollState(int,int) -> b
    boolean onTouchEvent(android.view.MotionEvent) -> b
    android.graphics.PointF isFlingingToDelete(com.phonemetra.turbo.launcher.DragSource) -> a
    void dropOnFlingToDeleteTarget(float,float,android.graphics.PointF) -> a
    void drop(float,float) -> b
    com.phonemetra.turbo.launcher.DropTarget findDropTarget(int,int,int[]) -> a
    void setDragScoller(com.phonemetra.turbo.launcher.DragScroller) -> a
    void setWindowToken(android.os.IBinder) -> a
    void addDragListener(com.phonemetra.turbo.launcher.DragController$DragListener) -> a
    void addDropTarget(com.phonemetra.turbo.launcher.DropTarget) -> a
    void removeDropTarget(com.phonemetra.turbo.launcher.DropTarget) -> b
    void setFlingToDeleteDropTarget(com.phonemetra.turbo.launcher.DropTarget) -> c
    void acquireVelocityTrackerAndAddMovement(android.view.MotionEvent) -> c
    void releaseVelocityTracker() -> h
    void setScrollView(android.view.View) -> b
    com.phonemetra.turbo.launcher.DragScroller access$0(com.phonemetra.turbo.launcher.DragController) -> a
    void access$1(com.phonemetra.turbo.launcher.DragController,int) -> a
    void access$2(com.phonemetra.turbo.launcher.DragController,int) -> b
    com.phonemetra.turbo.launcher.Launcher access$3(com.phonemetra.turbo.launcher.DragController) -> b
    int[] access$4(com.phonemetra.turbo.launcher.DragController) -> c
    void access$5(com.phonemetra.turbo.launcher.DragController,int,int) -> a
com.phonemetra.turbo.launcher.DragController$DragListener -> com.phonemetra.turbo.launcher.bl:
    void onDragStart(com.phonemetra.turbo.launcher.DragSource,java.lang.Object,int) -> a
    void onDragEnd() -> b
com.phonemetra.turbo.launcher.DragController$ScrollRunnable -> com.phonemetra.turbo.launcher.bm:
    int mDirection -> b
    com.phonemetra.turbo.launcher.DragController this$0 -> a
    void run() -> run
    void setDirection(int) -> a
com.phonemetra.turbo.launcher.DragLayer -> com.phonemetra.turbo.launcher.DragLayer:
    com.phonemetra.turbo.launcher.DragController mDragController -> a
    int[] mTmpXY -> b
    int mXDown -> c
    int mYDown -> d
    com.phonemetra.turbo.launcher.Launcher mLauncher -> e
    java.util.ArrayList mResizeFrames -> f
    com.phonemetra.turbo.launcher.AppWidgetResizeFrame mCurrentResizeFrame -> g
    android.animation.ValueAnimator mDropAnim -> h
    android.animation.ValueAnimator mFadeOutAnim -> i
    android.animation.TimeInterpolator mCubicEaseOutInterpolator -> j
    com.phonemetra.turbo.launcher.DragView mDropView -> k
    int mAnchorViewInitialScrollX -> l
    android.view.View mAnchorView -> m
    boolean mHoverPointClosesFolder -> n
    android.graphics.Rect mHitRect -> o
    com.phonemetra.turbo.launcher.DragLayer$TouchCompleteListener mTouchCompleteListener -> p
    android.graphics.Rect mInsets -> q
    int mDragViewIndex -> r
    boolean mInScrollArea -> s
    android.graphics.drawable.Drawable mLeftHoverDrawable -> t
    android.graphics.drawable.Drawable mRightHoverDrawable -> u
    void setup(com.phonemetra.turbo.launcher.Launcher,com.phonemetra.turbo.launcher.DragController) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void setInsets(android.view.View,android.graphics.Rect,android.graphics.Rect) -> a
    boolean isEventOverFolderTextRegion(com.phonemetra.turbo.launcher.Folder,android.view.MotionEvent) -> a
    boolean isEventOverFolder(com.phonemetra.turbo.launcher.Folder,android.view.MotionEvent) -> b
    boolean handleTouchDown(android.view.MotionEvent,boolean) -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onInterceptHoverEvent(android.view.MotionEvent) -> onInterceptHoverEvent
    void sendTapOutsideFolderAccessibilityEvent(boolean) -> a
    boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void addChildrenForAccessibility(java.util.ArrayList) -> addChildrenForAccessibility
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    float getDescendantRectRelativeToSelf(android.view.View,android.graphics.Rect) -> a
    float getLocationInDragLayer(android.view.View,int[]) -> a
    float getDescendantCoordRelativeToSelf(android.view.View,int[]) -> b
    float getDescendantCoordRelativeToSelf(android.view.View,int[],boolean) -> a
    float mapCoordInSelfToDescendent(android.view.View,int[]) -> c
    void getViewRectRelativeToSelf(android.view.View,android.graphics.Rect) -> b
    boolean dispatchUnhandledMove(android.view.View,int) -> dispatchUnhandledMove
    void onLayout(boolean,int,int,int,int) -> onLayout
    void clearAllResizeFrames() -> a
    void addResizeFrame(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.LauncherAppWidgetHostView,com.phonemetra.turbo.launcher.CellLayout) -> a
    void animateViewIntoPosition(com.phonemetra.turbo.launcher.DragView,int[],float,float,float,int,java.lang.Runnable,int) -> a
    void animateViewIntoPosition(com.phonemetra.turbo.launcher.DragView,android.view.View,java.lang.Runnable,android.view.View) -> a
    void animateViewIntoPosition(com.phonemetra.turbo.launcher.DragView,android.view.View,int,java.lang.Runnable,android.view.View) -> a
    void animateViewIntoPosition(com.phonemetra.turbo.launcher.DragView,int,int,int,int,float,float,float,float,float,java.lang.Runnable,int,int,android.view.View) -> a
    void animateView(com.phonemetra.turbo.launcher.DragView,android.graphics.Rect,android.graphics.Rect,float,float,float,float,float,int,android.view.animation.Interpolator,android.view.animation.Interpolator,java.lang.Runnable,int,android.view.View) -> a
    void animateView(com.phonemetra.turbo.launcher.DragView,android.animation.ValueAnimator$AnimatorUpdateListener,int,android.animation.TimeInterpolator,java.lang.Runnable,int,android.view.View) -> a
    void clearAnimatedView() -> b
    android.view.View getAnimatedView() -> getAnimatedView
    void fadeOutDragView() -> e
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    void onChildViewRemoved(android.view.View,android.view.View) -> onChildViewRemoved
    void updateChildIndices() -> f
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    void onEnterScrollArea(int) -> a
    void onExitScrollArea() -> c
    boolean isLayoutRtl() -> d
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void setTouchCompleteListener(com.phonemetra.turbo.launcher.DragLayer$TouchCompleteListener) -> setTouchCompleteListener
    android.view.View access$0(com.phonemetra.turbo.launcher.DragLayer) -> a
    int access$1(com.phonemetra.turbo.launcher.DragLayer) -> b
    com.phonemetra.turbo.launcher.DragView access$2(com.phonemetra.turbo.launcher.DragLayer) -> c
    void access$3(com.phonemetra.turbo.launcher.DragLayer) -> d
    com.phonemetra.turbo.launcher.DragController access$4(com.phonemetra.turbo.launcher.DragLayer) -> e
    void access$5(com.phonemetra.turbo.launcher.DragLayer,com.phonemetra.turbo.launcher.DragView) -> a
com.phonemetra.turbo.launcher.DragLayer$1 -> com.phonemetra.turbo.launcher.bn:
    com.phonemetra.turbo.launcher.DragLayer this$0 -> a
    android.view.View val$child -> b
    java.lang.Runnable val$onFinishAnimationRunnable -> c
    void run() -> run
com.phonemetra.turbo.launcher.DragLayer$2 -> com.phonemetra.turbo.launcher.bo:
    com.phonemetra.turbo.launcher.DragLayer this$0 -> a
    com.phonemetra.turbo.launcher.DragView val$view -> b
    android.view.animation.Interpolator val$alphaInterpolator -> c
    android.view.animation.Interpolator val$motionInterpolator -> d
    float val$initScaleX -> e
    float val$dropViewScale -> f
    float val$initScaleY -> g
    float val$finalScaleX -> h
    float val$finalScaleY -> i
    float val$finalAlpha -> j
    float val$initAlpha -> k
    android.graphics.Rect val$from -> l
    android.graphics.Rect val$to -> m
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.DragLayer$3 -> com.phonemetra.turbo.launcher.bp:
    com.phonemetra.turbo.launcher.DragLayer this$0 -> a
    java.lang.Runnable val$onCompleteRunnable -> b
    int val$animationEndStyle -> c
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.DragLayer$4 -> com.phonemetra.turbo.launcher.bq:
    com.phonemetra.turbo.launcher.DragLayer this$0 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.DragLayer$5 -> com.phonemetra.turbo.launcher.br:
    com.phonemetra.turbo.launcher.DragLayer this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.DragLayer$LayoutParams -> com.phonemetra.turbo.launcher.bs:
    int x -> a
    int y -> b
    boolean customPosition -> c
com.phonemetra.turbo.launcher.DragLayer$TouchCompleteListener -> com.phonemetra.turbo.launcher.bt:
    void onTouchComplete() -> a
com.phonemetra.turbo.launcher.DragScroller -> com.phonemetra.turbo.launcher.bu:
    void scrollLeft() -> b_
    void scrollRight() -> c_
    boolean onEnterScrollArea(int,int,int) -> a
    boolean onExitScrollArea() -> i
com.phonemetra.turbo.launcher.DragSource -> com.phonemetra.turbo.launcher.bv:
    boolean supportsFlingToDelete() -> c
    boolean supportsAppInfoDropTarget() -> d
    boolean supportsDeleteDropTarget() -> e
    float getIntrinsicIconScaleFactor() -> getIntrinsicIconScaleFactor
    void onFlingToDeleteCompleted() -> d_
    void onDropCompleted(android.view.View,com.phonemetra.turbo.launcher.DropTarget$DragObject,boolean,boolean) -> a
com.phonemetra.turbo.launcher.DragView -> com.phonemetra.turbo.launcher.bw:
    float sDragAlpha -> b
    android.graphics.Bitmap mBitmap -> c
    android.graphics.Bitmap mCrossFadeBitmap -> d
    android.graphics.Paint mPaint -> e
    int mRegistrationX -> f
    int mRegistrationY -> g
    android.graphics.Point mDragVisualizeOffset -> h
    android.graphics.Rect mDragRegion -> i
    com.phonemetra.turbo.launcher.DragLayer mDragLayer -> j
    boolean mHasDrawn -> k
    float mCrossFadeProgress -> l
    android.animation.ValueAnimator mAnim -> a
    float mOffsetX -> m
    float mOffsetY -> n
    float mInitialScale -> o
    float mIntrinsicIconScale -> p
    void setIntrinsicIconScaleFactor(float) -> setIntrinsicIconScaleFactor
    float getIntrinsicIconScaleFactor() -> getIntrinsicIconScaleFactor
    float getOffsetY() -> getOffsetY
    int getDragRegionLeft() -> getDragRegionLeft
    int getDragRegionTop() -> getDragRegionTop
    int getDragRegionWidth() -> getDragRegionWidth
    int getDragRegionHeight() -> getDragRegionHeight
    void setDragVisualizeOffset(android.graphics.Point) -> setDragVisualizeOffset
    android.graphics.Point getDragVisualizeOffset() -> getDragVisualizeOffset
    void setDragRegion(android.graphics.Rect) -> setDragRegion
    android.graphics.Rect getDragRegion() -> getDragRegion
    float getInitialScale() -> getInitialScale
    void updateInitialScaleToCurrentScale() -> a
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    void setCrossFadeBitmap(android.graphics.Bitmap) -> setCrossFadeBitmap
    void crossFade(int) -> a
    void setColor(int) -> setColor
    boolean hasDrawn() -> b
    void setAlpha(float) -> setAlpha
    void show(int,int) -> a
    void cancelAnimation() -> c
    void resetLayoutParams() -> d
    void move(int,int) -> b
    void remove() -> e
    float access$0(com.phonemetra.turbo.launcher.DragView) -> a
    float access$1(com.phonemetra.turbo.launcher.DragView) -> b
    void access$2(com.phonemetra.turbo.launcher.DragView,float) -> a
    void access$3(com.phonemetra.turbo.launcher.DragView,float) -> b
    float access$4() -> f
    void access$5(com.phonemetra.turbo.launcher.DragView,float) -> c
com.phonemetra.turbo.launcher.DragView$1 -> com.phonemetra.turbo.launcher.bx:
    com.phonemetra.turbo.launcher.DragView this$0 -> a
    float val$offsetX -> b
    float val$offsetY -> c
    float val$initialScale -> d
    float val$scale -> e
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.DragView$2 -> com.phonemetra.turbo.launcher.by:
    com.phonemetra.turbo.launcher.DragView this$0 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.DragView$3 -> com.phonemetra.turbo.launcher.bz:
    com.phonemetra.turbo.launcher.DragView this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.DrawableStateProxyView -> com.phonemetra.turbo.launcher.DrawableStateProxyView:
    android.view.View mView -> a
    int mViewId -> b
    void drawableStateChanged() -> drawableStateChanged
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
com.phonemetra.turbo.launcher.DrawableTileSource -> com.phonemetra.turbo.launcher.ca:
    int mTileSize -> a
    int mPreviewSize -> b
    android.graphics.drawable.Drawable mDrawable -> c
    com.android.gallery3d.glrenderer.BitmapTexture mPreview -> d
    int getTileSize() -> a
    int getImageWidth() -> b
    int getImageHeight() -> c
    int getRotation() -> e
    com.android.gallery3d.glrenderer.BasicTexture getPreview() -> d
    android.graphics.Bitmap getTile(int,int,int,android.graphics.Bitmap) -> a
com.phonemetra.turbo.launcher.DropTarget -> com.phonemetra.turbo.launcher.cb:
    boolean isDropEnabled() -> e_
    void onDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> b
    void onDragEnter(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> c
    void onDragOver(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> d
    void onDragExit(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> e
    void onFlingToDelete(com.phonemetra.turbo.launcher.DropTarget$DragObject,int,int,android.graphics.PointF) -> a
    boolean acceptDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    void getHitRectRelativeToDragLayer(android.graphics.Rect) -> a
com.phonemetra.turbo.launcher.DropTarget$DragEnforcer -> com.phonemetra.turbo.launcher.cc:
    int dragParity -> a
    void onDragEnter() -> a
    void onDragExit() -> c
    void onDragStart(com.phonemetra.turbo.launcher.DragSource,java.lang.Object,int) -> a
    void onDragEnd() -> b
com.phonemetra.turbo.launcher.DropTarget$DragObject -> com.phonemetra.turbo.launcher.cd:
    int x -> a
    int y -> b
    int xOffset -> c
    int yOffset -> d
    boolean dragComplete -> e
    com.phonemetra.turbo.launcher.DragView dragView -> f
    java.lang.Object dragInfo -> g
    com.phonemetra.turbo.launcher.DragSource dragSource -> h
    java.lang.Runnable postAnimationRunnable -> i
    boolean cancelled -> j
    boolean deferDragViewCleanupPostAnimation -> k
com.phonemetra.turbo.launcher.DynamicGrid -> com.phonemetra.turbo.launcher.ce:
    com.phonemetra.turbo.launcher.DeviceProfile mProfile -> c
    float mMinWidth -> d
    float mMinHeight -> e
    float DEFAULT_ICON_SIZE_DP -> a
    float DEFAULT_ICON_SIZE_PX -> b
    float dpiFromPx(int,android.util.DisplayMetrics) -> a
    int pxFromDp(float,android.util.DisplayMetrics) -> a
    int pxFromSp(float,android.util.DisplayMetrics) -> b
    com.phonemetra.turbo.launcher.DeviceProfile getDeviceProfile() -> a
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.FastBitmapDrawable -> com.phonemetra.turbo.launcher.cf:
    android.graphics.Bitmap mBitmap -> a
    int mAlpha -> b
    int mWidth -> c
    int mHeight -> d
    android.graphics.Paint mPaint -> e
    void draw(android.graphics.Canvas) -> draw
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setFilterBitmap(boolean) -> setFilterBitmap
    int getAlpha() -> getAlpha
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getMinimumWidth() -> getMinimumWidth
    int getMinimumHeight() -> getMinimumHeight
    android.graphics.Bitmap getBitmap() -> a
com.phonemetra.turbo.launcher.FirstFrameAnimatorHelper -> com.phonemetra.turbo.launcher.cg:
    android.view.View mTarget -> a
    long mStartFrame -> b
    long mStartTime -> c
    boolean mHandlingOnAnimationUpdate -> d
    boolean mAdjustedSecondFrameTime -> e
    android.view.ViewTreeObserver$OnDrawListener sGlobalDrawListener -> f
    long sGlobalFrameCounter -> g
    boolean sVisible -> h
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void setIsVisible(boolean) -> a
    void initializeDrawListener(android.view.View) -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
    long access$0() -> a
    void access$1(long) -> a
com.phonemetra.turbo.launcher.FirstFrameAnimatorHelper$1 -> com.phonemetra.turbo.launcher.ch:
    long mTime -> a
    void onDraw() -> onDraw
com.phonemetra.turbo.launcher.FirstFrameAnimatorHelper$2 -> com.phonemetra.turbo.launcher.ci:
    com.phonemetra.turbo.launcher.FirstFrameAnimatorHelper this$0 -> a
    android.animation.ValueAnimator val$animation -> b
    void run() -> run
com.phonemetra.turbo.launcher.FocusHelper -> com.phonemetra.turbo.launcher.cj:
    android.view.ViewGroup getAppsCustomizePage(android.view.ViewGroup,int) -> a
    boolean handleAppsCustomizeKeyEvent(android.view.View,int,android.view.KeyEvent) -> a
    boolean handleHotseatButtonKeyEvent(android.view.View,int,android.view.KeyEvent,int) -> a
    com.phonemetra.turbo.launcher.ShortcutAndWidgetContainer getCellLayoutChildrenForIndex(android.view.ViewGroup,int) -> b
    java.util.ArrayList getCellLayoutChildrenSortedSpatially(com.phonemetra.turbo.launcher.CellLayout,android.view.ViewGroup) -> a
    android.view.View findIndexOfIcon(java.util.ArrayList,int,int) -> a
    android.view.View getIconInDirection(com.phonemetra.turbo.launcher.CellLayout,android.view.ViewGroup,int,int) -> a
    android.view.View getIconInDirection(com.phonemetra.turbo.launcher.CellLayout,android.view.ViewGroup,android.view.View,int) -> a
    android.view.View getClosestIconOnLine(com.phonemetra.turbo.launcher.CellLayout,android.view.ViewGroup,android.view.View,int) -> b
    boolean handleIconKeyEvent(android.view.View,int,android.view.KeyEvent) -> b
    boolean handleFolderKeyEvent(android.view.View,int,android.view.KeyEvent) -> c
com.phonemetra.turbo.launcher.FocusHelper$1 -> com.phonemetra.turbo.launcher.ck:
    int val$cellCountX -> a
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.Folder -> com.phonemetra.turbo.launcher.Folder:
    com.phonemetra.turbo.launcher.DragController mDragController -> a
    com.phonemetra.turbo.launcher.Launcher mLauncher -> b
    com.phonemetra.turbo.launcher.FolderInfo mInfo -> c
    int mExpandDuration -> l
    com.phonemetra.turbo.launcher.CellLayout mContent -> d
    android.widget.ScrollView mScrollView -> m
    android.view.LayoutInflater mInflater -> n
    com.phonemetra.turbo.launcher.IconCache mIconCache -> o
    int mState -> p
    boolean mRearrangeOnClose -> q
    com.phonemetra.turbo.launcher.FolderIcon mFolderIcon -> r
    int mMaxCountX -> s
    int mMaxCountY -> t
    int mMaxNumItems -> u
    java.util.ArrayList mItemsInReadingOrder -> v
    boolean mItemsInvalidated -> e
    com.phonemetra.turbo.launcher.ShortcutInfo mCurrentDragInfo -> w
    android.view.View mCurrentDragView -> x
    boolean mIsExternalDrag -> y
    boolean mSuppressOnAdd -> f
    int[] mTargetCell -> z
    int[] mPreviousTargetCell -> A
    int[] mEmptyCell -> B
    com.phonemetra.turbo.launcher.Alarm mReorderAlarm -> C
    com.phonemetra.turbo.launcher.Alarm mOnExitAlarm -> D
    int mFolderNameHeight -> E
    android.graphics.Rect mTempRect -> F
    boolean mDragInProgress -> G
    boolean mDeleteFolderOnDropCompleted -> H
    boolean mSuppressFolderDeletion -> I
    boolean mItemAddedBackToSelfViaIcon -> J
    com.phonemetra.turbo.launcher.FolderEditText mFolderName -> g
    android.widget.ImageView mFolderLock -> h
    android.widget.RelativeLayout mFolderTitleSection -> i
    float mFolderIconPivotX -> K
    float mFolderIconPivotY -> L
    boolean mIsEditingName -> M
    android.view.inputmethod.InputMethodManager mInputMethodManager -> N
    java.lang.String sDefaultFolderName -> O
    java.lang.String sHintText -> P
    int DRAG_MODE_NONE -> Q
    int DRAG_MODE_REORDER -> R
    int mDragMode -> S
    boolean mDestroyed -> T
    android.support.v4.widget.AutoScrollHelper mAutoScrollHelper -> U
    java.lang.Runnable mDeferredAction -> V
    boolean mDeferDropAfterUninstall -> W
    boolean mUninstallSuccessful -> aa
    boolean mHiddenFolder -> ab
    android.view.ActionMode$Callback mActionModeCallback -> ac
    com.phonemetra.turbo.launcher.OnAlarmListener mReorderAlarmListener -> j
    com.phonemetra.turbo.launcher.OnAlarmListener mOnExitAlarmListener -> k
    void onFinishInflate() -> onFinishInflate
    void onClick(android.view.View) -> onClick
    void startHiddenFolderManager() -> f
    java.lang.String[] getComponentTitles() -> getComponentTitles
    java.lang.String[] getComponents() -> getComponents
    void modifyProtectedApps(boolean) -> a
    java.lang.String getComponentString() -> getComponentString
    boolean onLongClick(android.view.View) -> onLongClick
    boolean isEditingName() -> g
    void startEditingFolderName() -> h
    void dismissEditingName() -> i
    void doneEditingFolderName(boolean) -> b
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
    android.view.View getEditTextRegion() -> getEditTextRegion
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setDragController(com.phonemetra.turbo.launcher.DragController) -> setDragController
    void setFolderIcon(com.phonemetra.turbo.launcher.FolderIcon) -> setFolderIcon
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    com.phonemetra.turbo.launcher.FolderInfo getInfo() -> getInfo
    void placeInReadingOrder(java.util.ArrayList) -> a
    void bind(com.phonemetra.turbo.launcher.FolderInfo) -> a
    void setFolderName() -> j
    com.phonemetra.turbo.launcher.Folder fromXml(android.content.Context) -> a
    void positionAndSizeAsIcon() -> t
    void animateOpen() -> k
    void beginExternalDrag(com.phonemetra.turbo.launcher.ShortcutInfo) -> a
    void sendCustomAccessibilityEvent(int,java.lang.String) -> a
    void setFocusOnFirstChild() -> u
    void animateClosed() -> l
    boolean acceptDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    boolean findAndSetEmptyCells(com.phonemetra.turbo.launcher.ShortcutInfo) -> b
    android.view.View createAndAddShortcut(com.phonemetra.turbo.launcher.ShortcutInfo) -> c
    void onDragEnter(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> c
    boolean readingOrderGreaterThan(int[],int[]) -> a
    void realTimeReorder(int[],int[]) -> b
    boolean isLayoutRtl() -> m
    void onDragOver(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> d
    float[] getDragViewVisualCenter(int,int,int,int,com.phonemetra.turbo.launcher.DragView,float[]) -> a
    void completeDragExit() -> n
    void onDragExit(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> e
    void onDropCompleted(android.view.View,com.phonemetra.turbo.launcher.DropTarget$DragObject,boolean,boolean) -> a
    void deferCompleteDropAfterUninstallActivity() -> o
    void onUninstallActivityReturned(boolean) -> c
    float getIntrinsicIconScaleFactor() -> getIntrinsicIconScaleFactor
    boolean supportsFlingToDelete() -> c
    boolean supportsAppInfoDropTarget() -> d
    boolean supportsDeleteDropTarget() -> e
    void onFlingToDelete(com.phonemetra.turbo.launcher.DropTarget$DragObject,int,int,android.graphics.PointF) -> a
    void onFlingToDeleteCompleted() -> d_
    void updateItemLocationsInDatabase() -> v
    void updateItemLocationsInDatabaseBatch() -> w
    void notifyDrop() -> p
    boolean isDropEnabled() -> e_
    void setupContentDimensions(int) -> setupContentDimensions
    boolean isFull() -> q
    void centerAboutIcon() -> x
    float getPivotXForIconAnimation() -> getPivotXForIconAnimation
    float getPivotYForIconAnimation() -> getPivotYForIconAnimation
    void setupContentForNumItems(int) -> setupContentForNumItems
    int getContentAreaHeight() -> getContentAreaHeight
    int getContentAreaWidth() -> getContentAreaWidth
    int getFolderHeight() -> getFolderHeight
    void onMeasure(int,int) -> onMeasure
    void arrangeChildren(java.util.ArrayList) -> b
    int getItemCount() -> getItemCount
    android.view.View getItemAt(int) -> a
    void onCloseComplete() -> y
    void replaceFolderWithFinalItem() -> z
    boolean isDestroyed() -> r
    void updateTextViewFocus() -> A
    void onDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> b
    void hideItem(com.phonemetra.turbo.launcher.ShortcutInfo) -> d
    void showItem(com.phonemetra.turbo.launcher.ShortcutInfo) -> e
    void onAdd(com.phonemetra.turbo.launcher.ShortcutInfo) -> f
    void onRemove(com.phonemetra.turbo.launcher.ShortcutInfo) -> g
    android.view.View getViewForInfo(com.phonemetra.turbo.launcher.ShortcutInfo) -> h
    void onItemsChanged() -> s
    void onTitleChanged(java.lang.CharSequence) -> a
    java.util.ArrayList getItemsInReadingOrder() -> getItemsInReadingOrder
    void onFocusChange(android.view.View,boolean) -> onFocusChange
    void getHitRectRelativeToDragLayer(android.graphics.Rect) -> a
    android.view.View getViewFromPosition(int) -> b
    int[] access$0(com.phonemetra.turbo.launcher.Folder) -> a
    int[] access$1(com.phonemetra.turbo.launcher.Folder) -> b
    void access$2(com.phonemetra.turbo.launcher.Folder,int[],int[]) -> a
    void access$3(com.phonemetra.turbo.launcher.Folder) -> c
    void access$4(com.phonemetra.turbo.launcher.Folder,int,java.lang.String) -> a
    void access$5(com.phonemetra.turbo.launcher.Folder,int) -> a
    void access$6(com.phonemetra.turbo.launcher.Folder) -> d
    void access$7(com.phonemetra.turbo.launcher.Folder) -> e
    void access$8(com.phonemetra.turbo.launcher.Folder,java.lang.Runnable) -> a
    com.phonemetra.turbo.launcher.FolderIcon access$9(com.phonemetra.turbo.launcher.Folder) -> f
com.phonemetra.turbo.launcher.Folder$1 -> com.phonemetra.turbo.launcher.cl:
    com.phonemetra.turbo.launcher.Folder this$0 -> a
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
com.phonemetra.turbo.launcher.Folder$2 -> com.phonemetra.turbo.launcher.cm:
    com.phonemetra.turbo.launcher.Folder this$0 -> a
    void onAlarm(com.phonemetra.turbo.launcher.Alarm) -> a
com.phonemetra.turbo.launcher.Folder$3 -> com.phonemetra.turbo.launcher.cn:
    com.phonemetra.turbo.launcher.Folder this$0 -> a
    void onAlarm(com.phonemetra.turbo.launcher.Alarm) -> a
com.phonemetra.turbo.launcher.Folder$4 -> com.phonemetra.turbo.launcher.co:
    com.phonemetra.turbo.launcher.Folder this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Folder$5 -> com.phonemetra.turbo.launcher.cp:
    com.phonemetra.turbo.launcher.Folder this$0 -> a
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.Folder$6 -> com.phonemetra.turbo.launcher.cq:
    com.phonemetra.turbo.launcher.Folder this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
com.phonemetra.turbo.launcher.Folder$7 -> com.phonemetra.turbo.launcher.cr:
    com.phonemetra.turbo.launcher.Folder this$0 -> a
    android.view.View val$target -> b
    com.phonemetra.turbo.launcher.DropTarget$DragObject val$d -> c
    boolean val$isFlingToDelete -> d
    boolean val$success -> e
    void run() -> run
com.phonemetra.turbo.launcher.Folder$8 -> com.phonemetra.turbo.launcher.cs:
    com.phonemetra.turbo.launcher.Folder this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Folder$9 -> com.phonemetra.turbo.launcher.ct:
    com.phonemetra.turbo.launcher.Folder this$0 -> a
    void run() -> run
    com.phonemetra.turbo.launcher.Folder access$0(com.phonemetra.turbo.launcher.Folder$9) -> a
com.phonemetra.turbo.launcher.Folder$9$1 -> com.phonemetra.turbo.launcher.cu:
    com.phonemetra.turbo.launcher.Folder$9 this$1 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Folder$GridComparator -> com.phonemetra.turbo.launcher.cv:
    int mNumCols -> a
    com.phonemetra.turbo.launcher.Folder this$0 -> b
    int compare(com.phonemetra.turbo.launcher.ShortcutInfo,com.phonemetra.turbo.launcher.ShortcutInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.FolderAutoScrollHelper -> com.phonemetra.turbo.launcher.cw:
    android.widget.ScrollView mTarget -> a
    void scrollTargetBy(int,int) -> a
    boolean canTargetScrollHorizontally(int) -> e
    boolean canTargetScrollVertically(int) -> f
com.phonemetra.turbo.launcher.FolderEditText -> com.phonemetra.turbo.launcher.FolderEditText:
    com.phonemetra.turbo.launcher.Folder mFolder -> a
    void setFolder(com.phonemetra.turbo.launcher.Folder) -> setFolder
    boolean onKeyPreIme(int,android.view.KeyEvent) -> onKeyPreIme
com.phonemetra.turbo.launcher.FolderIcon -> com.phonemetra.turbo.launcher.FolderIcon:
    com.phonemetra.turbo.launcher.Launcher mLauncher -> e
    com.phonemetra.turbo.launcher.Folder mFolder -> f
    com.phonemetra.turbo.launcher.FolderInfo mInfo -> g
    boolean sStaticValuesDirty -> h
    com.phonemetra.turbo.launcher.CheckLongPressHelper mLongPressHelper -> i
    android.graphics.drawable.Drawable sSharedFolderLeaveBehind -> a
    android.widget.ImageView mPreviewBackground -> j
    com.phonemetra.turbo.launcher.BubbleTextView mFolderName -> k
    com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator mFolderRingAnimator -> b
    int mIntrinsicIconSize -> l
    float mBaselineIconScale -> m
    int mBaselineIconSize -> n
    int mAvailableSpaceInPreview -> o
    int mTotalWidth -> p
    int mPreviewOffsetX -> q
    int mPreviewOffsetY -> r
    float mMaxPerspectiveShift -> s
    boolean mAnimating -> c
    android.graphics.Rect mOldBounds -> t
    com.phonemetra.turbo.launcher.FolderIcon$PreviewItemDrawingParams mParams -> u
    com.phonemetra.turbo.launcher.FolderIcon$PreviewItemDrawingParams mAnimParams -> v
    java.util.ArrayList mHiddenItems -> w
    com.phonemetra.turbo.launcher.Alarm mOpenAlarm -> x
    com.phonemetra.turbo.launcher.ItemInfo mDragInfo -> y
    com.phonemetra.turbo.launcher.OnAlarmListener mOnOpenListener -> d
    void init() -> c
    com.phonemetra.turbo.launcher.FolderIcon fromXml(int,com.phonemetra.turbo.launcher.Launcher,android.view.ViewGroup,com.phonemetra.turbo.launcher.FolderInfo,com.phonemetra.turbo.launcher.IconCache) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    com.phonemetra.turbo.launcher.Folder getFolder() -> getFolder
    com.phonemetra.turbo.launcher.FolderInfo getFolderInfo() -> getFolderInfo
    boolean willAcceptItem(com.phonemetra.turbo.launcher.ItemInfo) -> a
    boolean acceptDrop(java.lang.Object) -> a
    void addItem(com.phonemetra.turbo.launcher.ShortcutInfo) -> a
    void onDragEnter(java.lang.Object) -> b
    void performCreateAnimation(com.phonemetra.turbo.launcher.ShortcutInfo,android.view.View,com.phonemetra.turbo.launcher.ShortcutInfo,com.phonemetra.turbo.launcher.DragView,android.graphics.Rect,float,java.lang.Runnable) -> a
    void performDestroyAnimation(android.view.View,java.lang.Runnable) -> a
    void onDragExit(java.lang.Object) -> c
    void onDragExit() -> a
    void onDrop(com.phonemetra.turbo.launcher.ShortcutInfo,com.phonemetra.turbo.launcher.DragView,android.graphics.Rect,float,int,java.lang.Runnable,com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    void onDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    void computePreviewDrawingParams(int,int) -> a
    void computePreviewDrawingParams(android.graphics.drawable.Drawable) -> a
    float getLocalCenterForIndex(int,int[]) -> a
    com.phonemetra.turbo.launcher.FolderIcon$PreviewItemDrawingParams computePreviewItemDrawingParams(int,com.phonemetra.turbo.launcher.FolderIcon$PreviewItemDrawingParams) -> a
    void drawPreviewItem(android.graphics.Canvas,com.phonemetra.turbo.launcher.FolderIcon$PreviewItemDrawingParams) -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void animateFirstItem(android.graphics.drawable.Drawable,int,boolean,java.lang.Runnable) -> a
    void setTextVisible(boolean) -> setTextVisible
    boolean getTextVisible() -> getTextVisible
    void onItemsChanged() -> s
    void onAdd(com.phonemetra.turbo.launcher.ShortcutInfo) -> f
    void onRemove(com.phonemetra.turbo.launcher.ShortcutInfo) -> g
    void onTitleChanged(java.lang.CharSequence) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void cancelLongPress() -> cancelLongPress
    com.phonemetra.turbo.launcher.ItemInfo access$0(com.phonemetra.turbo.launcher.FolderIcon) -> a
    com.phonemetra.turbo.launcher.Folder access$1(com.phonemetra.turbo.launcher.FolderIcon) -> b
    com.phonemetra.turbo.launcher.Launcher access$2(com.phonemetra.turbo.launcher.FolderIcon) -> c
    boolean access$3() -> b
    void access$4(boolean) -> a
    android.widget.ImageView access$5(com.phonemetra.turbo.launcher.FolderIcon) -> d
    java.util.ArrayList access$6(com.phonemetra.turbo.launcher.FolderIcon) -> e
    com.phonemetra.turbo.launcher.FolderIcon$PreviewItemDrawingParams access$7(com.phonemetra.turbo.launcher.FolderIcon) -> f
com.phonemetra.turbo.launcher.FolderIcon$1 -> com.phonemetra.turbo.launcher.cx:
    com.phonemetra.turbo.launcher.FolderIcon this$0 -> a
    void onAlarm(com.phonemetra.turbo.launcher.Alarm) -> a
com.phonemetra.turbo.launcher.FolderIcon$2 -> com.phonemetra.turbo.launcher.cy:
    com.phonemetra.turbo.launcher.FolderIcon this$0 -> a
    com.phonemetra.turbo.launcher.ShortcutInfo val$item -> b
    void run() -> run
com.phonemetra.turbo.launcher.FolderIcon$3 -> com.phonemetra.turbo.launcher.cz:
    com.phonemetra.turbo.launcher.FolderIcon this$0 -> a
    boolean val$reverse -> b
    float val$transX0 -> c
    com.phonemetra.turbo.launcher.FolderIcon$PreviewItemDrawingParams val$finalParams -> d
    float val$transY0 -> e
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.FolderIcon$4 -> com.phonemetra.turbo.launcher.da:
    com.phonemetra.turbo.launcher.FolderIcon this$0 -> a
    java.lang.Runnable val$onCompleteRunnable -> b
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator -> com.phonemetra.turbo.launcher.db:
    int mCellX -> a
    int mCellY -> b
    com.phonemetra.turbo.launcher.CellLayout mCellLayout -> j
    float mOuterRingSize -> c
    float mInnerRingSize -> d
    com.phonemetra.turbo.launcher.FolderIcon mFolderIcon -> e
    android.graphics.drawable.Drawable sSharedOuterRingDrawable -> f
    android.graphics.drawable.Drawable sSharedInnerRingDrawable -> g
    int sPreviewSize -> h
    int sPreviewPadding -> i
    android.animation.ValueAnimator mAcceptAnimator -> k
    android.animation.ValueAnimator mNeutralAnimator -> l
    void animateToAcceptState() -> a
    void animateToNaturalState() -> b
    void setCell(int,int) -> a
    void setCellLayout(com.phonemetra.turbo.launcher.CellLayout) -> a
    float getOuterRingSize() -> c
    float getInnerRingSize() -> d
    com.phonemetra.turbo.launcher.CellLayout access$0(com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator) -> a
com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator$1 -> com.phonemetra.turbo.launcher.dc:
    com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator this$1 -> a
    int val$previewSize -> b
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator$2 -> com.phonemetra.turbo.launcher.dd:
    com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator this$1 -> a
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator$3 -> com.phonemetra.turbo.launcher.de:
    com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator this$1 -> a
    int val$previewSize -> b
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator$4 -> com.phonemetra.turbo.launcher.df:
    com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator this$1 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.FolderIcon$PreviewItemDrawingParams -> com.phonemetra.turbo.launcher.dg:
    float transX -> a
    float transY -> b
    float scale -> c
    int overlayAlpha -> d
    android.graphics.drawable.Drawable drawable -> e
    com.phonemetra.turbo.launcher.FolderIcon this$0 -> f
com.phonemetra.turbo.launcher.FolderInfo -> com.phonemetra.turbo.launcher.dh:
    boolean opened -> a
    java.util.ArrayList contents -> b
    java.lang.Boolean hidden -> c
    java.util.ArrayList listeners -> d
    void add(com.phonemetra.turbo.launcher.ShortcutInfo) -> a
    void remove(com.phonemetra.turbo.launcher.ShortcutInfo) -> b
    void setTitle(java.lang.CharSequence) -> a
    void onAddToDatabase(android.content.ContentValues) -> a
    void addListener(com.phonemetra.turbo.launcher.FolderInfo$FolderListener) -> a
    void itemsChanged() -> c
    void unbind() -> d
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.FolderInfo$FolderListener -> com.phonemetra.turbo.launcher.di:
    void onAdd(com.phonemetra.turbo.launcher.ShortcutInfo) -> f
    void onRemove(com.phonemetra.turbo.launcher.ShortcutInfo) -> g
    void onTitleChanged(java.lang.CharSequence) -> a
    void onItemsChanged() -> s
com.phonemetra.turbo.launcher.FolderKeyEventListener -> com.phonemetra.turbo.launcher.dj:
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.phonemetra.turbo.launcher.HiddenFolderFragment -> com.phonemetra.turbo.launcher.dk:
    java.lang.String[] mComponentInfo -> a
    java.lang.String[] mComponentTitles -> b
    boolean mHidden -> c
    android.content.pm.PackageManager mPackageManager -> d
    com.phonemetra.turbo.launcher.HiddenFolderFragment$AppsAdapter mAppsAdapter -> e
    java.util.ArrayList mAppEntries -> f
    android.widget.EditText mFolderName -> g
    android.widget.ListView mListView -> h
    com.phonemetra.turbo.launcher.Launcher mLauncher -> i
    boolean mAuth -> j
    boolean mSent -> k
    android.view.View$OnClickListener mClicklistener -> l
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void doneEditingText(android.view.View) -> a
    java.util.ArrayList loadApps() -> a
    void saveHiddenFolderStatus(int) -> a
    boolean access$0(com.phonemetra.turbo.launcher.HiddenFolderFragment) -> a
    void access$1(com.phonemetra.turbo.launcher.HiddenFolderFragment,boolean) -> a
    android.content.pm.PackageManager access$2(com.phonemetra.turbo.launcher.HiddenFolderFragment) -> b
    void access$3(com.phonemetra.turbo.launcher.HiddenFolderFragment,android.view.View) -> a
com.phonemetra.turbo.launcher.HiddenFolderFragment$1 -> com.phonemetra.turbo.launcher.dl:
    com.phonemetra.turbo.launcher.HiddenFolderFragment this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.HiddenFolderFragment$2 -> com.phonemetra.turbo.launcher.dm:
    com.phonemetra.turbo.launcher.HiddenFolderFragment this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.phonemetra.turbo.launcher.HiddenFolderFragment$3 -> com.phonemetra.turbo.launcher.dn:
    com.phonemetra.turbo.launcher.HiddenFolderFragment this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.phonemetra.turbo.launcher.HiddenFolderFragment$AppEntry -> com.phonemetra.turbo.launcher.do:
    android.content.ComponentName componentName -> a
    java.lang.String title -> b
    com.phonemetra.turbo.launcher.HiddenFolderFragment this$0 -> c
com.phonemetra.turbo.launcher.HiddenFolderFragment$AppViewHolder -> com.phonemetra.turbo.launcher.dp:
    android.widget.TextView title -> a
    android.widget.ImageView icon -> b
    int position -> c
com.phonemetra.turbo.launcher.HiddenFolderFragment$AppsAdapter -> com.phonemetra.turbo.launcher.dq:
    android.view.LayoutInflater mInflator -> b
    java.util.concurrent.ConcurrentHashMap mIcons -> c
    android.graphics.drawable.Drawable mDefaultImg -> d
    java.util.List mApps -> e
    com.phonemetra.turbo.launcher.HiddenFolderFragment this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean hasStableIds() -> hasStableIds
    void notifyDataSetChanged() -> notifyDataSetChanged
    java.util.concurrent.ConcurrentHashMap access$0(com.phonemetra.turbo.launcher.HiddenFolderFragment$AppsAdapter) -> a
    com.phonemetra.turbo.launcher.HiddenFolderFragment access$1(com.phonemetra.turbo.launcher.HiddenFolderFragment$AppsAdapter) -> b
com.phonemetra.turbo.launcher.HiddenFolderFragment$AppsAdapter$1 -> com.phonemetra.turbo.launcher.dr:
    com.phonemetra.turbo.launcher.HiddenFolderFragment$AppsAdapter this$1 -> a
    com.phonemetra.turbo.launcher.HiddenFolderFragment$AppViewHolder val$viewHolder -> b
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.HiddenFolderFragment$AppsAdapter$LoadIconsTask -> com.phonemetra.turbo.launcher.ds:
    com.phonemetra.turbo.launcher.HiddenFolderFragment$AppsAdapter this$1 -> a
    java.lang.Void doInBackground(com.phonemetra.turbo.launcher.HiddenFolderFragment$AppEntry[]) -> a
    void onProgressUpdate(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
com.phonemetra.turbo.launcher.HolographicImageView -> com.phonemetra.turbo.launcher.HolographicImageView:
    com.phonemetra.turbo.launcher.HolographicViewHelper mHolographicHelper -> a
    boolean mHotwordOn -> b
    boolean mIsPressed -> c
    boolean mIsFocused -> d
    void invalidatePressedFocusedStates() -> a
    void drawableStateChanged() -> drawableStateChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean isHotwordOn() -> b
    void setHotwordState(boolean) -> setHotwordState
    int[] onCreateDrawableState(int) -> onCreateDrawableState
    boolean access$0(com.phonemetra.turbo.launcher.HolographicImageView) -> a
    void access$1(com.phonemetra.turbo.launcher.HolographicImageView,boolean) -> a
    boolean access$2(com.phonemetra.turbo.launcher.HolographicImageView) -> b
    void access$3(com.phonemetra.turbo.launcher.HolographicImageView,boolean) -> b
com.phonemetra.turbo.launcher.HolographicImageView$1 -> com.phonemetra.turbo.launcher.dt:
    com.phonemetra.turbo.launcher.HolographicImageView this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.phonemetra.turbo.launcher.HolographicImageView$2 -> com.phonemetra.turbo.launcher.du:
    com.phonemetra.turbo.launcher.HolographicImageView this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.phonemetra.turbo.launcher.HolographicLinearLayout -> com.phonemetra.turbo.launcher.HolographicLinearLayout:
    com.phonemetra.turbo.launcher.HolographicViewHelper mHolographicHelper -> a
    android.widget.ImageView mImageView -> b
    int mImageViewId -> c
    boolean mHotwordOn -> d
    boolean mIsPressed -> e
    boolean mIsFocused -> f
    void drawableStateChanged() -> drawableStateChanged
    void invalidatePressedFocusedStates() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean isHotwordOn() -> b
    void setHotwordState(boolean) -> setHotwordState
    int[] onCreateDrawableState(int) -> onCreateDrawableState
    boolean access$0(com.phonemetra.turbo.launcher.HolographicLinearLayout) -> a
    void access$1(com.phonemetra.turbo.launcher.HolographicLinearLayout,boolean) -> a
    boolean access$2(com.phonemetra.turbo.launcher.HolographicLinearLayout) -> b
    void access$3(com.phonemetra.turbo.launcher.HolographicLinearLayout,boolean) -> b
com.phonemetra.turbo.launcher.HolographicLinearLayout$1 -> com.phonemetra.turbo.launcher.dv:
    com.phonemetra.turbo.launcher.HolographicLinearLayout this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.phonemetra.turbo.launcher.HolographicLinearLayout$2 -> com.phonemetra.turbo.launcher.dw:
    com.phonemetra.turbo.launcher.HolographicLinearLayout this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.phonemetra.turbo.launcher.HolographicOutlineHelper -> com.phonemetra.turbo.launcher.dx:
    android.graphics.Paint mHolographicPaint -> d
    android.graphics.Paint mBlurPaint -> e
    android.graphics.Paint mErasePaint -> f
    int mMaxOuterBlurRadius -> a
    int mMinOuterBlurRadius -> b
    android.graphics.BlurMaskFilter mExtraThickOuterBlurMaskFilter -> g
    android.graphics.BlurMaskFilter mThickOuterBlurMaskFilter -> h
    android.graphics.BlurMaskFilter mMediumOuterBlurMaskFilter -> i
    android.graphics.BlurMaskFilter mThinOuterBlurMaskFilter -> j
    android.graphics.BlurMaskFilter mThickInnerBlurMaskFilter -> k
    android.graphics.BlurMaskFilter mExtraThickInnerBlurMaskFilter -> l
    android.graphics.BlurMaskFilter mMediumInnerBlurMaskFilter -> m
    com.phonemetra.turbo.launcher.HolographicOutlineHelper INSTANCE -> c
    com.phonemetra.turbo.launcher.HolographicOutlineHelper obtain(android.content.Context) -> a
    void applyExpensiveOutlineWithBlur(android.graphics.Bitmap,android.graphics.Canvas,int,int,int) -> a
    void applyExpensiveOutlineWithBlur(android.graphics.Bitmap,android.graphics.Canvas,int,int,boolean,int) -> a
    void applyExtraThickExpensiveOutlineWithBlur(android.graphics.Bitmap,android.graphics.Canvas,int,int) -> a
    void applyMediumExpensiveOutlineWithBlur(android.graphics.Bitmap,android.graphics.Canvas,int,int,boolean) -> a
    void applyMediumExpensiveOutlineWithBlur(android.graphics.Bitmap,android.graphics.Canvas,int,int) -> b
com.phonemetra.turbo.launcher.HolographicViewHelper -> com.phonemetra.turbo.launcher.dy:
    android.graphics.Canvas mTempCanvas -> a
    boolean mStatesUpdated -> b
    int mHighlightColor -> c
    int mHotwordColor -> d
    void generatePressedFocusedStates(android.widget.ImageView) -> a
    void invalidatePressedFocusedStates(android.widget.ImageView) -> b
    android.graphics.Bitmap createOriginalImage(android.widget.ImageView,android.graphics.Canvas) -> a
    android.graphics.Bitmap createImageWithOverlay(android.widget.ImageView,android.graphics.Canvas,int) -> a
com.phonemetra.turbo.launcher.Hotseat -> com.phonemetra.turbo.launcher.Hotseat:
    com.phonemetra.turbo.launcher.CellLayout mContent -> a
    com.phonemetra.turbo.launcher.Launcher mLauncher -> b
    int mAllAppsButtonRank -> c
    boolean mTransposeLayoutWithOrientation -> d
    boolean mIsLandscape -> e
    void setup(com.phonemetra.turbo.launcher.Launcher) -> setup
    com.phonemetra.turbo.launcher.CellLayout getLayout() -> getLayout
    void setOnLongClickListener(android.view.View$OnLongClickListener) -> setOnLongClickListener
    boolean hasVerticalHotseat() -> b
    int getOrderInHotseat(int,int) -> a
    int getCellXFromOrder(int) -> a
    int getCellYFromOrder(int) -> b
    void onFinishInflate() -> onFinishInflate
    void resetLayout() -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
com.phonemetra.turbo.launcher.HotseatIconKeyEventListener -> com.phonemetra.turbo.launcher.dz:
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.phonemetra.turbo.launcher.IconCache -> com.phonemetra.turbo.launcher.ea:
    android.graphics.Bitmap mDefaultIcon -> a
    android.content.Context mContext -> b
    android.content.pm.PackageManager mPackageManager -> c
    java.util.HashMap mCache -> d
    int mIconDpi -> e
    android.graphics.drawable.Drawable getFullResDefaultActivityIcon() -> a
    android.graphics.drawable.Drawable getFullResIcon(android.content.res.Resources,int) -> a
    android.graphics.drawable.Drawable getFullResIcon(java.lang.String,int) -> a
    android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ResolveInfo) -> a
    android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ActivityInfo) -> a
    android.graphics.Bitmap makeDefaultIcon() -> c
    void remove(android.content.ComponentName) -> a
    void remove(java.lang.String) -> a
    void flush() -> b
    void flushInvalidIcons(com.phonemetra.turbo.launcher.DeviceProfile) -> a
    void getTitleAndIcon(com.phonemetra.turbo.launcher.AppInfo,android.content.pm.ResolveInfo,java.util.HashMap) -> a
    android.graphics.Bitmap getThemeIcon(android.content.pm.ResolveInfo) -> b
    android.graphics.Bitmap getIcon(android.content.Intent) -> a
    android.graphics.Bitmap getIcon(android.content.Intent,java.lang.String) -> a
    android.graphics.Bitmap getIcon(android.content.ComponentName,android.content.pm.ResolveInfo,java.util.HashMap) -> a
    boolean isDefaultIcon(android.graphics.Bitmap) -> a
    com.phonemetra.turbo.launcher.IconCache$CacheEntry cacheLocked(android.content.ComponentName,android.content.pm.ResolveInfo,java.util.HashMap) -> b
    void preloadIcon(android.content.Context,android.content.ComponentName,android.graphics.Bitmap,int) -> a
    android.graphics.Bitmap getPreloadedIcon(android.content.ComponentName) -> c
    boolean deletePreloadedIcon(android.content.ComponentName) -> b
    java.lang.String getResourceFilename(android.content.ComponentName) -> d
com.phonemetra.turbo.launcher.IconCache$CacheEntry -> com.phonemetra.turbo.launcher.eb:
    android.graphics.Bitmap icon -> a
    java.lang.String title -> b
com.phonemetra.turbo.launcher.IconKeyEventListener -> com.phonemetra.turbo.launcher.ec:
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.phonemetra.turbo.launcher.InfoDropTarget -> com.phonemetra.turbo.launcher.InfoDropTarget:
    android.content.res.ColorStateList mOriginalTextColor -> f
    android.graphics.drawable.TransitionDrawable mDrawable -> g
    void onFinishInflate() -> onFinishInflate
    android.content.ComponentName dragItemComponentName(java.lang.Object) -> a
    boolean acceptDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    void onDragStart(com.phonemetra.turbo.launcher.DragSource,java.lang.Object,int) -> a
    void onDragEnd() -> b
    void onDragEnter(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> c
    void onDragExit(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> e
com.phonemetra.turbo.launcher.Insettable -> com.phonemetra.turbo.launcher.ed:
    void setInsets(android.graphics.Rect) -> setInsets
com.phonemetra.turbo.launcher.InstallShortcutReceiver -> com.phonemetra.turbo.launcher.InstallShortcutReceiver:
    java.lang.Object sLock -> a
    boolean mUseInstallQueue -> b
    void addToStringSet(android.content.SharedPreferences,android.content.SharedPreferences$Editor,java.lang.String,java.lang.String) -> a
    void addToInstallQueue(android.content.SharedPreferences,com.phonemetra.turbo.launcher.InstallShortcutReceiver$PendingInstallShortcutInfo) -> a
    void removeFromInstallQueue(android.content.SharedPreferences,java.util.ArrayList) -> a
    java.util.ArrayList getAndClearInstallQueue(android.content.SharedPreferences) -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void enableInstallQueue() -> a
    void disableAndFlushInstallQueue(android.content.Context) -> a
    void flushInstallQueue(android.content.Context) -> b
    boolean isValidShortcutLaunchIntent(android.content.Intent) -> a
    com.phonemetra.turbo.launcher.ShortcutInfo getShortcutInfo(android.content.Context,android.content.Intent,android.content.Intent) -> a
    java.lang.CharSequence ensureValidName(android.content.Context,android.content.Intent,java.lang.CharSequence) -> a
com.phonemetra.turbo.launcher.InstallShortcutReceiver$PendingInstallShortcutInfo -> com.phonemetra.turbo.launcher.ee:
    android.content.Intent data -> a
    android.content.Intent launchIntent -> b
    java.lang.String name -> c
    android.graphics.Bitmap icon -> d
    android.content.Intent$ShortcutIconResource iconResource -> e
com.phonemetra.turbo.launcher.InterruptibleInOutAnimator -> com.phonemetra.turbo.launcher.ef:
    long mOriginalDuration -> a
    float mOriginalFromValue -> b
    float mOriginalToValue -> c
    android.animation.ValueAnimator mAnimator -> d
    boolean mFirstRun -> e
    java.lang.Object mTag -> f
    int mDirection -> g
    void animate(int) -> a
    void cancel() -> a
    void animateIn() -> b
    void animateOut() -> c
    void setTag(java.lang.Object) -> a
    java.lang.Object getTag() -> d
    android.animation.ValueAnimator getAnimator() -> e
    void access$0(com.phonemetra.turbo.launcher.InterruptibleInOutAnimator,int) -> a
com.phonemetra.turbo.launcher.InterruptibleInOutAnimator$1 -> com.phonemetra.turbo.launcher.eg:
    com.phonemetra.turbo.launcher.InterruptibleInOutAnimator this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.ItemInfo -> com.phonemetra.turbo.launcher.eh:
    long id -> f
    int itemType -> g
    long container -> h
    long screenId -> i
    int cellX -> j
    int cellY -> k
    int spanX -> l
    int spanY -> m
    int minSpanX -> n
    int minSpanY -> o
    boolean requiresDbUpdate -> p
    java.lang.CharSequence title -> q
    int[] dropPos -> r
    android.content.Intent getIntent() -> a
    android.content.Intent getRestoredIntent() -> b
    void onAddToDatabase(android.content.ContentValues) -> a
    void updateValuesWithCoordinates(android.content.ContentValues,int,int) -> a
    byte[] flattenBitmap(android.graphics.Bitmap) -> a
    void writeBitmap(android.content.ContentValues,android.graphics.Bitmap) -> a
    void unbind() -> d
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.Launcher -> com.phonemetra.turbo.launcher.Launcher:
    com.phonemetra.turbo.launcher.DeviceProfile mGrid -> a
    com.phonemetra.turbo.launcher.Launcher$State mState -> m
    android.animation.AnimatorSet mStateAnimation -> n
    java.lang.Object sLock -> o
    int sScreen -> p
    java.util.HashMap mItemIdToViewId -> q
    java.util.concurrent.atomic.AtomicInteger sNextGeneratedId -> r
    int NEW_APPS_PAGE_MOVE_DELAY -> s
    int NEW_APPS_ANIMATION_INACTIVE_TIMEOUT_SECONDS -> t
    int NEW_APPS_ANIMATION_DELAY -> u
    android.content.BroadcastReceiver mCloseSystemDialogsReceiver -> v
    android.database.ContentObserver mWidgetObserver -> w
    android.view.LayoutInflater mInflater -> x
    com.phonemetra.turbo.launcher.Workspace mWorkspace -> y
    android.view.View mLauncherView -> z
    android.view.View mPageIndicators -> A
    com.phonemetra.turbo.launcher.DragLayer mDragLayer -> B
    com.phonemetra.turbo.launcher.DragController mDragController -> C
    com.phonemetra.turbo.launcher.TransitionEffectsFragment mTransitionEffectsFragment -> D
    com.phonemetra.turbo.launcher.HiddenFolderFragment mHiddenFolderFragment -> b
    android.appwidget.AppWidgetManager mAppWidgetManager -> E
    com.phonemetra.turbo.launcher.LauncherAppWidgetHost mAppWidgetHost -> F
    com.phonemetra.turbo.launcher.ItemInfo mPendingAddInfo -> G
    android.appwidget.AppWidgetProviderInfo mPendingAddWidgetInfo -> H
    int mPendingAddWidgetId -> I
    int[] mTmpAddItemCellCoordinates -> J
    com.phonemetra.turbo.launcher.FolderInfo mFolderInfo -> K
    com.phonemetra.turbo.launcher.FolderIcon mHiddenFolderIcon -> c
    boolean mHiddenFolderAuth -> L
    com.phonemetra.turbo.launcher.Hotseat mHotseat -> M
    android.view.ViewGroup mOverviewPanel -> N
    android.view.View mDarkPanel -> O
    com.phonemetra.turbo.launcher.settings.SettingsPanel mOverviewSettingsPanel -> d
    android.view.View mAllAppsButton -> P
    com.phonemetra.turbo.launcher.SearchDropTargetBar mSearchDropTargetBar -> Q
    com.phonemetra.turbo.launcher.AppsCustomizeLayout mAppsCustomizeLayout -> R
    com.phonemetra.turbo.launcher.AppsCustomizePagedView mAppsCustomizeContent -> S
    boolean mAutoAdvanceRunning -> T
    android.view.View mQsb -> U
    android.os.Bundle mSavedState -> V
    com.phonemetra.turbo.launcher.Launcher$State mOnResumeState -> W
    android.text.SpannableStringBuilder mDefaultKeySsb -> X
    boolean mWorkspaceLoading -> Y
    boolean mPaused -> Z
    boolean mRestoring -> aa
    boolean mWaitingForResult -> ab
    boolean mOnResumeNeedsLoad -> ac
    java.util.ArrayList mBindOnResumeCallbacks -> ad
    java.util.ArrayList mOnResumeCallbacks -> ae
    boolean sPausedFromUserAction -> af
    android.app.Dialog mTransitionEffectDialog -> ag
    com.phonemetra.turbo.launcher.LauncherModel mModel -> e
    com.phonemetra.turbo.launcher.IconCache mIconCache -> ah
    boolean mUserPresent -> ai
    boolean mVisible -> aj
    boolean mHasFocus -> ak
    boolean mAttached -> al
    com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration sLocaleConfiguration -> am
    java.util.HashMap sFolders -> an
    android.view.View$OnTouchListener mHapticFeedbackTouchListener -> ao
    int ADVANCE_MSG -> ap
    int mAdvanceInterval -> aq
    int mAdvanceStagger -> ar
    long mAutoAdvanceSentTime -> as
    long mAutoAdvanceTimeLeft -> at
    java.util.HashMap mWidgetsToAdvance -> au
    int mRestoreScreenOrientationDelay -> av
    android.graphics.drawable.Drawable$ConstantState[] sGlobalSearchIcon -> aw
    android.graphics.drawable.Drawable$ConstantState[] sVoiceSearchIcon -> ax
    android.graphics.drawable.Drawable mWorkspaceBackgroundDrawable -> ay
    java.util.ArrayList mSynchronouslyBoundPages -> az
    java.util.ArrayList sDumpLogs -> f
    java.util.Date sDateStamp -> g
    java.text.DateFormat sDateFormat -> h
    long sRunStart -> i
    android.content.SharedPreferences mSharedPrefs -> aA
    java.util.ArrayList mIntentsOnWorkspaceFromUpgradePath -> aB
    android.widget.ImageView mFolderIconImageView -> aC
    android.graphics.Bitmap mFolderIconBitmap -> aD
    android.graphics.Canvas mFolderIconCanvas -> aE
    android.graphics.Rect mRectForFolderAnimation -> aF
    com.phonemetra.turbo.launcher.BubbleTextView mWaitingForResume -> aG
    boolean mShouldRestart -> aH
    android.graphics.Typeface themeFont -> aI
    boolean showThemeFont -> aJ
    boolean mHideIconLabels -> aK
    java.lang.Runnable mBuildLayersRunnable -> aL
    java.util.ArrayList sPendingAddList -> aM
    boolean sForceEnableRotation -> j
    com.phonemetra.turbo.launcher.Stats mStats -> aN
    android.animation.Animator$AnimatorListener mAnimatorListener -> k
    android.content.BroadcastReceiver protectedAppsChangedReceiver -> aO
    com.phonemetra.turbo.launcher.Launcher$QSBScroller mQsbScroller -> l
    android.content.BroadcastReceiver mReceiver -> aP
    android.os.Handler mHandler -> aQ
    java.util.ArrayList mWidgetsAndShortcuts -> aR
    java.lang.Runnable mBindPackagesUpdatedRunnable -> aS
    int[] $SWITCH_TABLE$com$phonemetra$turbo$launcher$AppsCustomizePagedView$SortMode -> aT
    boolean isPropertyEnabled(java.lang.String) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void initializeDynamicGrid() -> a
    void onUserLeaveHint() -> onUserLeaveHint
    void populateCustomContentContainer() -> b
    boolean hasCustomContentToLeft() -> c
    void updateGlobalIcons() -> ac
    void checkForLocaleChange() -> ad
    void readConfiguration(android.content.Context,com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration) -> c
    void writeConfiguration(android.content.Context,com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration) -> d
    com.phonemetra.turbo.launcher.Stats getStats() -> d
    boolean isDraggingEnabled() -> e
    void setScreen(int) -> a
    int generateViewId() -> f
    int getViewIdForItem(com.phonemetra.turbo.launcher.ItemInfo) -> a
    boolean completeAdd(com.phonemetra.turbo.launcher.Launcher$PendingAddArguments) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void completeTwoStageWidgetDrop(int,int) -> a
    void onStop() -> onStop
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void resetQSBScroll() -> g
    void startThemeSettings() -> h
    void onClickSortModeButton(android.view.View) -> onClickSortModeButton
    void onClickTransitionEffectButton(android.view.View,boolean) -> a
    void setTransitionEffect(boolean,java.lang.String) -> a
    void onClickTransitionEffectOverflowMenuButton(android.view.View) -> onClickTransitionEffectOverflowMenuButton
    void startSettings() -> i
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    boolean acceptFilter() -> ae
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    java.lang.String getTypedText() -> af
    void clearTypedText() -> ag
    com.phonemetra.turbo.launcher.Launcher$State intToState(int) -> d
    void restoreState(android.os.Bundle) -> a
    void setupViews() -> ah
    android.view.View createShortcut(com.phonemetra.turbo.launcher.ShortcutInfo) -> a
    android.view.View createShortcut(int,android.view.ViewGroup,com.phonemetra.turbo.launcher.ShortcutInfo) -> a
    void completeAddApplication(android.content.Intent,long,long,int,int) -> a
    void completeAddShortcut(android.content.Intent,long,long,int,int) -> b
    int[] getSpanForWidget(android.content.Context,android.content.ComponentName,int,int) -> a
    int[] getSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo) -> a
    int[] getMinSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo) -> b
    void completeAddAppWidget(int,long,long,android.appwidget.AppWidgetHostView,android.appwidget.AppWidgetProviderInfo) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onWindowVisibilityChanged(int) -> b
    void sendAdvanceMessage(long) -> a
    void updateRunning() -> ai
    void addWidgetToAutoAdvanceIfNeeded(android.view.View,android.appwidget.AppWidgetProviderInfo) -> a
    void removeWidgetToAutoAdvance(android.view.View) -> a
    void removeAppWidget(com.phonemetra.turbo.launcher.LauncherAppWidgetInfo) -> a
    void showOutOfSpaceMessage(boolean) -> a
    com.phonemetra.turbo.launcher.DragLayer getDragLayer() -> j
    com.phonemetra.turbo.launcher.Workspace getWorkspace() -> k
    com.phonemetra.turbo.launcher.Hotseat getHotseat() -> l
    android.view.View getDarkPanel() -> m
    android.view.View getOverviewPanel() -> n
    com.phonemetra.turbo.launcher.SearchDropTargetBar getSearchBar() -> o
    com.phonemetra.turbo.launcher.LauncherAppWidgetHost getAppWidgetHost() -> p
    com.phonemetra.turbo.launcher.LauncherModel getModel() -> q
    void closeSystemDialogs() -> r
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean shouldMoveToDefaultScreenOnHomeIntent() -> s
    void onHomeIntent() -> t
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onDestroy() -> onDestroy
    com.phonemetra.turbo.launcher.DragController getDragController() -> u
    void validateLockForHiddenFolders(android.os.Bundle,com.phonemetra.turbo.launcher.FolderIcon) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startSearch(java.lang.String,boolean,android.os.Bundle,boolean) -> startSearch
    void startSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect) -> a
    void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect) -> b
    boolean isOnCustomContent() -> v
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onSearchRequested() -> onSearchRequested
    boolean isWorkspaceLocked() -> w
    boolean isWorkspaceLoading() -> x
    void resetAddInfo() -> aj
    void addAppWidgetImpl(int,com.phonemetra.turbo.launcher.ItemInfo,android.appwidget.AppWidgetHostView,android.appwidget.AppWidgetProviderInfo) -> a
    void addAppWidgetImpl(int,com.phonemetra.turbo.launcher.ItemInfo,android.appwidget.AppWidgetHostView,android.appwidget.AppWidgetProviderInfo,int) -> a
    void processShortcutFromDrop(android.content.ComponentName,long,long,int[],int[]) -> a
    void addAppWidgetFromDrop(com.phonemetra.turbo.launcher.PendingAddWidgetInfo,long,long,int[],int[],int[]) -> a
    void processShortcut(android.content.Intent) -> a
    com.phonemetra.turbo.launcher.FolderIcon addFolder(com.phonemetra.turbo.launcher.CellLayout,long,long,int,int) -> a
    void removeFolder(com.phonemetra.turbo.launcher.FolderInfo) -> a
    void startWallpaper() -> y
    android.content.ComponentName getWallpaperPickerComponent() -> z
    void registerContentObservers() -> ak
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    void onBackPressed() -> onBackPressed
    void onAppWidgetReset() -> al
    void onClick(android.view.View) -> onClick
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void onClickSearchButton(android.view.View) -> onClickSearchButton
    void onClickVoiceButton(android.view.View) -> onClickVoiceButton
    void startVoice() -> A
    void onClickAllAppsButton(android.view.View) -> onClickAllAppsButton
    void onClickAddWidgetButton() -> B
    void onTouchDownAllAppsButton(android.view.View) -> onTouchDownAllAppsButton
    void performHapticFeedbackOnTouchDown(android.view.View) -> performHapticFeedbackOnTouchDown
    android.view.View$OnTouchListener getHapticFeedbackTouchListener() -> C
    void onInteractionEnd() -> D
    void onInteractionBegin() -> E
    void startApplicationDetailsActivity(android.content.ComponentName) -> a
    boolean startApplicationUninstallActivity(android.content.ComponentName,int) -> a
    boolean startActivity(android.view.View,android.content.Intent,java.lang.Object) -> a
    boolean startActivitySafely(android.view.View,android.content.Intent,java.lang.Object) -> b
    void handleFolderClick(com.phonemetra.turbo.launcher.FolderIcon) -> b
    void copyFolderIconToImage(com.phonemetra.turbo.launcher.FolderIcon) -> c
    void growAndFadeOutFolderIcon(com.phonemetra.turbo.launcher.FolderIcon) -> d
    void shrinkAndFadeInFolderIcon(com.phonemetra.turbo.launcher.FolderIcon) -> e
    void openFolder(com.phonemetra.turbo.launcher.FolderIcon) -> a
    void closeFolder() -> F
    void closeFolder(com.phonemetra.turbo.launcher.Folder) -> a
    boolean onLongClick(android.view.View) -> onLongClick
    boolean isHotseatLayout(android.view.View) -> b
    com.phonemetra.turbo.launcher.CellLayout getCellLayout(long,long) -> a
    com.phonemetra.turbo.launcher.AppsCustomizePagedView getAppsCustomizeContent() -> G
    void updateOverviewPanel() -> H
    boolean isAllAppsVisible() -> I
    void setPivotsForZoom(android.view.View,float) -> a
    void setWorkspaceBackground(boolean) -> j
    void dispatchOnLauncherTransitionPrepare(android.view.View,boolean,boolean) -> a
    void dispatchOnLauncherTransitionStart(android.view.View,boolean,boolean) -> b
    void dispatchOnLauncherTransitionStep(android.view.View,float) -> b
    void dispatchOnLauncherTransitionEnd(android.view.View,boolean,boolean) -> c
    void showAppsCustomizeHelper(boolean,boolean) -> a
    void showAppsCustomizeHelper(boolean,boolean,com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType) -> a
    void hideAppsCustomizeHelper(com.phonemetra.turbo.launcher.Workspace$State,boolean,boolean,java.lang.Runnable) -> a
    void onTrimMemory(int) -> onTrimMemory
    void showWorkspace(boolean) -> b
    void showWorkspace(boolean,java.lang.Runnable) -> a
    void showOverviewMode(boolean) -> c
    void onWorkspaceShown(boolean) -> d
    void showAllApps(boolean,com.phonemetra.turbo.launcher.AppsCustomizePagedView$ContentType,boolean) -> a
    void enterSpringLoadedDragMode() -> J
    void exitSpringLoadedDragModeDelayed(boolean,int,java.lang.Runnable) -> a
    void exitSpringLoadedDragMode() -> K
    void lockAllApps() -> L
    void showHotseat(boolean) -> e
    int getCurrentOrientationIndexForGlobalIcons() -> am
    android.graphics.drawable.Drawable getExternalPackageToolbarIcon(android.content.ComponentName,java.lang.String) -> a
    android.graphics.drawable.Drawable$ConstantState updateButtonWithIconFromExternalActivity(int,android.content.ComponentName,int,java.lang.String) -> a
    void updateButtonWithDrawable(int,android.graphics.drawable.Drawable$ConstantState) -> a
    void invalidatePressedFocusedStates(android.view.View,android.view.View) -> a
    android.view.View getQsbBar() -> M
    boolean updateGlobalSearchIcon() -> N
    void updateGlobalSearchIcon(android.graphics.drawable.Drawable$ConstantState) -> a
    boolean updateVoiceSearchIcon(boolean) -> f
    void updateVoiceSearchIcon(android.graphics.drawable.Drawable$ConstantState) -> b
    void updateVoiceButtonProxyVisible(boolean) -> g
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    boolean waitUntilResume(java.lang.Runnable,boolean) -> a
    boolean waitUntilResume(java.lang.Runnable) -> b
    void addOnResumeCallback(java.lang.Runnable) -> a
    boolean setLoadOnResume() -> O
    int getCurrentWorkspaceScreen() -> P
    void startBinding() -> Q
    void bindScreens(java.util.ArrayList) -> a
    void bindAddScreens(java.util.ArrayList) -> b
    void bindAppsAdded(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> a
    void bindItems(java.util.ArrayList,int,int,boolean) -> a
    void bindFolders(java.util.HashMap) -> a
    void bindAppWidget(com.phonemetra.turbo.launcher.LauncherAppWidgetInfo) -> b
    void onPageBoundSynchronously(int) -> c
    void finishBindingItems(boolean) -> h
    boolean canRunNewAppsAnimation() -> an
    android.animation.ValueAnimator createNewAppBounceAnimation(android.view.View,int) -> a
    void bindSearchablesChanged() -> R
    void bindAllApplications(java.util.ArrayList) -> c
    void bindAppsUpdated(java.util.ArrayList) -> d
    void bindComponentsRemoved(java.util.ArrayList,java.util.ArrayList) -> a
    void bindPackagesUpdated(java.util.ArrayList) -> e
    int mapConfigurationOriActivityInfoOri(int) -> e
    boolean isRotationEnabled() -> S
    void lockScreenOrientation() -> T
    void unlockScreenOrientation(boolean) -> i
    com.phonemetra.turbo.launcher.AppsCustomizePagedView$SortMode getAppsCustomizeContentSortMode() -> U
    boolean shouldShowSearchBar() -> V
    boolean shouldHideWorkspaceIconLables() -> W
    java.lang.String getWorkspaceTransitionEffect() -> X
    java.lang.String getAppsCustomizeTransitionEffect() -> Y
    void updateDynamicGrid() -> Z
    boolean shouldRestart() -> ao
    com.phonemetra.turbo.launcher.Workspace access$0(com.phonemetra.turbo.launcher.Launcher) -> a
    android.view.View access$1(com.phonemetra.turbo.launcher.Launcher) -> b
    com.phonemetra.turbo.launcher.SearchDropTargetBar access$2(com.phonemetra.turbo.launcher.Launcher) -> c
    void access$3(com.phonemetra.turbo.launcher.Launcher,boolean) -> a
    com.phonemetra.turbo.launcher.DragLayer access$4(com.phonemetra.turbo.launcher.Launcher) -> d
    void access$5(com.phonemetra.turbo.launcher.Launcher) -> e
    com.phonemetra.turbo.launcher.AppsCustomizeLayout access$6(com.phonemetra.turbo.launcher.Launcher) -> f
    com.phonemetra.turbo.launcher.ItemInfo access$7(com.phonemetra.turbo.launcher.Launcher) -> g
    java.util.HashMap access$8(com.phonemetra.turbo.launcher.Launcher) -> h
    void access$9(com.phonemetra.turbo.launcher.Launcher,long) -> a
    java.util.ArrayList access$10(com.phonemetra.turbo.launcher.Launcher) -> i
    void access$11(com.phonemetra.turbo.launcher.Launcher,java.util.ArrayList) -> a
    void access$12(com.phonemetra.turbo.launcher.Launcher) -> j
    void access$13(android.content.Context,com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration) -> a
    void access$14(com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration) -> a
    void access$15(com.phonemetra.turbo.launcher.Launcher) -> k
    void access$16(android.content.Context,com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration) -> b
    void access$17(com.phonemetra.turbo.launcher.Launcher,int,int) -> a
    void access$18(com.phonemetra.turbo.launcher.Launcher,int,long,long,android.appwidget.AppWidgetHostView,android.appwidget.AppWidgetProviderInfo) -> a
    int[] $SWITCH_TABLE$com$phonemetra$turbo$launcher$AppsCustomizePagedView$SortMode() -> aa
    com.phonemetra.turbo.launcher.AppsCustomizePagedView access$20(com.phonemetra.turbo.launcher.Launcher) -> l
    com.phonemetra.turbo.launcher.LauncherAppWidgetHost access$21(com.phonemetra.turbo.launcher.Launcher) -> m
    java.lang.Runnable access$22(com.phonemetra.turbo.launcher.Launcher) -> n
    android.widget.ImageView access$23(com.phonemetra.turbo.launcher.Launcher) -> o
    void access$24(com.phonemetra.turbo.launcher.Launcher,android.view.View,float) -> a
    void access$25(com.phonemetra.turbo.launcher.Launcher,android.view.View,boolean,boolean) -> a
    android.animation.AnimatorSet access$26(com.phonemetra.turbo.launcher.Launcher) -> p
    void access$27(com.phonemetra.turbo.launcher.Launcher,android.view.View,float) -> b
    void access$28(com.phonemetra.turbo.launcher.Launcher,android.view.View,boolean,boolean) -> b
    int access$29() -> ab
com.phonemetra.turbo.launcher.Launcher$1 -> com.phonemetra.turbo.launcher.ei:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$10 -> com.phonemetra.turbo.launcher.ej:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    int val$resultCode -> b
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$11 -> com.phonemetra.turbo.launcher.ek:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$12 -> com.phonemetra.turbo.launcher.el:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    int val$result -> b
    int val$appWidgetId -> c
    com.phonemetra.turbo.launcher.CellLayout val$dropLayout -> d
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$13 -> com.phonemetra.turbo.launcher.em:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    int val$appWidgetId -> b
    android.appwidget.AppWidgetHostView val$layout -> c
    int val$resultCode -> d
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$14 -> com.phonemetra.turbo.launcher.en:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
com.phonemetra.turbo.launcher.Launcher$15 -> com.phonemetra.turbo.launcher.eo:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    com.phonemetra.turbo.launcher.PagedView val$pagedView -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
com.phonemetra.turbo.launcher.Launcher$16 -> com.phonemetra.turbo.launcher.ep:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    int val$appWidgetId -> b
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.Launcher$17 -> com.phonemetra.turbo.launcher.eq:
    boolean mStarted -> b
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void onDraw() -> onDraw
    com.phonemetra.turbo.launcher.Launcher access$0(com.phonemetra.turbo.launcher.Launcher$17) -> a
com.phonemetra.turbo.launcher.Launcher$17$1 -> com.phonemetra.turbo.launcher.er:
    com.phonemetra.turbo.launcher.Launcher$17 this$1 -> a
    android.view.ViewTreeObserver$OnDrawListener val$listener -> b
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$18 -> com.phonemetra.turbo.launcher.es:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$19 -> com.phonemetra.turbo.launcher.et:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.phonemetra.turbo.launcher.Launcher$2 -> com.phonemetra.turbo.launcher.eu:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
com.phonemetra.turbo.launcher.Launcher$20 -> com.phonemetra.turbo.launcher.ev:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    com.phonemetra.turbo.launcher.CellLayout val$cl -> b
    com.phonemetra.turbo.launcher.FolderIcon val$fi -> c
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.Launcher$21 -> com.phonemetra.turbo.launcher.ew:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    android.view.View val$fromView -> b
    com.phonemetra.turbo.launcher.AppsCustomizeLayout val$toView -> c
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.Launcher$22 -> com.phonemetra.turbo.launcher.ex:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    com.phonemetra.turbo.launcher.AppsCustomizeLayout val$toView -> b
    android.view.View val$fromView -> c
    boolean val$animated -> d
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.Launcher$23 -> com.phonemetra.turbo.launcher.ey:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    android.animation.AnimatorSet val$stateAnimation -> b
    com.phonemetra.turbo.launcher.AppsCustomizeLayout val$toView -> c
    float val$scale -> d
    android.view.View val$fromView -> e
    boolean val$animated -> f
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$24 -> com.phonemetra.turbo.launcher.ez:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    java.lang.Runnable val$startAnimRunnable -> b
    com.phonemetra.turbo.launcher.AppsCustomizeLayout val$toView -> c
    void onGlobalLayout() -> onGlobalLayout
com.phonemetra.turbo.launcher.Launcher$25 -> com.phonemetra.turbo.launcher.fa:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    android.view.View val$fromView -> b
    android.view.View val$toView -> c
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.Launcher$26 -> com.phonemetra.turbo.launcher.fb:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    android.view.View val$fromView -> b
    boolean val$animated -> c
    android.view.View val$toView -> d
    java.lang.Runnable val$onCompleteRunnable -> e
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.Launcher$27 -> com.phonemetra.turbo.launcher.fc:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    boolean val$successfulDrop -> b
    java.lang.Runnable val$onCompleteRunnable -> c
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$28 -> com.phonemetra.turbo.launcher.fd:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    java.util.ArrayList val$newScreens -> b
    java.util.ArrayList val$addNotAnimated -> c
    java.util.ArrayList val$addAnimated -> d
    java.util.ArrayList val$addedApps -> e
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$29 -> com.phonemetra.turbo.launcher.fe:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    java.util.ArrayList val$items -> b
    int val$s -> c
    int val$e -> d
    boolean val$forceAnimateIcons -> e
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$3 -> com.phonemetra.turbo.launcher.ff:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.phonemetra.turbo.launcher.Launcher$30 -> com.phonemetra.turbo.launcher.fg:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    android.animation.AnimatorSet val$anim -> b
    java.util.Collection val$bounceAnims -> c
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$31 -> com.phonemetra.turbo.launcher.fh:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    int val$newScreenIndex -> b
    java.lang.Runnable val$startBounceAnimRunnable -> c
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$32 -> com.phonemetra.turbo.launcher.fi:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    java.util.HashMap val$folders -> b
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$33 -> com.phonemetra.turbo.launcher.fj:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    com.phonemetra.turbo.launcher.LauncherAppWidgetInfo val$item -> b
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$34 -> com.phonemetra.turbo.launcher.fk:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    boolean val$upgradePath -> b
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$35 -> com.phonemetra.turbo.launcher.fl:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    java.util.ArrayList val$apps -> b
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$36 -> com.phonemetra.turbo.launcher.fm:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    java.util.ArrayList val$packageNames -> b
    java.util.ArrayList val$appInfos -> c
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$37 -> com.phonemetra.turbo.launcher.fn:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$4 -> com.phonemetra.turbo.launcher.fo:
    int scrollY -> a
    com.phonemetra.turbo.launcher.Launcher this$0 -> b
com.phonemetra.turbo.launcher.Launcher$5 -> com.phonemetra.turbo.launcher.fp:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.phonemetra.turbo.launcher.Launcher$6 -> com.phonemetra.turbo.launcher.fq:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.phonemetra.turbo.launcher.Launcher$6$1 -> com.phonemetra.turbo.launcher.fr:
    com.phonemetra.turbo.launcher.Launcher$6 this$1 -> a
    android.view.View val$v -> b
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$7 -> com.phonemetra.turbo.launcher.fs:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Launcher$8 -> com.phonemetra.turbo.launcher.ft:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.Launcher$9 -> com.phonemetra.turbo.launcher.fu:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration val$localeConfiguration -> b
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.Launcher$AppWidgetResetObserver -> com.phonemetra.turbo.launcher.fv:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void onChange(boolean) -> onChange
com.phonemetra.turbo.launcher.Launcher$CloseSystemDialogsIntentReceiver -> com.phonemetra.turbo.launcher.fw:
    com.phonemetra.turbo.launcher.Launcher this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.phonemetra.turbo.launcher.Launcher$CustomContentCallbacks -> com.phonemetra.turbo.launcher.fx:
    void onShow() -> a
    void onHide() -> b
    void onScrollProgressChanged(float) -> a
com.phonemetra.turbo.launcher.Launcher$LocaleConfiguration -> com.phonemetra.turbo.launcher.fy:
    java.lang.String locale -> a
    int mcc -> b
    int mnc -> c
com.phonemetra.turbo.launcher.Launcher$PendingAddArguments -> com.phonemetra.turbo.launcher.fz:
    int requestCode -> a
    android.content.Intent intent -> b
    long container -> c
    long screenId -> d
    int cellX -> e
    int cellY -> f
com.phonemetra.turbo.launcher.Launcher$QSBScroller -> com.phonemetra.turbo.launcher.ga:
com.phonemetra.turbo.launcher.Launcher$State -> com.phonemetra.turbo.launcher.gb:
    com.phonemetra.turbo.launcher.Launcher$State NONE -> a
    com.phonemetra.turbo.launcher.Launcher$State WORKSPACE -> b
    com.phonemetra.turbo.launcher.Launcher$State APPS_CUSTOMIZE -> c
    com.phonemetra.turbo.launcher.Launcher$State APPS_CUSTOMIZE_SPRING_LOADED -> d
    com.phonemetra.turbo.launcher.Launcher$State[] ENUM$VALUES -> e
    com.phonemetra.turbo.launcher.Launcher$State[] values() -> values
    com.phonemetra.turbo.launcher.Launcher$State valueOf(java.lang.String) -> valueOf
com.phonemetra.turbo.launcher.LauncherAnimUtils -> com.phonemetra.turbo.launcher.gc:
    java.util.WeakHashMap sAnimators -> a
    android.animation.Animator$AnimatorListener sEndAnimListener -> b
    void cancelOnDestroyActivity(android.animation.Animator) -> a
    void startAnimationAfterNextDraw(android.animation.Animator,android.view.View) -> a
    void onDestroyActivity() -> a
    android.animation.AnimatorSet createAnimatorSet() -> b
    android.animation.ValueAnimator ofFloat(android.view.View,float[]) -> a
    android.animation.ObjectAnimator ofFloat(android.view.View,java.lang.String,float[]) -> a
    android.animation.ObjectAnimator ofPropertyValuesHolder(android.view.View,android.animation.PropertyValuesHolder[]) -> a
    android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.view.View,android.animation.PropertyValuesHolder[]) -> a
com.phonemetra.turbo.launcher.LauncherAnimUtils$1 -> com.phonemetra.turbo.launcher.gd:
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
com.phonemetra.turbo.launcher.LauncherAnimUtils$2 -> com.phonemetra.turbo.launcher.ge:
    boolean mStarted -> a
    android.animation.Animator val$animator -> b
    android.view.View val$view -> c
    void onDraw() -> onDraw
com.phonemetra.turbo.launcher.LauncherAnimUtils$2$1 -> com.phonemetra.turbo.launcher.gf:
    com.phonemetra.turbo.launcher.LauncherAnimUtils$2 this$1 -> a
    android.view.View val$view -> b
    android.view.ViewTreeObserver$OnDrawListener val$listener -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherAnimatorUpdateListener -> com.phonemetra.turbo.launcher.gg:
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
    void onAnimationUpdate(float,float) -> a
com.phonemetra.turbo.launcher.LauncherAppState -> com.phonemetra.turbo.launcher.gh:
    com.phonemetra.turbo.launcher.AppFilter mAppFilter -> a
    com.phonemetra.turbo.launcher.LauncherModel mModel -> b
    com.phonemetra.turbo.launcher.IconCache mIconCache -> c
    com.phonemetra.turbo.launcher.WidgetPreviewLoader$CacheDb mWidgetPreviewCacheDb -> d
    boolean mIsScreenLarge -> e
    float mScreenDensity -> f
    int mLongPressTimeout -> g
    boolean mWallpaperChangedSinceLastCheck -> h
    java.lang.ref.WeakReference sLauncherProvider -> i
    android.content.Context sContext -> j
    com.phonemetra.turbo.launcher.LauncherAppState INSTANCE -> k
    com.phonemetra.turbo.launcher.DynamicGrid mDynamicGrid -> l
    android.database.ContentObserver mFavoritesObserver -> m
    com.phonemetra.turbo.launcher.LauncherAppState getInstance() -> a
    com.phonemetra.turbo.launcher.LauncherAppState getInstanceNoCreate() -> b
    android.content.Context getContext() -> c
    void setApplicationContext(android.content.Context) -> a
    void recreateWidgetPreviewDb() -> d
    void onTerminate() -> e
    com.phonemetra.turbo.launcher.LauncherModel setLauncher(com.phonemetra.turbo.launcher.Launcher) -> a
    com.phonemetra.turbo.launcher.IconCache getIconCache() -> f
    com.phonemetra.turbo.launcher.LauncherModel getModel() -> g
    boolean shouldShowAppOrWidgetProvider(android.content.ComponentName) -> a
    com.phonemetra.turbo.launcher.WidgetPreviewLoader$CacheDb getWidgetPreviewCacheDb() -> h
    void setLauncherProvider(com.phonemetra.turbo.launcher.LauncherProvider) -> a
    com.phonemetra.turbo.launcher.LauncherProvider getLauncherProvider() -> i
    java.lang.String getSharedPreferencesKey() -> j
    com.phonemetra.turbo.launcher.DeviceProfile initDynamicGrid(android.content.Context,int,int,int,int,int,int) -> a
    com.phonemetra.turbo.launcher.DynamicGrid getDynamicGrid() -> k
    boolean isScreenLarge() -> l
    boolean isScreenLarge(android.content.res.Resources) -> a
    boolean isScreenLandscape(android.content.Context) -> b
    float getScreenDensity() -> m
    int getLongPressTimeout() -> n
    boolean hasWallpaperChangedSinceLastCheck() -> o
    void onAvailableSizeChanged(com.phonemetra.turbo.launcher.DeviceProfile) -> a
    boolean isDisableAllApps() -> p
    com.phonemetra.turbo.launcher.LauncherModel access$0(com.phonemetra.turbo.launcher.LauncherAppState) -> a
com.phonemetra.turbo.launcher.LauncherAppState$1 -> com.phonemetra.turbo.launcher.gi:
    com.phonemetra.turbo.launcher.LauncherAppState this$0 -> a
    void onChange(boolean) -> onChange
com.phonemetra.turbo.launcher.LauncherAppWidgetHost -> com.phonemetra.turbo.launcher.gj:
    com.phonemetra.turbo.launcher.Launcher mLauncher -> a
    android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo) -> onCreateView
    void stopListening() -> stopListening
    void onProvidersChanged() -> onProvidersChanged
com.phonemetra.turbo.launcher.LauncherAppWidgetHostView -> com.phonemetra.turbo.launcher.gk:
    com.phonemetra.turbo.launcher.CheckLongPressHelper mLongPressHelper -> a
    android.view.LayoutInflater mInflater -> b
    android.content.Context mContext -> c
    int mPreviousOrientation -> d
    com.phonemetra.turbo.launcher.DragLayer mDragLayer -> e
    android.view.View getErrorView() -> getErrorView
    void updateAppWidget(android.widget.RemoteViews) -> updateAppWidget
    boolean orientationChangedSincedInflation() -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void cancelLongPress() -> cancelLongPress
    void onTouchComplete() -> a
    int getDescendantFocusability() -> getDescendantFocusability
com.phonemetra.turbo.launcher.LauncherAppWidgetInfo -> com.phonemetra.turbo.launcher.gl:
    int appWidgetId -> a
    android.content.ComponentName providerName -> b
    int minWidth -> c
    int minHeight -> d
    boolean mHasNotifiedInitialWidgetSizeChanged -> s
    android.appwidget.AppWidgetHostView hostView -> e
    void onAddToDatabase(android.content.ContentValues) -> a
    void onBindAppWidget(com.phonemetra.turbo.launcher.Launcher) -> a
    void notifyWidgetSizeChanged(com.phonemetra.turbo.launcher.Launcher) -> b
    java.lang.String toString() -> toString
    void unbind() -> d
com.phonemetra.turbo.launcher.LauncherApplication -> com.phonemetra.turbo.launcher.LauncherApplication:
    void onCreate() -> onCreate
    void onTerminate() -> onTerminate
com.phonemetra.turbo.launcher.LauncherBackupAgentHelper -> com.phonemetra.turbo.launcher.gm:
    android.app.backup.BackupManager sBackupManager -> a
    void dataChanged(android.content.Context) -> a
    void onDestroy() -> onDestroy
    void onCreate() -> onCreate
com.phonemetra.turbo.launcher.LauncherBackupHelper -> com.phonemetra.turbo.launcher.gn:
    android.graphics.Bitmap$CompressFormat IMAGE_FORMAT -> a
    android.app.backup.BackupManager sBackupManager -> b
    java.lang.String[] FAVORITE_PROJECTION -> c
    java.lang.String[] SCREEN_PROJECTION -> d
    com.phonemetra.turbo.launcher.IconCache mIconCache -> e
    android.content.Context mContext -> f
    boolean mRestoreEnabled -> g
    java.util.HashMap mWidgetMap -> h
    java.util.ArrayList mKeys -> i
    void dataChanged() -> a
    void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor) -> performBackup
    void restoreEntity(android.app.backup.BackupDataInputStream) -> restoreEntity
    void writeNewStateDescription(android.os.ParcelFileDescriptor) -> writeNewStateDescription
    void backupFavorites(com.phonemetra.turbo.launcher.backup.BackupProtos$Journal,android.app.backup.BackupDataOutput,com.phonemetra.turbo.launcher.backup.BackupProtos$Journal,java.util.ArrayList) -> a
    void restoreFavorite(com.phonemetra.turbo.launcher.backup.BackupProtos$Key,byte[],int,java.util.ArrayList) -> a
    void backupScreens(com.phonemetra.turbo.launcher.backup.BackupProtos$Journal,android.app.backup.BackupDataOutput,com.phonemetra.turbo.launcher.backup.BackupProtos$Journal,java.util.ArrayList) -> b
    void restoreScreen(com.phonemetra.turbo.launcher.backup.BackupProtos$Key,byte[],int,java.util.ArrayList) -> b
    void backupIcons(com.phonemetra.turbo.launcher.backup.BackupProtos$Journal,android.app.backup.BackupDataOutput,com.phonemetra.turbo.launcher.backup.BackupProtos$Journal,java.util.ArrayList) -> c
    void restoreIcon(com.phonemetra.turbo.launcher.backup.BackupProtos$Key,byte[],int,java.util.ArrayList) -> c
    void backupWidgets(com.phonemetra.turbo.launcher.backup.BackupProtos$Journal,android.app.backup.BackupDataOutput,com.phonemetra.turbo.launcher.backup.BackupProtos$Journal,java.util.ArrayList) -> d
    void restoreWidget(com.phonemetra.turbo.launcher.backup.BackupProtos$Key,byte[],int,java.util.ArrayList) -> d
    com.phonemetra.turbo.launcher.backup.BackupProtos$Key getKey(int,long) -> a
    com.phonemetra.turbo.launcher.backup.BackupProtos$Key getKey(int,java.lang.String) -> a
    java.lang.String keyToBackupKey(com.phonemetra.turbo.launcher.backup.BackupProtos$Key) -> a
    com.phonemetra.turbo.launcher.backup.BackupProtos$Key backupKeyToKey(java.lang.String) -> a
    java.lang.String getKeyName(com.phonemetra.turbo.launcher.backup.BackupProtos$Key) -> b
    java.lang.String geKeyType(com.phonemetra.turbo.launcher.backup.BackupProtos$Key) -> c
    long checkKey(com.phonemetra.turbo.launcher.backup.BackupProtos$Key) -> d
    byte[] packFavorite(android.database.Cursor) -> a
    android.content.ContentValues unpackFavorite(byte[],int,int) -> a
    byte[] packScreen(android.database.Cursor) -> b
    android.content.ContentValues unpackScreen(byte[],int,int) -> b
    byte[] packIcon(int,android.graphics.Bitmap) -> a
    com.phonemetra.turbo.launcher.backup.BackupProtos$Resource unpackIcon(byte[],int,int) -> c
    byte[] packWidget(int,com.phonemetra.turbo.launcher.WidgetPreviewLoader,com.phonemetra.turbo.launcher.IconCache,android.content.ComponentName) -> a
    com.phonemetra.turbo.launcher.backup.BackupProtos$Widget unpackWidget(byte[],int,int) -> d
    com.phonemetra.turbo.launcher.backup.BackupProtos$Journal readJournal(android.os.ParcelFileDescriptor) -> a
    void writeRowToBackup(com.phonemetra.turbo.launcher.backup.BackupProtos$Key,byte[],com.phonemetra.turbo.launcher.backup.BackupProtos$Journal,android.app.backup.BackupDataOutput) -> a
    java.util.Set getSavedIdsByType(int,com.phonemetra.turbo.launcher.backup.BackupProtos$Journal) -> a
    int removeDeletedKeysFromBackup(java.util.Set,android.app.backup.BackupDataOutput) -> a
    void writeJournal(android.os.ParcelFileDescriptor,com.phonemetra.turbo.launcher.backup.BackupProtos$Journal) -> a
    byte[] writeCheckedBytes(com.google.protobuf.nano.MessageNano) -> a
    byte[] readCheckedBytes(byte[],int,int) -> e
    android.appwidget.AppWidgetProviderInfo findAppWidgetProviderInfo(android.content.ComponentName) -> a
    boolean initializeIconCache() -> b
    boolean launcherIsReady() -> c
com.phonemetra.turbo.launcher.LauncherBackupHelper$KeyParsingException -> com.phonemetra.turbo.launcher.go:
    com.phonemetra.turbo.launcher.LauncherBackupHelper this$0 -> a
com.phonemetra.turbo.launcher.LauncherModel -> com.phonemetra.turbo.launcher.gp:
    boolean mAppsCanBeOnRemoveableStorage -> k
    boolean mOldContentProviderExists -> l
    com.phonemetra.turbo.launcher.LauncherAppState mApp -> m
    java.lang.Object mLock -> n
    com.phonemetra.turbo.launcher.DeferredHandler mHandler -> o
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask mLoaderTask -> p
    boolean mIsLoaderTaskRunning -> q
    boolean mTurboBoost -> r
    boolean mFlushingWorkerThread -> s
    android.os.HandlerThread sWorkerThread -> t
    android.os.Handler sWorker -> u
    boolean mWorkspaceLoaded -> v
    boolean mAllAppsLoaded -> w
    java.util.ArrayList mDeferredBindRunnables -> a
    java.lang.ref.WeakReference mCallbacks -> x
    com.phonemetra.turbo.launcher.AllAppsList mBgAllAppsList -> b
    java.lang.Object sBgLock -> c
    java.util.HashMap sBgItemsIdMap -> d
    java.util.ArrayList sBgWorkspaceItems -> e
    java.util.ArrayList sBgAppWidgets -> f
    java.util.HashMap sBgFolders -> g
    java.util.HashMap sBgDbIconCache -> h
    java.util.ArrayList sBgWorkspaceScreens -> i
    com.phonemetra.turbo.launcher.IconCache mIconCache -> y
    android.graphics.Bitmap mDefaultIcon -> z
    int mPreviousConfigMcc -> j
    void runOnMainThread(java.lang.Runnable) -> a
    void runOnMainThread(java.lang.Runnable,int) -> a
    void runOnWorkerThread(java.lang.Runnable) -> b
    boolean findNextAvailableIconSpaceInScreen(java.util.ArrayList,int[],long) -> a
    android.util.Pair findNextAvailableIconSpace(android.content.Context,java.lang.String,android.content.Intent,int,java.util.ArrayList) -> a
    void addAppsToAllApps(android.content.Context,java.util.ArrayList) -> a
    void addAndBindAddedWorkspaceApps(android.content.Context,java.util.ArrayList) -> b
    android.graphics.Bitmap getFallbackIcon() -> a
    void unbindItemInfosAndClearQueuedBindRunnables() -> b
    void unbindWorkspaceItemsOnMainThread() -> c
    void addOrMoveItemInDatabase(android.content.Context,com.phonemetra.turbo.launcher.ItemInfo,long,long,int,int) -> a
    void checkItemInfoLocked(long,com.phonemetra.turbo.launcher.ItemInfo,java.lang.StackTraceElement[]) -> a
    void checkItemInfo(com.phonemetra.turbo.launcher.ItemInfo) -> a
    void updateItemInDatabaseHelper(android.content.Context,android.content.ContentValues,com.phonemetra.turbo.launcher.ItemInfo,java.lang.String) -> a
    void updateItemsInDatabaseHelper(android.content.Context,java.util.ArrayList,java.util.ArrayList,java.lang.String) -> a
    void updateItemArrays(com.phonemetra.turbo.launcher.ItemInfo,long,java.lang.StackTraceElement[]) -> a
    void flushWorkerThread() -> d
    void moveItemInDatabase(android.content.Context,com.phonemetra.turbo.launcher.ItemInfo,long,long,int,int) -> b
    void moveItemsInDatabase(android.content.Context,java.util.ArrayList,long,int) -> a
    void modifyItemInDatabase(android.content.Context,com.phonemetra.turbo.launcher.ItemInfo,long,long,int,int,int,int) -> a
    void updateItemInDatabase(android.content.Context,com.phonemetra.turbo.launcher.ItemInfo) -> a
    boolean shortcutExists(android.content.Context,java.lang.String,android.content.Intent) -> a
    boolean appWasRestored(android.content.Context,android.content.Intent) -> a
    java.util.ArrayList getItemsInLocalCoordinates(android.content.Context) -> a
    com.phonemetra.turbo.launcher.FolderInfo getFolderById(android.content.Context,java.util.HashMap,long) -> a
    void addItemToDatabase(android.content.Context,com.phonemetra.turbo.launcher.ItemInfo,long,long,int,int,boolean) -> a
    boolean hasAllAppsShortcut() -> e
    boolean hasMultipleAllAppsShortcuts() -> f
    com.phonemetra.turbo.launcher.ItemInfo addAllAppsShortcutIfNecessary() -> o
    void deleteItemFromDatabase(android.content.Context,com.phonemetra.turbo.launcher.ItemInfo) -> b
    void updateWorkspaceScreenOrder(android.content.Context,java.util.ArrayList) -> c
    void deleteFolderContentsFromDatabase(android.content.Context,com.phonemetra.turbo.launcher.FolderInfo) -> a
    void initialize(com.phonemetra.turbo.launcher.LauncherModel$Callbacks) -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void forceReload() -> g
    void resetLoadedState(boolean,boolean) -> a
    void startLoaderFromBackground() -> h
    boolean stopLoaderLocked() -> p
    void startLoader(boolean,int) -> a
    void startLoader(boolean,int,int) -> a
    void bindRemainingSynchronousPages() -> i
    void stopLoader() -> j
    java.util.TreeMap loadWorkspaceScreensDb(android.content.Context) -> d
    boolean isLoadingWorkspace() -> k
    void enqueuePackageUpdated(com.phonemetra.turbo.launcher.LauncherModel$PackageUpdatedTask) -> a
    java.util.ArrayList getSortedWidgetsAndShortcuts(android.content.Context) -> b
    boolean isPackageDisabled(android.content.pm.PackageManager,java.lang.String) -> b
    boolean isValidPackageComponent(android.content.pm.PackageManager,android.content.ComponentName) -> a
    com.phonemetra.turbo.launcher.ShortcutInfo getRestoredItemInfo(android.database.Cursor,int,android.content.Intent) -> a
    android.content.Intent getRestoredItemIntent(android.database.Cursor,android.content.Context,android.content.Intent) -> a
    com.phonemetra.turbo.launcher.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context) -> a
    com.phonemetra.turbo.launcher.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context,android.database.Cursor,int,int,java.util.HashMap) -> a
    java.util.ArrayList filterItemInfos(java.util.Collection,com.phonemetra.turbo.launcher.LauncherModel$ItemInfoFilter) -> a
    java.util.ArrayList getItemInfoForPackageName(java.lang.String) -> a
    java.util.ArrayList getItemInfoForComponentName(android.content.ComponentName) -> a
    boolean isShortcutInfoUpdateable(com.phonemetra.turbo.launcher.ItemInfo) -> b
    com.phonemetra.turbo.launcher.ShortcutInfo getShortcutInfo(android.database.Cursor,android.content.Context,int) -> a
    com.phonemetra.turbo.launcher.ShortcutInfo getShortcutInfo(android.database.Cursor,android.content.Context,int,int,int,int,int) -> a
    android.graphics.Bitmap getIconFromCursor(android.database.Cursor,int,android.content.Context) -> a
    com.phonemetra.turbo.launcher.ShortcutInfo infoFromShortcutIntent(android.content.Context,android.content.Intent,android.graphics.Bitmap) -> a
    boolean queueIconToBeChecked(java.util.HashMap,com.phonemetra.turbo.launcher.ShortcutInfo,android.database.Cursor,int) -> a
    void updateSavedIcon(android.content.Context,com.phonemetra.turbo.launcher.ShortcutInfo,byte[]) -> a
    com.phonemetra.turbo.launcher.FolderInfo findOrMakeFolder(java.util.HashMap,long) -> b
    java.util.Comparator getAppNameComparator() -> l
    java.util.Comparator getAppLaunchCountComparator(com.phonemetra.turbo.launcher.Stats) -> a
    java.util.Comparator getAppInstallTimeComparator() -> m
    android.content.ComponentName getComponentNameFromResolveInfo(android.content.pm.ResolveInfo) -> a
    void access$0(com.phonemetra.turbo.launcher.LauncherModel,boolean) -> a
    boolean access$1(com.phonemetra.turbo.launcher.LauncherModel) -> a
    void access$2(com.phonemetra.turbo.launcher.LauncherModel,boolean) -> b
    com.phonemetra.turbo.launcher.DeferredHandler access$3(com.phonemetra.turbo.launcher.LauncherModel) -> b
    boolean access$4(com.phonemetra.turbo.launcher.LauncherModel) -> c
    boolean access$5(com.phonemetra.turbo.launcher.LauncherModel) -> d
    java.lang.Object access$6(com.phonemetra.turbo.launcher.LauncherModel) -> e
    boolean access$7(com.phonemetra.turbo.launcher.LauncherModel) -> f
    void access$8(com.phonemetra.turbo.launcher.LauncherModel,boolean) -> c
    boolean access$9(com.phonemetra.turbo.launcher.LauncherModel) -> g
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask access$10(com.phonemetra.turbo.launcher.LauncherModel) -> h
    void access$11(com.phonemetra.turbo.launcher.LauncherModel,com.phonemetra.turbo.launcher.LauncherModel$LoaderTask) -> a
    java.lang.ref.WeakReference access$12(com.phonemetra.turbo.launcher.LauncherModel) -> i
    com.phonemetra.turbo.launcher.LauncherAppState access$13(com.phonemetra.turbo.launcher.LauncherModel) -> j
    java.util.ArrayList access$14(com.phonemetra.turbo.launcher.LauncherModel,android.content.ComponentName) -> a
    boolean access$15(com.phonemetra.turbo.launcher.LauncherModel) -> k
    android.content.Intent access$16(com.phonemetra.turbo.launcher.LauncherModel,android.database.Cursor,android.content.Context,android.content.Intent) -> a
    com.phonemetra.turbo.launcher.ShortcutInfo access$17(com.phonemetra.turbo.launcher.LauncherModel,android.database.Cursor,android.content.Context,int) -> a
    com.phonemetra.turbo.launcher.ShortcutInfo access$18(com.phonemetra.turbo.launcher.LauncherModel,android.database.Cursor,android.content.Context,int,int,int,int,int) -> a
    com.phonemetra.turbo.launcher.FolderInfo access$19(java.util.HashMap,long) -> a
    com.phonemetra.turbo.launcher.ItemInfo access$20(com.phonemetra.turbo.launcher.LauncherModel) -> l
    java.util.TreeMap access$21(android.content.Context) -> c
    void access$22(com.phonemetra.turbo.launcher.LauncherModel,java.lang.Runnable,int) -> a
    void access$23(com.phonemetra.turbo.launcher.LauncherModel,boolean) -> d
    android.os.HandlerThread access$24() -> n
    com.phonemetra.turbo.launcher.IconCache access$25(com.phonemetra.turbo.launcher.LauncherModel) -> m
    boolean access$26(android.content.pm.PackageManager,java.lang.String) -> a
    java.util.ArrayList access$27(com.phonemetra.turbo.launcher.LauncherModel,java.lang.String) -> a
    void access$28(com.phonemetra.turbo.launcher.LauncherModel,java.lang.Runnable) -> a
    void access$29(com.phonemetra.turbo.launcher.LauncherModel,boolean) -> e
com.phonemetra.turbo.launcher.LauncherModel$1 -> com.phonemetra.turbo.launcher.gq:
    com.phonemetra.turbo.launcher.LauncherModel this$0 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$restoredAppsFinal -> c
    java.util.ArrayList val$allAppsApps -> d
    void run() -> run
    com.phonemetra.turbo.launcher.LauncherModel access$0(com.phonemetra.turbo.launcher.LauncherModel$1) -> a
com.phonemetra.turbo.launcher.LauncherModel$1$1 -> com.phonemetra.turbo.launcher.gr:
    com.phonemetra.turbo.launcher.LauncherModel$1 this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$restoredAppsFinal -> c
    java.util.ArrayList val$allAppsApps -> d
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$10 -> com.phonemetra.turbo.launcher.gs:
    com.phonemetra.turbo.launcher.LauncherModel this$0 -> a
    android.net.Uri val$uri -> b
    java.util.ArrayList val$screensCopy -> c
    android.content.ContentResolver val$cr -> d
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$11 -> com.phonemetra.turbo.launcher.gt:
    android.content.ContentResolver val$cr -> a
    com.phonemetra.turbo.launcher.FolderInfo val$info -> b
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$12 -> com.phonemetra.turbo.launcher.gu:
    com.phonemetra.turbo.launcher.LauncherModel this$0 -> a
    java.lang.String val$pn -> b
    boolean filterItem(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.ItemInfo,android.content.ComponentName) -> a
com.phonemetra.turbo.launcher.LauncherModel$13 -> com.phonemetra.turbo.launcher.gv:
    com.phonemetra.turbo.launcher.LauncherModel this$0 -> a
    android.content.ComponentName val$cname -> b
    boolean filterItem(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.ItemInfo,android.content.ComponentName) -> a
com.phonemetra.turbo.launcher.LauncherModel$14 -> com.phonemetra.turbo.launcher.gw:
    java.text.Collator val$collator -> a
    int compare(com.phonemetra.turbo.launcher.AppInfo,com.phonemetra.turbo.launcher.AppInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.LauncherModel$15 -> com.phonemetra.turbo.launcher.gx:
    com.phonemetra.turbo.launcher.Stats val$stats -> a
    java.text.Collator val$collator -> b
    int compare(com.phonemetra.turbo.launcher.AppInfo,com.phonemetra.turbo.launcher.AppInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.LauncherModel$16 -> com.phonemetra.turbo.launcher.gy:
    java.text.Collator val$collator -> a
    int compare(com.phonemetra.turbo.launcher.AppInfo,com.phonemetra.turbo.launcher.AppInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.LauncherModel$2 -> com.phonemetra.turbo.launcher.gz:
    com.phonemetra.turbo.launcher.LauncherModel this$0 -> a
    android.content.Context val$context -> b
    java.util.ArrayList val$workspaceApps -> c
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$callbacks -> d
    void run() -> run
    com.phonemetra.turbo.launcher.LauncherModel access$0(com.phonemetra.turbo.launcher.LauncherModel$2) -> a
com.phonemetra.turbo.launcher.LauncherModel$2$1 -> com.phonemetra.turbo.launcher.ha:
    com.phonemetra.turbo.launcher.LauncherModel$2 this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$addedShortcutsFinal -> c
    java.util.ArrayList val$addedWorkspaceScreensFinal -> d
    java.util.ArrayList val$restoredAppsFinal -> e
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$3 -> com.phonemetra.turbo.launcher.hb:
    com.phonemetra.turbo.launcher.LauncherModel this$0 -> a
    java.util.ArrayList val$tmpWorkspaceItems -> b
    java.util.ArrayList val$tmpAppWidgets -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$4 -> com.phonemetra.turbo.launcher.hc:
    long val$itemId -> a
    com.phonemetra.turbo.launcher.ItemInfo val$item -> b
    java.lang.StackTraceElement[] val$stackTrace -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$5 -> com.phonemetra.turbo.launcher.hd:
    android.content.ContentResolver val$cr -> a
    android.net.Uri val$uri -> b
    android.content.ContentValues val$values -> c
    com.phonemetra.turbo.launcher.ItemInfo val$item -> d
    long val$itemId -> e
    java.lang.StackTraceElement[] val$stackTrace -> f
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$6 -> com.phonemetra.turbo.launcher.he:
    java.util.ArrayList val$items -> a
    java.util.ArrayList val$valuesList -> b
    java.lang.StackTraceElement[] val$stackTrace -> c
    android.content.ContentResolver val$cr -> d
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$7 -> com.phonemetra.turbo.launcher.hf:
    com.phonemetra.turbo.launcher.LauncherModel this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$8 -> com.phonemetra.turbo.launcher.hg:
    android.content.ContentResolver val$cr -> a
    boolean val$notify -> b
    android.content.ContentValues val$values -> c
    com.phonemetra.turbo.launcher.ItemInfo val$item -> d
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$9 -> com.phonemetra.turbo.launcher.hh:
    android.content.ContentResolver val$cr -> a
    android.net.Uri val$uriToDelete -> b
    com.phonemetra.turbo.launcher.ItemInfo val$item -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$Callbacks -> com.phonemetra.turbo.launcher.hi:
    boolean setLoadOnResume() -> O
    int getCurrentWorkspaceScreen() -> P
    void startBinding() -> Q
    void bindItems(java.util.ArrayList,int,int,boolean) -> a
    void bindScreens(java.util.ArrayList) -> a
    void bindFolders(java.util.HashMap) -> a
    void finishBindingItems(boolean) -> h
    void bindAppWidget(com.phonemetra.turbo.launcher.LauncherAppWidgetInfo) -> b
    void bindAllApplications(java.util.ArrayList) -> c
    void bindAppsAdded(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> a
    void bindAppsUpdated(java.util.ArrayList) -> d
    void bindComponentsRemoved(java.util.ArrayList,java.util.ArrayList) -> a
    void bindPackagesUpdated(java.util.ArrayList) -> e
    void bindSearchablesChanged() -> R
    void onPageBoundSynchronously(int) -> c
com.phonemetra.turbo.launcher.LauncherModel$ItemInfoFilter -> com.phonemetra.turbo.launcher.hj:
    boolean filterItem(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.ItemInfo,android.content.ComponentName) -> a
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask -> com.phonemetra.turbo.launcher.hk:
    android.content.Context mContext -> b
    boolean mIsLaunching -> c
    boolean mIsLoadingAndBindingWorkspace -> d
    boolean mStopped -> e
    boolean mLoadAndBindStepFinished -> f
    int mFlags -> g
    java.util.HashMap mLabelCache -> h
    com.phonemetra.turbo.launcher.LauncherModel this$0 -> a
    boolean isLaunching() -> a
    boolean isLoadingWorkspace() -> b
    boolean loadAndBindWorkspace() -> d
    void waitForIdle() -> e
    void runBindSynchronousPage(int) -> a
    void run() -> run
    void stopLocked() -> c
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks tryGetCallbacks(com.phonemetra.turbo.launcher.LauncherModel$Callbacks) -> a
    void verifyApplications() -> f
    boolean checkItemPlacement(java.util.HashMap,com.phonemetra.turbo.launcher.ItemInfo,java.util.concurrent.atomic.AtomicBoolean) -> a
    void clearSBgDataStructures() -> g
    boolean loadWorkspace() -> h
    void filterCurrentWorkspaceItems(long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> a
    void filterCurrentAppWidgets(long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> b
    void filterCurrentFolders(long,java.util.HashMap,java.util.HashMap,java.util.HashMap,java.util.HashMap) -> a
    void sortWorkspaceItemsSpatially(java.util.ArrayList) -> a
    void bindWorkspaceScreens(com.phonemetra.turbo.launcher.LauncherModel$Callbacks,java.util.ArrayList) -> a
    void removeHiddenAppsWorkspaceItems(java.util.ArrayList,java.util.ArrayList,java.util.HashMap) -> a
    void bindWorkspaceItems(com.phonemetra.turbo.launcher.LauncherModel$Callbacks,java.util.ArrayList,java.util.ArrayList,java.util.HashMap,java.util.ArrayList) -> a
    void bindWorkspace(int,boolean) -> a
    void loadAndBindAllApps() -> i
    void onlyBindAllApps() -> j
    void loadAllApps() -> k
    void access$0(com.phonemetra.turbo.launcher.LauncherModel$LoaderTask,boolean) -> a
    void access$1(com.phonemetra.turbo.launcher.LauncherModel$LoaderTask,boolean) -> b
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$1 -> com.phonemetra.turbo.launcher.hl:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$10 -> com.phonemetra.turbo.launcher.hm:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$oldCallbacks -> b
    boolean val$isUpgradePath -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$11 -> com.phonemetra.turbo.launcher.hn:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.ArrayList val$list -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$12 -> com.phonemetra.turbo.launcher.ho:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.ArrayList val$added -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$2 -> com.phonemetra.turbo.launcher.hp:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    int compare(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$3 -> com.phonemetra.turbo.launcher.hq:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.DeviceProfile val$grid -> b
    int compare(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$4 -> com.phonemetra.turbo.launcher.hr:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.ArrayList val$orderedScreens -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$5 -> com.phonemetra.turbo.launcher.hs:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.ArrayList val$workspaceItems -> c
    int val$start -> d
    int val$chunkSize -> e
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$6 -> com.phonemetra.turbo.launcher.ht:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.HashMap val$folders -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$7 -> com.phonemetra.turbo.launcher.hu:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$oldCallbacks -> b
    com.phonemetra.turbo.launcher.LauncherAppWidgetInfo val$widget -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$8 -> com.phonemetra.turbo.launcher.hv:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$oldCallbacks -> b
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$LoaderTask$9 -> com.phonemetra.turbo.launcher.hw:
    com.phonemetra.turbo.launcher.LauncherModel$LoaderTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$oldCallbacks -> b
    int val$currentScreen -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$PackageUpdatedTask -> com.phonemetra.turbo.launcher.hx:
    int mOp -> a
    java.lang.String[] mPackages -> b
    com.phonemetra.turbo.launcher.LauncherModel this$0 -> c
    void run() -> run
    com.phonemetra.turbo.launcher.LauncherModel access$0(com.phonemetra.turbo.launcher.LauncherModel$PackageUpdatedTask) -> a
com.phonemetra.turbo.launcher.LauncherModel$PackageUpdatedTask$1 -> com.phonemetra.turbo.launcher.hy:
    com.phonemetra.turbo.launcher.LauncherModel$PackageUpdatedTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$modifiedFinal -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$PackageUpdatedTask$2 -> com.phonemetra.turbo.launcher.hz:
    com.phonemetra.turbo.launcher.LauncherModel$PackageUpdatedTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$removedPackageNames -> c
    java.util.ArrayList val$removedApps -> d
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$PackageUpdatedTask$3 -> com.phonemetra.turbo.launcher.ia:
    com.phonemetra.turbo.launcher.LauncherModel$PackageUpdatedTask this$1 -> a
    com.phonemetra.turbo.launcher.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$widgetsAndShortcuts -> c
    void run() -> run
com.phonemetra.turbo.launcher.LauncherModel$ShortcutNameComparator -> com.phonemetra.turbo.launcher.ib:
    java.text.Collator mCollator -> a
    android.content.pm.PackageManager mPackageManager -> b
    java.util.HashMap mLabelCache -> c
    int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.LauncherModel$WidgetAndShortcutNameComparator -> com.phonemetra.turbo.launcher.ic:
    java.text.Collator mCollator -> a
    android.content.pm.PackageManager mPackageManager -> b
    java.util.HashMap mLabelCache -> c
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.LauncherPreferencesBackupHelper -> com.phonemetra.turbo.launcher.id:
    boolean mRestoreEnabled -> a
    void restoreEntity(android.app.backup.BackupDataInputStream) -> restoreEntity
    void writeNewStateDescription(android.os.ParcelFileDescriptor) -> writeNewStateDescription
com.phonemetra.turbo.launcher.LauncherProvider -> com.phonemetra.turbo.launcher.LauncherProvider:
    android.net.Uri CONTENT_APPWIDGET_RESET_URI -> a
    com.phonemetra.turbo.launcher.LauncherProvider$DatabaseHelper mOpenHelper -> b
    boolean sJustLoadedFromOldDb -> c
    boolean onCreate() -> onCreate
    java.lang.String getType(android.net.Uri) -> getType
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    long dbInsertAndCheck(com.phonemetra.turbo.launcher.LauncherProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,android.content.ContentValues) -> b
    void deleteId(android.database.sqlite.SQLiteDatabase,long) -> b
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int bulkInsert(android.net.Uri,android.content.ContentValues[]) -> bulkInsert
    android.content.ContentProviderResult[] applyBatch(java.util.ArrayList) -> applyBatch
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    void sendNotify(android.net.Uri) -> a
    void addModifiedTime(android.content.ContentValues) -> a
    long generateNewItemId() -> a
    void updateMaxItemId(long) -> a
    long generateNewScreenId() -> b
    void updateMaxScreenId(long) -> b
    boolean justLoadedOldDb() -> c
    void loadDefaultFavoritesIfNecessary(int) -> a
    void migrateLauncher2Shortcuts() -> d
    int getDefaultWorkspaceResourceId() -> f
    boolean shouldImportLauncher2Database(android.content.Context) -> b
    void deleteDatabase() -> e
    java.lang.String buildOrWhereString(java.lang.String,int[]) -> a
    boolean access$0(android.content.Context) -> a
    long access$1(com.phonemetra.turbo.launcher.LauncherProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,android.content.ContentValues) -> a
    void access$2(boolean) -> a
    void access$3(android.database.sqlite.SQLiteDatabase,long) -> a
com.phonemetra.turbo.launcher.LauncherProvider$ContentValuesCallback -> com.phonemetra.turbo.launcher.ie:
    void onRow(android.content.ContentValues) -> a
com.phonemetra.turbo.launcher.LauncherProvider$DatabaseHelper -> com.phonemetra.turbo.launcher.if:
    android.content.Context mContext -> a
    android.appwidget.AppWidgetHost mAppWidgetHost -> b
    long mMaxItemId -> c
    long mMaxScreenId -> d
    boolean mNewDbCreated -> e
    void sendAppWidgetResetNotify() -> c
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void addWorkspacesTable(android.database.sqlite.SQLiteDatabase) -> a
    void setFlagJustLoadedOldDb() -> d
    void setFlagEmptyDbCreated() -> e
    long upgradeLauncherDb_permuteScreens(long) -> c
    boolean convertDatabase(android.database.sqlite.SQLiteDatabase,android.net.Uri,com.phonemetra.turbo.launcher.LauncherProvider$ContentValuesCallback,boolean) -> a
    int copyFromCursor(android.database.sqlite.SQLiteDatabase,android.database.Cursor,com.phonemetra.turbo.launcher.LauncherProvider$ContentValuesCallback) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    boolean updateContactsShortcuts(android.database.sqlite.SQLiteDatabase) -> b
    void normalizeIcons(android.database.sqlite.SQLiteDatabase) -> c
    long generateNewItemId() -> a
    void updateMaxItemId(long) -> a
    void checkId(java.lang.String,android.content.ContentValues) -> a
    long initializeMaxItemId(android.database.sqlite.SQLiteDatabase) -> d
    long generateNewScreenId() -> b
    void updateMaxScreenId(long) -> b
    long initializeMaxScreenId(android.database.sqlite.SQLiteDatabase) -> e
    void convertWidgets(android.database.sqlite.SQLiteDatabase) -> f
    void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String) -> a
    int loadFavorites(android.database.sqlite.SQLiteDatabase,int) -> a
    long addAppShortcut(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,android.content.res.TypedArray,android.content.pm.PackageManager,android.content.Intent) -> a
    long addFolder(android.database.sqlite.SQLiteDatabase,android.content.ContentValues) -> a
    android.content.ComponentName getSearchWidgetProvider() -> f
    android.content.ComponentName getProviderInPackage(java.lang.String) -> a
    boolean addSearchWidget(android.database.sqlite.SQLiteDatabase,android.content.ContentValues) -> b
    boolean addClockWidget(android.database.sqlite.SQLiteDatabase,android.content.ContentValues) -> c
    boolean addAppWidget(android.content.res.XmlResourceParser,android.util.AttributeSet,int,android.database.sqlite.SQLiteDatabase,android.content.ContentValues,android.content.res.TypedArray,android.content.pm.PackageManager) -> a
    boolean addAppWidget(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,android.content.ComponentName,int,int,android.os.Bundle) -> a
    long addUriShortcut(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,android.content.res.TypedArray) -> a
    void migrateLauncher2Shortcuts(android.database.sqlite.SQLiteDatabase,android.net.Uri) -> a
    long access$0(com.phonemetra.turbo.launcher.LauncherProvider$DatabaseHelper,long) -> a
    int access$1(com.phonemetra.turbo.launcher.LauncherProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,int) -> a
    void access$2(com.phonemetra.turbo.launcher.LauncherProvider$DatabaseHelper) -> a
com.phonemetra.turbo.launcher.LauncherProvider$DatabaseHelper$1 -> com.phonemetra.turbo.launcher.ig:
    com.phonemetra.turbo.launcher.LauncherProvider$DatabaseHelper this$1 -> a
    void onRow(android.content.ContentValues) -> a
com.phonemetra.turbo.launcher.LauncherProvider$SqlArguments -> com.phonemetra.turbo.launcher.ih:
    java.lang.String table -> a
    java.lang.String where -> b
    java.lang.String[] args -> c
com.phonemetra.turbo.launcher.LauncherScroller -> com.phonemetra.turbo.launcher.ii:
    int mMode -> a
    int mStartX -> b
    int mStartY -> c
    int mFinalX -> d
    int mFinalY -> e
    int mMinX -> f
    int mMaxX -> g
    int mMinY -> h
    int mMaxY -> i
    int mCurrX -> j
    int mCurrY -> k
    long mStartTime -> l
    int mDuration -> m
    float mDurationReciprocal -> n
    float mDeltaX -> o
    float mDeltaY -> p
    boolean mFinished -> q
    android.animation.TimeInterpolator mInterpolator -> r
    boolean mFlywheel -> s
    float mVelocity -> t
    float mCurrVelocity -> u
    int mDistance -> v
    float mFlingFriction -> w
    float DECELERATION_RATE -> x
    float[] SPLINE_POSITION -> y
    float[] SPLINE_TIME -> z
    float mDeceleration -> A
    float mPpi -> B
    float mPhysicalCoeff -> C
    float sViscousFluidScale -> D
    float sViscousFluidNormalize -> E
    void setInterpolator(android.animation.TimeInterpolator) -> a
    float computeDeceleration(float) -> b
    boolean isFinished() -> a
    void forceFinished(boolean) -> a
    int getCurrX() -> b
    int getCurrY() -> c
    float getCurrVelocity() -> d
    int getFinalX() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void fling(int,int,int,int,int,int,int,int) -> a
    double getSplineDeceleration(float) -> c
    int getSplineFlingDuration(float) -> d
    double getSplineFlingDistance(float) -> e
    float viscousFluid(float) -> a
    void abortAnimation() -> g
    int timePassed() -> h
    void setFinalX(int) -> a
com.phonemetra.turbo.launcher.LauncherSettings -> com.phonemetra.turbo.launcher.ij:
com.phonemetra.turbo.launcher.LauncherSettings$BaseLauncherColumns -> com.phonemetra.turbo.launcher.ik:
com.phonemetra.turbo.launcher.LauncherSettings$ChangeLogColumns -> com.phonemetra.turbo.launcher.il:
com.phonemetra.turbo.launcher.LauncherSettings$Favorites -> com.phonemetra.turbo.launcher.im:
    android.net.Uri CONTENT_URI -> a
    android.net.Uri OLD_CONTENT_URI -> b
    android.net.Uri CONTENT_URI_NO_NOTIFICATION -> c
    android.net.Uri getContentUri(long,boolean) -> a
com.phonemetra.turbo.launcher.LauncherSettings$WorkspaceScreens -> com.phonemetra.turbo.launcher.in:
    android.net.Uri CONTENT_URI -> a
com.phonemetra.turbo.launcher.LauncherTransitionable -> com.phonemetra.turbo.launcher.io:
    android.view.View getContent() -> getContent
    void onLauncherTransitionPrepare(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> a
    void onLauncherTransitionStart(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> b
    void onLauncherTransitionStep(com.phonemetra.turbo.launcher.Launcher,float) -> a
    void onLauncherTransitionEnd(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> c
com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator -> com.phonemetra.turbo.launcher.ip:
    java.util.EnumSet mPropertiesToSet -> a
    android.view.ViewPropertyAnimator mViewPropertyAnimator -> b
    android.view.View mTarget -> c
    float mTranslationX -> d
    float mTranslationY -> e
    float mScaleX -> f
    float mScaleY -> g
    float mRotationY -> h
    float mAlpha -> i
    long mStartDelay -> j
    long mDuration -> k
    android.animation.TimeInterpolator mInterpolator -> l
    java.util.ArrayList mListeners -> m
    boolean mRunning -> n
    com.phonemetra.turbo.launcher.FirstFrameAnimatorHelper mFirstFrameHelper -> o
    void addListener(android.animation.Animator$AnimatorListener) -> addListener
    void cancel() -> cancel
    android.animation.Animator clone() -> clone
    void end() -> end
    long getDuration() -> getDuration
    java.util.ArrayList getListeners() -> getListeners
    long getStartDelay() -> getStartDelay
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    boolean isRunning() -> isRunning
    boolean isStarted() -> isStarted
    void removeAllListeners() -> removeAllListeners
    void removeListener(android.animation.Animator$AnimatorListener) -> removeListener
    android.animation.Animator setDuration(long) -> setDuration
    void setInterpolator(android.animation.TimeInterpolator) -> setInterpolator
    void setStartDelay(long) -> setStartDelay
    void setTarget(java.lang.Object) -> setTarget
    void setupEndValues() -> setupEndValues
    void setupStartValues() -> setupStartValues
    void start() -> start
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator translationY(float) -> a
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator scaleX(float) -> b
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator scaleY(float) -> c
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator alpha(float) -> d
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator withLayer() -> a
com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties -> com.phonemetra.turbo.launcher.iq:
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties TRANSLATION_X -> a
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties TRANSLATION_Y -> b
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties SCALE_X -> c
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties SCALE_Y -> d
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties ROTATION_Y -> e
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties ALPHA -> f
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties START_DELAY -> g
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties DURATION -> h
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties INTERPOLATOR -> i
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties WITH_LAYER -> j
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties[] ENUM$VALUES -> k
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties[] values() -> values
    com.phonemetra.turbo.launcher.LauncherViewPropertyAnimator$Properties valueOf(java.lang.String) -> valueOf
com.phonemetra.turbo.launcher.LauncherWallpaperPickerActivity -> com.phonemetra.turbo.launcher.LauncherWallpaperPickerActivity:
    void startActivityForResultSafely(android.content.Intent,int) -> a
    boolean enableRotation() -> a
com.phonemetra.turbo.launcher.LiveWallpaperListAdapter -> com.phonemetra.turbo.launcher.ir:
    android.view.LayoutInflater mInflater -> a
    android.content.pm.PackageManager mPackageManager -> b
    java.util.List mWallpapers -> c
    int getCount() -> getCount
    com.phonemetra.turbo.launcher.LiveWallpaperListAdapter$LiveWallpaperTile getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    java.util.List access$1(com.phonemetra.turbo.launcher.LiveWallpaperListAdapter) -> a
com.phonemetra.turbo.launcher.LiveWallpaperListAdapter$LiveWallpaperEnumerator -> com.phonemetra.turbo.launcher.is:
    android.content.Context mContext -> b
    int mWallpaperPosition -> c
    com.phonemetra.turbo.launcher.LiveWallpaperListAdapter this$0 -> a
    java.lang.Void doInBackground(java.util.List[]) -> a
    void onProgressUpdate(com.phonemetra.turbo.launcher.LiveWallpaperListAdapter$LiveWallpaperTile[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
com.phonemetra.turbo.launcher.LiveWallpaperListAdapter$LiveWallpaperEnumerator$1 -> com.phonemetra.turbo.launcher.it:
    java.text.Collator mCollator -> a
    com.phonemetra.turbo.launcher.LiveWallpaperListAdapter$LiveWallpaperEnumerator this$1 -> b
    android.content.pm.PackageManager val$packageManager -> c
    int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.phonemetra.turbo.launcher.LiveWallpaperListAdapter$LiveWallpaperTile -> com.phonemetra.turbo.launcher.iu:
    android.graphics.drawable.Drawable mThumbnail -> a
    android.app.WallpaperInfo mInfo -> c
    void onClick(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> a
    android.graphics.drawable.Drawable access$0(com.phonemetra.turbo.launcher.LiveWallpaperListAdapter$LiveWallpaperTile) -> a
    android.app.WallpaperInfo access$1(com.phonemetra.turbo.launcher.LiveWallpaperListAdapter$LiveWallpaperTile) -> b
com.phonemetra.turbo.launcher.OnAlarmListener -> com.phonemetra.turbo.launcher.iv:
    void onAlarm(com.phonemetra.turbo.launcher.Alarm) -> a
com.phonemetra.turbo.launcher.PackageChangedReceiver -> com.phonemetra.turbo.launcher.PackageChangedReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.phonemetra.turbo.launcher.Page -> com.phonemetra.turbo.launcher.iw:
    int getPageChildCount() -> getPageChildCount
    void removeAllViewsOnPage() -> a
com.phonemetra.turbo.launcher.PageIndicator -> com.phonemetra.turbo.launcher.PageIndicator:
    android.view.LayoutInflater mLayoutInflater -> a
    int[] mWindowRange -> b
    int mMaxWindowSize -> c
    java.util.ArrayList mMarkers -> d
    int mActiveMarkerIndex -> e
    void enableLayoutTransitions() -> a
    void disableLayoutTransitions() -> b
    void offsetWindowCenterTo(int,boolean) -> a
    void addMarker(int,com.phonemetra.turbo.launcher.PageIndicator$PageMarkerResources,boolean) -> a
    void addMarkers(java.util.ArrayList,boolean) -> a
    void updateMarker(int,com.phonemetra.turbo.launcher.PageIndicator$PageMarkerResources) -> a
    void removeMarker(int,boolean) -> b
    void removeAllMarkers(boolean) -> a
    void setActiveMarker(int) -> setActiveMarker
com.phonemetra.turbo.launcher.PageIndicator$PageMarkerResources -> com.phonemetra.turbo.launcher.ix:
    int activeId -> a
    int inactiveId -> b
com.phonemetra.turbo.launcher.PageIndicatorMarker -> com.phonemetra.turbo.launcher.PageIndicatorMarker:
    android.widget.ImageView mActiveMarker -> a
    android.widget.ImageView mInactiveMarker -> b
    boolean mIsActive -> c
    void onFinishInflate() -> onFinishInflate
    void setMarkerDrawables(int,int) -> a
    void activate(boolean) -> a
    void inactivate(boolean) -> b
com.phonemetra.turbo.launcher.PagedView -> com.phonemetra.turbo.launcher.PagedView:
    boolean mFreeScroll -> a
    int mFreeScrollMinScrollX -> b
    int mFreeScrollMaxScrollX -> c
    int mFlingThresholdVelocity -> m
    int mMinFlingVelocity -> n
    int mMinSnapVelocity -> o
    float mDensity -> p
    float mSmoothingTime -> q
    float mTouchX -> r
    boolean mFirstLayout -> s
    int mNormalChildHeight -> d
    int mCurrentPage -> t
    int mRestorePage -> u
    int mChildCountOnLastLayout -> v
    int mNextPage -> w
    int mMaxScrollX -> x
    com.phonemetra.turbo.launcher.LauncherScroller mScroller -> y
    android.view.animation.Interpolator mDefaultInterpolator -> e
    android.view.VelocityTracker mVelocityTracker -> f
    int mPageSpacing -> g
    float mParentDownMotionX -> h
    float mParentDownMotionY -> i
    float mDownMotionX -> j
    float mDownMotionY -> k
    float mDownScrollX -> l
    float mDragViewBaselineLeft -> at
    float mLastMotionX -> z
    float mLastMotionXRemainder -> A
    float mLastMotionY -> B
    float mTotalMotionX -> C
    int mLastScreenCenter -> au
    boolean mCancelTap -> av
    int[] mPageScrolls -> aw
    int mTouchState -> D
    boolean mForceScreenScrolled -> E
    android.view.View$OnLongClickListener mLongClickListener -> F
    int mTouchSlop -> G
    int mPagingTouchSlop -> ax
    int mMaximumVelocity -> ay
    int mPageLayoutPaddingTop -> H
    int mPageLayoutPaddingBottom -> I
    int mPageLayoutPaddingLeft -> J
    int mPageLayoutPaddingRight -> K
    int mPageLayoutWidthGap -> L
    int mPageLayoutHeightGap -> M
    int mCellCountX -> N
    int mCellCountY -> O
    boolean mCenterPagesVertically -> P
    boolean mAllowOverScroll -> Q
    int mUnboundedScrollX -> R
    int[] mTempVisiblePagesRange -> S
    boolean mForceDrawAllChildrenNextFrame -> T
    int mOverScrollX -> U
    int mActivePointerId -> V
    com.phonemetra.turbo.launcher.PagedView$PageSwitchListener mPageSwitchListener -> az
    java.util.ArrayList mDirtyPageContent -> W
    boolean mContentIsRefreshable -> aa
    boolean mFadeInAdjacentScreens -> ab
    boolean mUsePagingTouchSlop -> ac
    boolean mDeferScrollUpdate -> ad
    boolean mDeferLoadAssociatedPagesUntilScrollCompletes -> ae
    boolean mIsPageMoving -> af
    boolean mIsDataReady -> ag
    boolean mAllowLongPress -> ah
    int mPageIndicatorViewId -> aA
    com.phonemetra.turbo.launcher.PageIndicator mPageIndicator -> aB
    boolean mAllowPagedViewAnimations -> aC
    android.graphics.Rect mViewport -> aD
    int REORDERING_DROP_REPOSITION_DURATION -> aE
    int REORDERING_REORDER_REPOSITION_DURATION -> ai
    int REORDERING_ZOOM_IN_OUT_DURATION -> aj
    int REORDERING_SIDE_PAGE_HOVER_TIMEOUT -> aF
    float mMinScale -> aG
    boolean mUseMinScale -> aH
    android.view.View mDragView -> ak
    java.lang.Runnable mSidePageHoverRunnable -> aI
    int mSidePageHoverIndex -> aJ
    boolean mReorderingStarted -> aK
    boolean mIsReordering -> aL
    int NUM_ANIMATIONS_RUNNING_BEFORE_ZOOM_OUT -> aM
    int mPostReorderingPreZoomInRemainingAnimationCount -> aN
    java.lang.Runnable mPostReorderingPreZoomInRunnable -> aO
    android.graphics.Matrix mTmpInvMatrix -> aP
    float[] mTmpPoint -> aQ
    int[] mTmpIntPoint -> aR
    android.graphics.Rect mTmpRect -> aS
    android.graphics.Rect mAltTmpRect -> aT
    int FLING_TO_DELETE_FADE_OUT_DURATION -> aU
    float FLING_TO_DELETE_FRICTION -> aV
    float FLING_TO_DELETE_MAX_FLING_DEGREES -> aW
    int mFlingToDeleteThresholdVelocity -> al
    boolean mDeferringForDelete -> aX
    int DELETE_SLIDE_IN_SIDE_PAGE_DURATION -> aY
    int DRAG_TO_DELETE_FADE_OUT_DURATION -> aZ
    boolean mEnforceRealBounds -> am
    android.view.View mDeleteDropTarget -> ba
    boolean mTopAlignPageWhenShrinkingForBouncer -> bb
    android.graphics.Rect mInsets -> an
    java.lang.Runnable mDelayedSnapToPageRunnable -> ao
    float CAMERA_DISTANCE -> ap
    int mCameraDistance -> aq
    boolean mScrollTransformsSet -> bc
    com.phonemetra.turbo.launcher.PagedView$TransitionEffect mTransitionEffect -> ar
    boolean mUseTransitionEffect -> as
    void init() -> a
    void setDefaultInterpolator(android.view.animation.Interpolator) -> setDefaultInterpolator
    void onAttachedToWindow() -> onAttachedToWindow
    java.lang.String getPageIndicatorDescription() -> getPageIndicatorDescription
    android.view.View$OnClickListener getPageIndicatorClickListener() -> getPageIndicatorClickListener
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setDeleteDropTarget(android.view.View) -> setDeleteDropTarget
    float[] mapPointFromViewToParent(android.view.View,float,float) -> a
    float[] mapPointFromParentToView(android.view.View,float,float) -> b
    void updateDragViewTranslationDuringDrag() -> t
    void setMinScale(float) -> setMinScale
    void setScaleX(float) -> setScaleX
    int getViewportWidth() -> getViewportWidth
    int getViewportHeight() -> getViewportHeight
    int getViewportOffsetX() -> getViewportOffsetX
    int getViewportOffsetY() -> getViewportOffsetY
    com.phonemetra.turbo.launcher.PageIndicator getPageIndicator() -> getPageIndicator
    com.phonemetra.turbo.launcher.PageIndicator$PageMarkerResources getPageIndicatorMarker(int) -> h
    void setPageSwitchListener(com.phonemetra.turbo.launcher.PagedView$PageSwitchListener) -> setPageSwitchListener
    boolean isLayoutRtl() -> u
    void setDataIsReady() -> v
    boolean isDataReady() -> w
    int getCurrentPage() -> getCurrentPage
    int getNextPage() -> getNextPage
    int getPageCount() -> getPageCount
    android.view.View getPageAt(int) -> c
    int indexToPage(int) -> d
    void updateCurrentPageScroll() -> x
    void stopScrolling() -> y
    void abortScrollerAnimation(boolean) -> a
    void forceFinishScroller() -> b
    void setCurrentPage(int) -> setCurrentPage
    void setRestorePage(int) -> setRestorePage
    int getRestorePage() -> getRestorePage
    void notifyPageSwitchListener() -> z
    void updatePageIndicator() -> c
    void pageBeginMoving() -> A
    void pageEndMoving() -> B
    boolean isPageMoving() -> C
    void onPageBeginMoving() -> D
    void onPageEndMoving() -> j
    void setOnLongClickListener(android.view.View$OnLongClickListener) -> setOnLongClickListener
    void scrollBy(int,int) -> scrollBy
    void scrollTo(int,int) -> scrollTo
    void sendScrollAccessibilityEvent() -> d
    boolean computeScrollHelper() -> E
    void computeScroll() -> computeScroll
    com.phonemetra.turbo.launcher.PagedView$LayoutParams generateDefaultLayoutParams() -> F
    void addFullScreenPage(android.view.View) -> e
    int getNormalChildHeight() -> getNormalChildHeight
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    com.phonemetra.turbo.launcher.PagedView$TransitionEffect getTransitionEffect() -> getTransitionEffect
    void setTransitionEffect(com.phonemetra.turbo.launcher.PagedView$TransitionEffect) -> setTransitionEffect
    void setFadeInAdjacentScreens(boolean) -> setFadeInAdjacentScreens
    void setPageSpacing(int) -> setPageSpacing
    void screenScrolled(int) -> e
    void enablePagedViewAnimations() -> G
    void disablePagedViewAnimations() -> H
    void setChildAlpha(android.view.View,float) -> a
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    void onChildViewRemoved(android.view.View,android.view.View) -> onChildViewRemoved
    void removeMarkerForView(int) -> a
    void removeView(android.view.View) -> removeView
    void removeViewInLayout(android.view.View) -> removeViewInLayout
    void removeViewAt(int) -> removeViewAt
    void removeAllViewsInLayout() -> removeAllViewsInLayout
    int getChildOffset(int) -> i
    void getOverviewModePages(int[]) -> a
    void getVisiblePages(int[]) -> b
    boolean shouldDrawChild(android.view.View) -> d
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean) -> requestChildRectangleOnScreen
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchUnhandledMove(android.view.View,int) -> dispatchUnhandledMove
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void focusableViewAvailable(android.view.View) -> focusableViewAvailable
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    boolean isTouchPointInViewportWithBuffer(int,int) -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void determineScrollingStart(android.view.MotionEvent) -> b
    void determineScrollingStart(android.view.MotionEvent,float) -> a
    float getMaxScrollProgress() -> getMaxScrollProgress
    void cancelCurrentPageLongPress() -> I
    float getScrollProgress(int,android.view.View,int) -> a
    int getScrollForPage(int) -> j
    int getLayoutTransitionOffsetForPage(int) -> k
    float overScrollInfluenceCurve(float) -> e
    void acceleratedOverScroll(float) -> b
    void dampedOverScroll(float) -> c
    void overScroll(float) -> a
    void disableFreeScroll() -> J
    void updateFreescrollBounds() -> K
    void setEnableFreeScroll(boolean) -> setEnableFreeScroll
    void setEnableOverscroll(boolean) -> setEnableOverscroll
    int getNearestHoverOverPageIndex() -> getNearestHoverOverPageIndex
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onRemoveView(android.view.View,boolean) -> a
    void onRemoveViewAnimationCompleted() -> L
    void onAddView(android.view.View,int) -> a
    void resetTouchState() -> e
    void onUnhandledTap(android.view.MotionEvent) -> c
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void acquireVelocityTrackerAndAddMovement(android.view.MotionEvent) -> a
    void releaseVelocityTracker() -> i
    void onSecondaryPointerUp(android.view.MotionEvent) -> d
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    int getChildWidth(int) -> l
    int getPageNearestToCenterOfScreen() -> getPageNearestToCenterOfScreen
    void snapToDestination() -> M
    float distanceInfluenceForSnapDuration(float) -> d
    void snapToPageWithVelocity(int,int) -> b
    void snapToPage(int,java.lang.Runnable) -> a
    void snapToPage(int) -> m
    void snapToPageImmediately(int) -> n
    void snapToPage(int,int) -> c
    void snapToPage(int,int,android.animation.TimeInterpolator) -> a
    void snapToPage(int,int,boolean,android.animation.TimeInterpolator) -> a
    void snapToPage(int,int,int) -> a_
    void snapToPage(int,int,int,boolean,android.animation.TimeInterpolator) -> a
    void scrollLeft() -> b_
    void scrollRight() -> c_
    int getPageForView(android.view.View) -> f
    boolean allowLongPress() -> N
    boolean performLongClick() -> performLongClick
    void setAllowLongPress(boolean) -> setAllowLongPress
    void loadAssociatedPages(int) -> o
    void loadAssociatedPages(int,boolean) -> e
    int getAssociatedLowerPageBound(int) -> f
    int getAssociatedUpperPageBound(int) -> g
    void syncPages() -> h
    void syncPageItems(int,boolean) -> c
    void invalidatePageData() -> O
    void invalidatePageData(int) -> p
    void invalidatePageData(int,boolean) -> f
    void animateDragViewToOriginalPosition() -> P
    void onStartReordering() -> Q
    void onPostReorderingAnimationCompleted() -> k
    void onEndReordering() -> R
    boolean startReordering(android.view.View) -> g
    boolean isReordering(boolean) -> b
    void endReordering() -> S
    java.lang.Runnable createPostDeleteAnimationRunnable(android.view.View) -> a
    boolean isHoveringOverDeleteDropTarget(int,int) -> d
    void setPageHoveringOverDeleteDropTarget(int,boolean) -> g
    void onDropToDelete() -> l
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void sendAccessibilityEvent(int) -> sendAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    boolean performAccessibilityAction(int,android.os.Bundle) -> performAccessibilityAction
    java.lang.String getCurrentPageDescription() -> getCurrentPageDescription
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void access$1(com.phonemetra.turbo.launcher.PagedView,int) -> a
    com.phonemetra.turbo.launcher.PageIndicator access$2(com.phonemetra.turbo.launcher.PagedView) -> a
    void access$3(com.phonemetra.turbo.launcher.PagedView) -> b
    int access$4(com.phonemetra.turbo.launcher.PagedView) -> c
    int access$5(com.phonemetra.turbo.launcher.PagedView) -> d
    void access$6(com.phonemetra.turbo.launcher.PagedView,boolean) -> a
com.phonemetra.turbo.launcher.PagedView$1 -> com.phonemetra.turbo.launcher.iy:
    com.phonemetra.turbo.launcher.PagedView this$0 -> a
    int val$pageUnderPointIndex -> b
    int val$dragViewIndex -> c
    void run() -> run
com.phonemetra.turbo.launcher.PagedView$2 -> com.phonemetra.turbo.launcher.iz:
    com.phonemetra.turbo.launcher.PagedView this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.PagedView$3 -> com.phonemetra.turbo.launcher.ja:
    com.phonemetra.turbo.launcher.PagedView this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.PagedView$4 -> com.phonemetra.turbo.launcher.jb:
    com.phonemetra.turbo.launcher.PagedView this$0 -> a
    java.lang.Runnable val$onCompleteRunnable -> b
    void run() -> run
com.phonemetra.turbo.launcher.PagedView$5 -> com.phonemetra.turbo.launcher.jc:
    com.phonemetra.turbo.launcher.PagedView this$0 -> a
    android.view.View val$dragView -> b
    void run() -> run
    com.phonemetra.turbo.launcher.PagedView access$0(com.phonemetra.turbo.launcher.PagedView$5) -> a
com.phonemetra.turbo.launcher.PagedView$5$1 -> com.phonemetra.turbo.launcher.jd:
    com.phonemetra.turbo.launcher.PagedView$5 this$1 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.PagedView$8 -> com.phonemetra.turbo.launcher.je:
    com.phonemetra.turbo.launcher.PagedView this$0 -> a
    java.lang.Runnable val$onAnimationEndRunnable -> b
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.PagedView$InverseZInterpolator -> com.phonemetra.turbo.launcher.jf:
    com.phonemetra.turbo.launcher.PagedView$ZInterpolator zInterpolator -> a
    float getInterpolation(float) -> getInterpolation
com.phonemetra.turbo.launcher.PagedView$LayoutParams -> com.phonemetra.turbo.launcher.jg:
    boolean isFullScreenPage -> a
com.phonemetra.turbo.launcher.PagedView$PageSwitchListener -> com.phonemetra.turbo.launcher.jh:
    void onPageSwitch(android.view.View,int) -> a
com.phonemetra.turbo.launcher.PagedView$SavedState -> com.phonemetra.turbo.launcher.PagedView$SavedState:
    int currentPage -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.phonemetra.turbo.launcher.PagedView$SavedState$1 -> com.phonemetra.turbo.launcher.ji:
    com.phonemetra.turbo.launcher.PagedView$SavedState createFromParcel(android.os.Parcel) -> a
    com.phonemetra.turbo.launcher.PagedView$SavedState[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.phonemetra.turbo.launcher.PagedView$ScrollInterpolator -> com.phonemetra.turbo.launcher.jj:
    float getInterpolation(float) -> getInterpolation
com.phonemetra.turbo.launcher.PagedView$TransitionEffect -> com.phonemetra.turbo.launcher.jk:
    com.phonemetra.turbo.launcher.PagedView mPagedView -> a
    java.lang.String mName -> b
    void screenScrolled(android.view.View,int,float) -> a
    java.lang.String getName() -> a
    void setFromString(com.phonemetra.turbo.launcher.PagedView,java.lang.String) -> a
com.phonemetra.turbo.launcher.PagedView$TransitionEffect$Accordion -> com.phonemetra.turbo.launcher.jl:
    void screenScrolled(android.view.View,int,float) -> a
com.phonemetra.turbo.launcher.PagedView$TransitionEffect$Carousel -> com.phonemetra.turbo.launcher.jm:
    void screenScrolled(android.view.View,int,float) -> a
com.phonemetra.turbo.launcher.PagedView$TransitionEffect$Cube -> com.phonemetra.turbo.launcher.jn:
    boolean mIn -> b
    void screenScrolled(android.view.View,int,float) -> a
com.phonemetra.turbo.launcher.PagedView$TransitionEffect$Cylinder -> com.phonemetra.turbo.launcher.jo:
    boolean mIn -> b
    void screenScrolled(android.view.View,int,float) -> a
com.phonemetra.turbo.launcher.PagedView$TransitionEffect$Flip -> com.phonemetra.turbo.launcher.jp:
    void screenScrolled(android.view.View,int,float) -> a
com.phonemetra.turbo.launcher.PagedView$TransitionEffect$Overview -> com.phonemetra.turbo.launcher.jq:
    android.view.animation.AccelerateDecelerateInterpolator mScaleInterpolator -> b
    void screenScrolled(android.view.View,int,float) -> a
com.phonemetra.turbo.launcher.PagedView$TransitionEffect$Rotate -> com.phonemetra.turbo.launcher.jr:
    boolean mUp -> b
    void screenScrolled(android.view.View,int,float) -> a
com.phonemetra.turbo.launcher.PagedView$TransitionEffect$Stack -> com.phonemetra.turbo.launcher.js:
    com.phonemetra.turbo.launcher.PagedView$ZInterpolator mZInterpolator -> c
    android.view.animation.DecelerateInterpolator mLeftScreenAlphaInterpolator -> d
    android.view.animation.AccelerateInterpolator mAlphaInterpolator -> b
    void screenScrolled(android.view.View,int,float) -> a
com.phonemetra.turbo.launcher.PagedView$TransitionEffect$Zoom -> com.phonemetra.turbo.launcher.jt:
    boolean mIn -> b
    void screenScrolled(android.view.View,int,float) -> a
com.phonemetra.turbo.launcher.PagedView$ZInterpolator -> com.phonemetra.turbo.launcher.ju:
    float focalLength -> a
    float getInterpolation(float) -> getInterpolation
com.phonemetra.turbo.launcher.PagedViewCellLayout -> com.phonemetra.turbo.launcher.jv:
    int mCellCountX -> b
    int mCellCountY -> c
    int mOriginalCellWidth -> d
    int mOriginalCellHeight -> e
    int mCellWidth -> f
    int mCellHeight -> g
    int mOriginalWidthGap -> h
    int mOriginalHeightGap -> i
    int mWidthGap -> j
    int mHeightGap -> k
    com.phonemetra.turbo.launcher.PagedViewCellLayoutChildren mChildren -> a
    int getCellWidth() -> getCellWidth
    int getCellHeight() -> getCellHeight
    void cancelLongPress() -> cancelLongPress
    void removeAllViewsOnPage() -> a
    int getPageChildCount() -> getPageChildCount
    com.phonemetra.turbo.launcher.PagedViewCellLayoutChildren getChildrenLayout() -> getChildrenLayout
    android.view.View getChildOnPageAt(int) -> a
    int getCellCountX() -> getCellCountX
    int getCellCountY() -> getCellCountY
    void onMeasure(int,int) -> onMeasure
    int getContentWidth() -> getContentWidth
    int getContentHeight() -> getContentHeight
    int getWidthBeforeFirstLayout() -> getWidthBeforeFirstLayout
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
    int estimateCellWidth(int) -> b
    int estimateCellHeight(int) -> c
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
com.phonemetra.turbo.launcher.PagedViewCellLayout$LayoutParams -> com.phonemetra.turbo.launcher.jw:
    int cellX -> a
    int cellY -> b
    int cellHSpan -> c
    int cellVSpan -> d
    int x -> e
    int y -> f
    void setup(android.content.Context,int,int,int,int,int,int) -> a
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.PagedViewCellLayoutChildren -> com.phonemetra.turbo.launcher.jx:
    boolean mCenterContent -> a
    int mCellWidth -> b
    int mCellHeight -> c
    int mWidthGap -> d
    int mHeightGap -> e
    void cancelLongPress() -> cancelLongPress
    void setGap(int,int) -> a
    void setCellDimensions(int,int) -> b
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
com.phonemetra.turbo.launcher.PagedViewGridLayout -> com.phonemetra.turbo.launcher.jy:
    int mCellCountX -> a
    int mCellCountY -> b
    java.lang.Runnable mOnLayoutListener -> c
    int getCellCountX() -> getCellCountX
    int getCellCountY() -> getCellCountY
    void onMeasure(int,int) -> onMeasure
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setOnLayoutListener(java.lang.Runnable) -> setOnLayoutListener
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void removeAllViewsOnPage() -> a
    int getPageChildCount() -> getPageChildCount
    android.view.View getChildOnPageAt(int) -> a
com.phonemetra.turbo.launcher.PagedViewIcon -> com.phonemetra.turbo.launcher.PagedViewIcon:
    com.phonemetra.turbo.launcher.PagedViewIcon$PressedCallback mPressedCallback -> a
    boolean mLockDrawableState -> b
    android.graphics.Bitmap mIcon -> c
    int mTextColor -> d
    boolean mIsTextVisible -> e
    void onFinishInflate() -> onFinishInflate
    void applyFromApplicationInfo(com.phonemetra.turbo.launcher.AppInfo,boolean,com.phonemetra.turbo.launcher.PagedViewIcon$PressedCallback) -> a
    void lockDrawableState() -> a
    void resetDrawableState() -> b
    void drawableStateChanged() -> drawableStateChanged
    void draw(android.graphics.Canvas) -> draw
    void setTextColor(int) -> setTextColor
    void setTextVisibility(boolean) -> setTextVisibility
com.phonemetra.turbo.launcher.PagedViewIcon$1 -> com.phonemetra.turbo.launcher.jz:
    com.phonemetra.turbo.launcher.PagedViewIcon this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.PagedViewIcon$PressedCallback -> com.phonemetra.turbo.launcher.ka:
    void iconPressed(com.phonemetra.turbo.launcher.PagedViewIcon) -> a
com.phonemetra.turbo.launcher.PagedViewWidget -> com.phonemetra.turbo.launcher.PagedViewWidget:
    boolean sDeletePreviewsWhenDetachedFromWindow -> f
    boolean sRecyclePreviewsWhenDetachedFromWindow -> g
    java.lang.String mDimensionsFormatString -> h
    com.phonemetra.turbo.launcher.PagedViewWidget$CheckForShortPress mPendingCheckForShortPress -> a
    com.phonemetra.turbo.launcher.PagedViewWidget$ShortPressListener mShortPressListener -> b
    boolean mShortPressTriggered -> c
    com.phonemetra.turbo.launcher.PagedViewWidget sShortpressTarget -> d
    boolean mIsAppWidget -> e
    android.graphics.Rect mOriginalImagePadding -> i
    java.lang.Object mInfo -> j
    com.phonemetra.turbo.launcher.WidgetPreviewLoader mWidgetPreviewLoader -> k
    void onFinishInflate() -> onFinishInflate
    void setDeletePreviewsWhenDetachedFromWindow(boolean) -> setDeletePreviewsWhenDetachedFromWindow
    void setRecyclePreviewsWhenDetachedFromWindow(boolean) -> setRecyclePreviewsWhenDetachedFromWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void applyFromAppWidgetProviderInfo(android.appwidget.AppWidgetProviderInfo,int,int[],com.phonemetra.turbo.launcher.WidgetPreviewLoader) -> a
    void applyFromResolveInfo(android.content.pm.PackageManager,android.content.pm.ResolveInfo,com.phonemetra.turbo.launcher.WidgetPreviewLoader) -> a
    int[] getPreviewSize() -> getPreviewSize
    void applyPreview(com.phonemetra.turbo.launcher.FastBitmapDrawable,int) -> a
    void setShortPressListener(com.phonemetra.turbo.launcher.PagedViewWidget$ShortPressListener) -> setShortPressListener
    void checkForShortPress() -> b
    void removeShortPressCallback() -> c
    void cleanUpShortPress() -> d
    void resetShortPressTarget() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.phonemetra.turbo.launcher.PagedViewWidget$CheckForShortPress -> com.phonemetra.turbo.launcher.kb:
    com.phonemetra.turbo.launcher.PagedViewWidget this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.PagedViewWidget$ShortPressListener -> com.phonemetra.turbo.launcher.kc:
    void onShortPress(android.view.View) -> a
    void cleanUpShortPress(android.view.View) -> b
com.phonemetra.turbo.launcher.PagedViewWidgetImageView -> com.phonemetra.turbo.launcher.PagedViewWidgetImageView:
    boolean mAllowRequestLayout -> a
    void requestLayout() -> requestLayout
    void onDraw(android.graphics.Canvas) -> onDraw
com.phonemetra.turbo.launcher.PagedViewWithDraggableItems -> com.phonemetra.turbo.launcher.kd:
    android.view.View mLastTouchedItem -> a
    boolean mIsDragging -> b
    boolean mIsDragEnabled -> c
    float mDragSlopeThreshold -> d
    com.phonemetra.turbo.launcher.Launcher mLauncher -> e
    boolean beginDragging(android.view.View) -> c
    void cancelDragging() -> T
    void handleTouchEvent(android.view.MotionEvent) -> d
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onLongClick(android.view.View) -> onLongClick
    void determineScrollingStart(android.view.MotionEvent) -> b
    void determineDraggingStart(android.view.MotionEvent) -> a
    void setDragSlopeThreshold(float) -> setDragSlopeThreshold
    void onDetachedFromWindow() -> onDetachedFromWindow
com.phonemetra.turbo.launcher.PaintCache -> com.phonemetra.turbo.launcher.ke:
    android.graphics.Paint initialValue() -> a
    java.lang.Object initialValue() -> b
com.phonemetra.turbo.launcher.PendingAddItemInfo -> com.phonemetra.turbo.launcher.kf:
    android.content.ComponentName componentName -> a
com.phonemetra.turbo.launcher.PendingAddShortcutInfo -> com.phonemetra.turbo.launcher.kg:
    android.content.pm.ActivityInfo shortcutActivityInfo -> b
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.PendingAddWidgetInfo -> com.phonemetra.turbo.launcher.kh:
    int minWidth -> b
    int minHeight -> c
    int minResizeWidth -> d
    int minResizeHeight -> e
    int previewImage -> s
    int icon -> t
    android.appwidget.AppWidgetProviderInfo info -> u
    android.appwidget.AppWidgetHostView boundWidget -> v
    android.os.Bundle bindOptions -> w
    java.lang.String mimeType -> x
    android.os.Parcelable configurationData -> y
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.PreloadReceiver -> com.phonemetra.turbo.launcher.PreloadReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.phonemetra.turbo.launcher.PreloadReceiver$1 -> com.phonemetra.turbo.launcher.ki:
    com.phonemetra.turbo.launcher.PreloadReceiver this$0 -> a
    com.phonemetra.turbo.launcher.LauncherProvider val$provider -> b
    int val$workspaceResId -> c
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.R -> com.phonemetra.turbo.launcher.kj:
com.phonemetra.turbo.launcher.R$styleable -> com.phonemetra.turbo.launcher.kk:
    int[] AppsCustomizePagedView -> AppsCustomizePagedView
    int AppsCustomizePagedView_maxAppCellCountX -> AppsCustomizePagedView_maxAppCellCountX
    int AppsCustomizePagedView_maxAppCellCountY -> AppsCustomizePagedView_maxAppCellCountY
    int AppsCustomizePagedView_widgetCellHeightGap -> AppsCustomizePagedView_widgetCellHeightGap
    int AppsCustomizePagedView_widgetCellWidthGap -> AppsCustomizePagedView_widgetCellWidthGap
    int AppsCustomizePagedView_widgetCountX -> AppsCustomizePagedView_widgetCountX
    int AppsCustomizePagedView_widgetCountY -> AppsCustomizePagedView_widgetCountY
    int[] CellLayout -> CellLayout
    int CellLayout_cellHeight -> CellLayout_cellHeight
    int CellLayout_cellWidth -> CellLayout_cellWidth
    int CellLayout_heightGap -> CellLayout_heightGap
    int CellLayout_maxGap -> CellLayout_maxGap
    int CellLayout_widthGap -> CellLayout_widthGap
    int[] DrawableStateProxyView -> DrawableStateProxyView
    int DrawableStateProxyView_sourceViewId -> DrawableStateProxyView_sourceViewId
    int[] Extra -> Extra
    int Extra_key -> Extra_key
    int Extra_value -> Extra_value
    int[] Favorite -> Favorite
    int Favorite_className -> Favorite_className
    int Favorite_container -> Favorite_container
    int Favorite_icon -> Favorite_icon
    int Favorite_packageName -> Favorite_packageName
    int Favorite_screen -> Favorite_screen
    int Favorite_spanX -> Favorite_spanX
    int Favorite_spanY -> Favorite_spanY
    int Favorite_title -> Favorite_title
    int Favorite_uri -> Favorite_uri
    int Favorite_x -> Favorite_x
    int Favorite_y -> Favorite_y
    int[] HolographicLinearLayout -> HolographicLinearLayout
    int HolographicLinearLayout_sourceImageViewId -> HolographicLinearLayout_sourceImageViewId
    int HolographicLinearLayout_stateHotwordOn -> HolographicLinearLayout_stateHotwordOn
    int[] Hotseat -> Hotseat
    int Hotseat_cellCountX -> Hotseat_cellCountX
    int Hotseat_cellCountY -> Hotseat_cellCountY
    int[] Include -> Include
    int Include_workspace -> Include_workspace
    int[] PageIndicator -> PageIndicator
    int PageIndicator_windowSize -> PageIndicator_windowSize
    int[] PagedView -> PagedView
    int PagedView_pageIndicator -> PagedView_pageIndicator
    int PagedView_pageLayoutHeightGap -> PagedView_pageLayoutHeightGap
    int PagedView_pageLayoutPaddingBottom -> PagedView_pageLayoutPaddingBottom
    int PagedView_pageLayoutPaddingLeft -> PagedView_pageLayoutPaddingLeft
    int PagedView_pageLayoutPaddingRight -> PagedView_pageLayoutPaddingRight
    int PagedView_pageLayoutPaddingTop -> PagedView_pageLayoutPaddingTop
    int PagedView_pageLayoutWidthGap -> PagedView_pageLayoutWidthGap
    int[] SlidingUpPanelLayout -> SlidingUpPanelLayout
    int SlidingUpPanelLayout_dragView -> SlidingUpPanelLayout_dragView
    int SlidingUpPanelLayout_fadeColor -> SlidingUpPanelLayout_fadeColor
    int SlidingUpPanelLayout_flingVelocity -> SlidingUpPanelLayout_flingVelocity
    int SlidingUpPanelLayout_overlay -> SlidingUpPanelLayout_overlay
    int SlidingUpPanelLayout_panelHeight -> SlidingUpPanelLayout_panelHeight
    int SlidingUpPanelLayout_paralaxOffset -> SlidingUpPanelLayout_paralaxOffset
    int SlidingUpPanelLayout_shadowHeight -> SlidingUpPanelLayout_shadowHeight
    int[] StrokedTextView -> StrokedTextView
    int StrokedTextView_strokeColor -> StrokedTextView_strokeColor
    int StrokedTextView_strokeTextColor -> StrokedTextView_strokeTextColor
    int StrokedTextView_strokeWidth -> StrokedTextView_strokeWidth
    int[] Workspace -> Workspace
    int Workspace_cellCountX -> Workspace_cellCountX
    int Workspace_cellCountY -> Workspace_cellCountY
    int Workspace_defaultScreen -> Workspace_defaultScreen
com.phonemetra.turbo.launcher.RectCache -> com.phonemetra.turbo.launcher.kl:
    android.graphics.Rect initialValue() -> a
    java.lang.Object initialValue() -> b
com.phonemetra.turbo.launcher.SavedWallpaperImages -> com.phonemetra.turbo.launcher.km:
    java.lang.String TAG -> d
    com.phonemetra.turbo.launcher.SavedWallpaperImages$ImageDb mDb -> e
    java.util.ArrayList mImages -> a
    android.content.Context mContext -> b
    android.view.LayoutInflater mLayoutInflater -> c
    void loadThumbnailsAndImageIdList() -> a
    int getCount() -> getCount
    com.phonemetra.turbo.launcher.SavedWallpaperImages$SavedWallpaperTile getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.String getImageFilename(int) -> b
    android.util.Pair getImageFilenames(int) -> d
    void deleteImage(int) -> c
    void writeImage(android.graphics.Bitmap,byte[]) -> a
    java.lang.Object getItem(int) -> getItem
com.phonemetra.turbo.launcher.SavedWallpaperImages$ImageDb -> com.phonemetra.turbo.launcher.kn:
    android.content.Context mContext -> a
    void moveFromCacheDirectoryIfNecessary(android.content.Context) -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.phonemetra.turbo.launcher.SavedWallpaperImages$SavedWallpaperTile -> com.phonemetra.turbo.launcher.ko:
    int mDbId -> a
    android.graphics.drawable.Drawable mThumb -> c
    void onClick(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> a
    void onSave(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> b
    void onDelete(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> c
    boolean isSelectable() -> a
    boolean isNamelessWallpaper() -> b
    android.graphics.drawable.Drawable access$0(com.phonemetra.turbo.launcher.SavedWallpaperImages$SavedWallpaperTile) -> a
com.phonemetra.turbo.launcher.SearchDropTargetBar -> com.phonemetra.turbo.launcher.SearchDropTargetBar:
    android.animation.ObjectAnimator mDropTargetBarAnim -> a
    android.animation.ObjectAnimator mQSBSearchBarAnim -> b
    android.view.animation.AccelerateInterpolator sAccelerateInterpolator -> c
    boolean mIsSearchBarHidden -> d
    android.view.View mQSBSearchBar -> e
    android.view.View mDropTargetBar -> f
    com.phonemetra.turbo.launcher.ButtonDropTarget mInfoDropTarget -> g
    com.phonemetra.turbo.launcher.ButtonDropTarget mDeleteDropTarget -> h
    int mBarHeight -> i
    boolean mDeferOnDragEnd -> j
    android.graphics.drawable.Drawable mPreviousBackground -> k
    boolean mEnableDropDownDropTargets -> l
    void setup(com.phonemetra.turbo.launcher.Launcher,com.phonemetra.turbo.launcher.DragController) -> a
    void setupQSB(com.phonemetra.turbo.launcher.Launcher) -> setupQSB
    void prepareStartAnimation(android.view.View) -> a
    void setupAnimation(android.animation.ObjectAnimator,android.view.View) -> a
    void onFinishInflate() -> onFinishInflate
    void finishAnimations() -> a
    void showSearchBar(boolean) -> a
    void hideSearchBar(boolean) -> b
    int getTransitionInDuration() -> getTransitionInDuration
    int getTransitionOutDuration() -> getTransitionOutDuration
    void onDragStart(com.phonemetra.turbo.launcher.DragSource,java.lang.Object,int) -> a
    void deferOnDragEnd() -> c
    void onDragEnd() -> b
    void onSearchPackagesChanged(boolean,boolean) -> a
    android.graphics.Rect getSearchBarBounds() -> getSearchBarBounds
    android.view.View getDropTargetBar() -> getDropTargetBar
com.phonemetra.turbo.launcher.SearchDropTargetBar$1 -> com.phonemetra.turbo.launcher.kp:
    com.phonemetra.turbo.launcher.SearchDropTargetBar this$0 -> a
    android.view.View val$v -> b
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.ShortcutAndWidgetContainer -> com.phonemetra.turbo.launcher.kq:
    int[] mTmpCellXY -> a
    android.app.WallpaperManager mWallpaperManager -> b
    boolean mIsHotseatLayout -> c
    int mCellWidth -> d
    int mCellHeight -> e
    int mWidthGap -> f
    int mHeightGap -> g
    int mCountX -> h
    int mCountY -> i
    boolean mInvertIfRtl -> j
    void setCellDimensions(int,int,int,int,int,int) -> a
    android.view.View getChildAt(int,int) -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void onMeasure(int,int) -> onMeasure
    void setupLp(com.phonemetra.turbo.launcher.CellLayout$LayoutParams) -> setupLp
    void setInvertIfRtl(boolean) -> setInvertIfRtl
    void setIsHotseat(boolean) -> setIsHotseat
    int getCellContentWidth() -> getCellContentWidth
    int getCellContentHeight() -> getCellContentHeight
    void measureChild(android.view.View) -> a
    boolean invertLayoutHorizontally() -> b
    boolean isLayoutRtl() -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    void cancelLongPress() -> cancelLongPress
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
    void setChildrenDrawnWithCacheEnabled(boolean) -> setChildrenDrawnWithCacheEnabled
com.phonemetra.turbo.launcher.ShortcutInfo -> com.phonemetra.turbo.launcher.kr:
    android.content.Intent intent -> a
    boolean customIcon -> b
    boolean usingFallbackIcon -> c
    android.content.Intent$ShortcutIconResource iconResource -> d
    android.graphics.Bitmap mIcon -> u
    long firstInstallTime -> e
    int flags -> s
    android.content.Intent restoredIntent -> t
    android.content.Intent getIntent() -> a
    android.content.Intent getRestoredIntent() -> b
    void restore() -> c
    android.content.pm.PackageInfo getPackageInfo(android.content.Context,java.lang.String) -> a
    void initFlagsAndFirstInstallTime(android.content.pm.PackageInfo) -> a
    void setIcon(android.graphics.Bitmap) -> b
    android.graphics.Bitmap getIcon(com.phonemetra.turbo.launcher.IconCache) -> a
    void updateIcon(com.phonemetra.turbo.launcher.IconCache) -> b
    void setActivity(android.content.Context,android.content.ComponentName,int) -> a
    void onAddToDatabase(android.content.ContentValues) -> a
    java.lang.String toString() -> toString
com.phonemetra.turbo.launcher.SlidingUpPanelLayout -> com.phonemetra.turbo.launcher.SlidingUpPanelLayout:
    java.lang.String TAG -> a
    int[] DEFAULT_ATTRS -> b
    int mMinFlingVelocity -> c
    int mCoveredFadeColor -> d
    android.graphics.Paint mCoveredFadePaint -> e
    android.graphics.drawable.Drawable mShadowDrawable -> f
    int mPanelHeight -> g
    int mShadowHeight -> h
    int mParalaxOffset -> i
    boolean mIsSlidingUp -> j
    boolean mCanSlide -> k
    boolean mOverlayContent -> l
    android.view.View mDragView -> m
    int mDragViewResId -> n
    android.view.View mSlideableView -> o
    android.view.View mMainView -> p
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState mSlideState -> q
    float mSlideOffset -> r
    int mSlideRange -> s
    boolean mIsUnableToDrag -> t
    boolean mIsSlidingEnabled -> u
    boolean mIsUsingDragViewTouchEvents -> v
    int mScrollTouchSlop -> w
    float mInitialMotionX -> x
    float mInitialMotionY -> y
    float mAnchorPoint -> z
    android.view.animation.TranslateAnimation mAnimation -> A
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$PanelSlideListener mPanelSlideListener -> B
    android.support.v4.widget.ViewDragHelper mDragHelper -> C
    boolean mFirstLayout -> D
    android.graphics.Rect mTmpRect -> E
    int[] $SWITCH_TABLE$com$phonemetra$turbo$launcher$SlidingUpPanelLayout$SlideState -> F
    void onFinishInflate() -> onFinishInflate
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setSlidingEnabled(boolean) -> setSlidingEnabled
    void setPanelHeight(int) -> setPanelHeight
    int getPanelHeight() -> getPanelHeight
    int getCurrentParalaxOffset() -> getCurrentParalaxOffset
    void setPanelSlideListener(com.phonemetra.turbo.launcher.SlidingUpPanelLayout$PanelSlideListener) -> setPanelSlideListener
    void setDragView(android.view.View) -> setDragView
    void setAnchorPoint(float) -> setAnchorPoint
    void setOverlayed(boolean) -> setOverlayed
    void dispatchOnPanelSlide(android.view.View) -> a
    void dispatchOnPanelExpanded(android.view.View) -> b
    void dispatchOnPanelCollapsed(android.view.View) -> c
    void dispatchOnPanelAnchored(android.view.View) -> d
    void updateObscuredViewVisibility() -> a
    void setAllChildrenVisible() -> b
    boolean hasOpaqueBackground(android.view.View) -> e
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void setEnableDragViewTouchEvents(boolean) -> setEnableDragViewTouchEvents
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean isDragViewUnder(int,int) -> a
    boolean expandPane(android.view.View,int,float) -> a
    boolean collapsePane(android.view.View,int) -> a
    int getSlidingTop() -> getSlidingTop
    boolean collapsePane() -> c
    boolean expandPane() -> d
    boolean expandPane(float) -> a
    boolean isExpanded() -> e
    boolean isAnchored() -> f
    boolean isPaneVisible() -> g
    void showPane() -> h
    void onPanelDragged(int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void draw(android.graphics.Canvas) -> draw
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    boolean access$0(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> a
    float access$1(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> b
    int access$2(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> c
    android.support.v4.widget.ViewDragHelper access$3(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> d
    float access$4(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> e
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState access$5(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> f
    android.view.View access$6(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> g
    void access$7(com.phonemetra.turbo.launcher.SlidingUpPanelLayout,com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState) -> a
    void access$8(com.phonemetra.turbo.launcher.SlidingUpPanelLayout,int) -> a
    boolean access$9(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> h
    int access$10(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> i
    int access$11(com.phonemetra.turbo.launcher.SlidingUpPanelLayout) -> j
    int[] $SWITCH_TABLE$com$phonemetra$turbo$launcher$SlidingUpPanelLayout$SlideState() -> i
    void access$13(com.phonemetra.turbo.launcher.SlidingUpPanelLayout,android.view.animation.TranslateAnimation) -> a
com.phonemetra.turbo.launcher.SlidingUpPanelLayout$1 -> com.phonemetra.turbo.launcher.ks:
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout this$0 -> a
    android.view.View val$slidingPane -> b
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
com.phonemetra.turbo.launcher.SlidingUpPanelLayout$DragHelperCallback -> com.phonemetra.turbo.launcher.kt:
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout this$0 -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewReleased(android.view.View,float,float) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.phonemetra.turbo.launcher.SlidingUpPanelLayout$LayoutParams -> com.phonemetra.turbo.launcher.ku:
    int[] ATTRS -> c
    boolean slideable -> a
    boolean dimWhenOffset -> b
com.phonemetra.turbo.launcher.SlidingUpPanelLayout$PanelSlideListener -> com.phonemetra.turbo.launcher.kv:
    void onPanelSlide(android.view.View,float) -> a
    void onPanelCollapsed(android.view.View) -> a
    void onPanelExpanded(android.view.View) -> b
    void onPanelAnchored(android.view.View) -> c
com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SavedState -> com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SavedState:
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState mSlideState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SavedState$1 -> com.phonemetra.turbo.launcher.kw:
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SavedState createFromParcel(android.os.Parcel) -> a
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SavedState[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SimplePanelSlideListener -> com.phonemetra.turbo.launcher.kx:
    void onPanelSlide(android.view.View,float) -> a
    void onPanelCollapsed(android.view.View) -> a
    void onPanelExpanded(android.view.View) -> b
    void onPanelAnchored(android.view.View) -> c
com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState -> com.phonemetra.turbo.launcher.ky:
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState EXPANDED -> a
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState COLLAPSED -> b
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState ANCHORED -> c
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState[] ENUM$VALUES -> d
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState[] values() -> values
    com.phonemetra.turbo.launcher.SlidingUpPanelLayout$SlideState valueOf(java.lang.String) -> valueOf
com.phonemetra.turbo.launcher.SmoothPagedView -> com.phonemetra.turbo.launcher.kz:
    float SMOOTHING_CONSTANT -> b
    float mBaseLineFlingVelocity -> c
    float mFlingVelocityInfluence -> d
    int mScrollMode -> a
    android.view.animation.Interpolator mScrollInterpolator -> e
    int getScrollMode() -> getScrollMode
    void init() -> a
    void snapToDestination() -> M
    void snapToPageWithVelocity(int,int) -> b
    void snapToPageWithVelocity(int,int,boolean) -> a
    void snapToPage(int) -> m
    void computeScroll() -> computeScroll
com.phonemetra.turbo.launcher.SmoothPagedView$OvershootInterpolator -> com.phonemetra.turbo.launcher.la:
    float mTension -> a
    void setDistance(int) -> a
    void disableSettle() -> a
    float getInterpolation(float) -> getInterpolation
com.phonemetra.turbo.launcher.SoftReferenceThreadLocal -> com.phonemetra.turbo.launcher.lb:
    java.lang.ThreadLocal mThreadLocal -> a
    java.lang.Object initialValue() -> b
    void set(java.lang.Object) -> a
    java.lang.Object get() -> c
com.phonemetra.turbo.launcher.SpringLoadedDragController -> com.phonemetra.turbo.launcher.lc:
    long ENTER_SPRING_LOAD_HOVER_TIME -> a
    long ENTER_SPRING_LOAD_CANCEL_HOVER_TIME -> b
    long EXIT_SPRING_LOAD_HOVER_TIME -> c
    com.phonemetra.turbo.launcher.Alarm mAlarm -> d
    com.phonemetra.turbo.launcher.CellLayout mScreen -> e
    com.phonemetra.turbo.launcher.Launcher mLauncher -> f
    void cancel() -> a
    void setAlarm(com.phonemetra.turbo.launcher.CellLayout) -> a
    void onAlarm(com.phonemetra.turbo.launcher.Alarm) -> a
com.phonemetra.turbo.launcher.Stats -> com.phonemetra.turbo.launcher.ld:
    com.phonemetra.turbo.launcher.Launcher mLauncher -> d
    java.io.DataOutputStream mLog -> a
    java.util.ArrayList mIntents -> b
    java.util.ArrayList mHistogram -> c
    void incrementLaunch(java.lang.String) -> a
    int launchCount(android.content.Intent) -> a
    void recordLaunch(android.content.Intent) -> b
    void recordLaunch(android.content.Intent,com.phonemetra.turbo.launcher.ShortcutInfo) -> a
    void saveStats() -> a
    void loadStats() -> b
com.phonemetra.turbo.launcher.ThemePreference -> com.phonemetra.turbo.launcher.ThemePreference:
    java.lang.CharSequence themeName -> a
    java.lang.CharSequence themePackageName -> b
    java.lang.CharSequence themeDescription -> c
    android.graphics.drawable.Drawable themePreview -> d
    void onBindView(android.view.View) -> onBindView
    void setTheme(java.lang.CharSequence) -> a
    java.lang.CharSequence getValue() -> a
com.phonemetra.turbo.launcher.ThemeSettingsActivity -> com.phonemetra.turbo.launcher.ThemeSettingsActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void applyTheme(android.view.View) -> applyTheme
    void getThemes(android.view.View) -> getThemes
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
com.phonemetra.turbo.launcher.ThirdPartyWallpaperPickerListAdapter -> com.phonemetra.turbo.launcher.le:
    android.view.LayoutInflater mInflater -> a
    android.content.pm.PackageManager mPackageManager -> b
    int mIconSize -> c
    java.util.List mThirdPartyWallpaperPickers -> d
    int getCount() -> getCount
    com.phonemetra.turbo.launcher.ThirdPartyWallpaperPickerListAdapter$ThirdPartyWallpaperTile getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.phonemetra.turbo.launcher.ThirdPartyWallpaperPickerListAdapter$ThirdPartyWallpaperTile -> com.phonemetra.turbo.launcher.lf:
    android.content.pm.ResolveInfo mResolveInfo -> a
    void onClick(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> a
    android.content.pm.ResolveInfo access$0(com.phonemetra.turbo.launcher.ThirdPartyWallpaperPickerListAdapter$ThirdPartyWallpaperTile) -> a
com.phonemetra.turbo.launcher.TransitionEffectsFragment -> com.phonemetra.turbo.launcher.lg:
    android.widget.ImageView mTransitionIcon -> a
    android.widget.ListView mListView -> b
    android.view.View mCurrentSelection -> c
    android.widget.ScrollView mScrollView -> d
    java.lang.String[] mTransitionStates -> e
    android.content.res.TypedArray mTransitionDrawables -> f
    java.lang.String mCurrentState -> g
    int mCurrentPosition -> h
    boolean mPageOrDrawer -> i
    java.lang.String mSettingsProviderValue -> j
    int mPreferenceValue -> k
    android.view.View$OnClickListener mSettingsItemListener -> l
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void setEffect() -> a
    int mapEffectToPosition(java.lang.String) -> a
    void setImageViewToEffect() -> b
    void setSelected(android.view.View) -> a
    void setCleared(android.view.View) -> b
    android.animation.Animator onCreateAnimator(int,boolean,int) -> onCreateAnimator
    void access$0(com.phonemetra.turbo.launcher.TransitionEffectsFragment,android.view.View) -> a
    void access$1(com.phonemetra.turbo.launcher.TransitionEffectsFragment,android.view.View) -> b
    void access$2(com.phonemetra.turbo.launcher.TransitionEffectsFragment) -> a
com.phonemetra.turbo.launcher.TransitionEffectsFragment$1 -> com.phonemetra.turbo.launcher.lh:
    com.phonemetra.turbo.launcher.TransitionEffectsFragment this$0 -> a
    void onClick(android.view.View) -> onClick
    com.phonemetra.turbo.launcher.TransitionEffectsFragment access$0(com.phonemetra.turbo.launcher.TransitionEffectsFragment$1) -> a
com.phonemetra.turbo.launcher.TransitionEffectsFragment$1$1 -> com.phonemetra.turbo.launcher.li:
    com.phonemetra.turbo.launcher.TransitionEffectsFragment$1 this$1 -> a
    void run() -> run
    com.phonemetra.turbo.launcher.TransitionEffectsFragment$1 access$0(com.phonemetra.turbo.launcher.TransitionEffectsFragment$1$1) -> a
com.phonemetra.turbo.launcher.TransitionEffectsFragment$1$1$1 -> com.phonemetra.turbo.launcher.lj:
    com.phonemetra.turbo.launcher.TransitionEffectsFragment$1$1 this$2 -> a
    void run() -> run
com.phonemetra.turbo.launcher.TransitionEffectsFragment$2 -> com.phonemetra.turbo.launcher.lk:
    com.phonemetra.turbo.launcher.TransitionEffectsFragment this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.TransitionEffectsFragment$3 -> com.phonemetra.turbo.launcher.ll:
    com.phonemetra.turbo.launcher.TransitionEffectsFragment this$0 -> a
    android.view.View val$darkPanel -> b
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
com.phonemetra.turbo.launcher.TransitionEffectsFragment$TransitionsArrayAdapter -> com.phonemetra.turbo.launcher.lm:
    android.content.Context mContext -> a
    java.lang.String[] titles -> b
    com.phonemetra.turbo.launcher.TransitionEffectsFragment this$0 -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.phonemetra.turbo.launcher.UninstallShortcutReceiver -> com.phonemetra.turbo.launcher.UninstallShortcutReceiver:
    java.util.ArrayList mUninstallQueue -> a
    boolean mUseUninstallQueue -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void enableUninstallQueue() -> a
    void disableAndFlushUninstallQueue(android.content.Context) -> a
    void processUninstallShortcut(android.content.Context,com.phonemetra.turbo.launcher.UninstallShortcutReceiver$PendingUninstallShortcutInfo) -> a
    void removeShortcut(android.content.Context,android.content.Intent) -> a
com.phonemetra.turbo.launcher.UninstallShortcutReceiver$PendingUninstallShortcutInfo -> com.phonemetra.turbo.launcher.ln:
    android.content.Intent data -> a
com.phonemetra.turbo.launcher.UserInitializeReceiver -> com.phonemetra.turbo.launcher.UserInitializeReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.phonemetra.turbo.launcher.Utilities -> com.phonemetra.turbo.launcher.lo:
    int sIconWidth -> f
    int sIconHeight -> g
    int sIconTextureWidth -> a
    int sIconTextureHeight -> b
    android.graphics.Paint sBlurPaint -> h
    android.graphics.Paint sGlowColorPressedPaint -> i
    android.graphics.Paint sGlowColorFocusedPaint -> j
    android.graphics.Paint sDisabledPaint -> k
    android.graphics.Rect sOldBounds -> l
    android.graphics.Canvas sCanvas -> m
    int[] sColors -> c
    int sColorIndex -> d
    boolean sForceEnableRotation -> e
    android.graphics.drawable.Drawable createIconDrawable(android.graphics.Bitmap) -> a
    void resizeIconDrawable(android.graphics.drawable.Drawable) -> a
    boolean isPropertyEnabled(java.lang.String) -> a
    boolean isRotationEnabled(android.content.Context) -> a
    android.graphics.Bitmap createIconBitmap(android.graphics.Bitmap,android.content.Context) -> a
    android.graphics.Bitmap createIconBitmap(android.graphics.drawable.Drawable,android.content.Context) -> a
    android.graphics.Bitmap resampleIconBitmap(android.graphics.Bitmap,android.content.Context) -> b
    float getDescendantCoordRelativeToParent(android.view.View,android.view.View,int[],boolean) -> a
    float mapCoordInSelfToDescendent(android.view.View,android.view.View,int[]) -> a
    void initStatics(android.content.Context) -> b
    void setIconSize(int) -> a
    void scaleRect(android.graphics.Rect,float) -> a
    void scaleRectAboutCenter(android.graphics.Rect,float) -> b
    void startActivityForResultSafely(android.app.Activity,android.content.Intent,int) -> a
com.phonemetra.turbo.launcher.WallpaperCropActivity -> com.phonemetra.turbo.launcher.WallpaperCropActivity:
    android.graphics.Point sDefaultWallpaperSize -> a
    com.phonemetra.turbo.launcher.CropView mCropView -> b
    android.view.View mSetWallpaperButton -> c
    void onCreate(android.os.Bundle) -> onCreate
    void init() -> b
    void setCropViewTileSource(com.android.photos.BitmapRegionTileSource$BitmapSource,boolean,boolean,java.lang.Runnable) -> a
    boolean enableRotation() -> a
    java.lang.String getSharedPreferencesKey() -> c
    float wallpaperTravelToScreenWidthRatio(int,int) -> b
    android.graphics.Point getDefaultWallpaperSize(android.content.res.Resources,android.view.WindowManager) -> a
    int getRotationFromExif(java.lang.String) -> a
    int getRotationFromExif(android.content.Context,android.net.Uri) -> a
    int getRotationFromExif(android.content.res.Resources,int) -> a
    int getRotationFromExifHelper(java.lang.String,android.content.res.Resources,int,android.content.Context,android.net.Uri) -> a
    void setWallpaper(java.lang.String,boolean) -> a
    void cropImageAndSetWallpaper(android.content.res.Resources,int,boolean) -> a
    boolean isScreenLarge(android.content.res.Resources) -> a
    void cropImageAndSetWallpaper(android.net.Uri,com.phonemetra.turbo.launcher.WallpaperCropActivity$OnBitmapCroppedHandler,boolean) -> a
    void updateWallpaperDimensions(int,int) -> a
    void suggestWallpaperDimension(android.content.res.Resources,android.content.SharedPreferences,android.view.WindowManager,android.app.WallpaperManager) -> a
    android.graphics.RectF getMaxCropRect(int,int,int,int,boolean) -> a
    android.graphics.Bitmap$CompressFormat convertExtensionToCompressFormat(java.lang.String) -> b
    java.lang.String getFileExtension(java.lang.String) -> c
com.phonemetra.turbo.launcher.WallpaperCropActivity$1 -> com.phonemetra.turbo.launcher.lp:
    com.phonemetra.turbo.launcher.WallpaperCropActivity this$0 -> a
    android.net.Uri val$imageUri -> b
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.WallpaperCropActivity$2 -> com.phonemetra.turbo.launcher.lq:
    com.phonemetra.turbo.launcher.WallpaperCropActivity this$0 -> a
    com.android.photos.BitmapRegionTileSource$UriBitmapSource val$bitmapSource -> b
    void run() -> run
com.phonemetra.turbo.launcher.WallpaperCropActivity$3 -> com.phonemetra.turbo.launcher.lr:
    com.phonemetra.turbo.launcher.WallpaperCropActivity this$0 -> a
    com.android.photos.BitmapRegionTileSource$BitmapSource val$bitmapSource -> b
    android.view.View val$progressView -> c
    android.content.Context val$context -> d
    boolean val$touchEnabled -> e
    boolean val$moveToLeft -> f
    java.lang.Runnable val$postExecute -> g
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.WallpaperCropActivity$4 -> com.phonemetra.turbo.launcher.ls:
    com.phonemetra.turbo.launcher.WallpaperCropActivity this$0 -> a
    android.os.AsyncTask val$loadBitmapTask -> b
    android.view.View val$progressView -> c
    void run() -> run
com.phonemetra.turbo.launcher.WallpaperCropActivity$5 -> com.phonemetra.turbo.launcher.lt:
    com.phonemetra.turbo.launcher.WallpaperCropActivity this$0 -> a
    android.graphics.Point val$bounds -> b
    boolean val$finishActivityWhenDone -> c
    void run() -> run
com.phonemetra.turbo.launcher.WallpaperCropActivity$6 -> com.phonemetra.turbo.launcher.lu:
    com.phonemetra.turbo.launcher.WallpaperCropActivity this$0 -> a
    boolean val$finishActivityWhenDone -> b
    void run() -> run
com.phonemetra.turbo.launcher.WallpaperCropActivity$7 -> com.phonemetra.turbo.launcher.lv:
    com.phonemetra.turbo.launcher.WallpaperCropActivity this$0 -> a
    int val$outWidth -> b
    int val$outHeight -> c
    boolean val$finishActivityWhenDone -> d
    void run() -> run
com.phonemetra.turbo.launcher.WallpaperCropActivity$BitmapCropTask -> com.phonemetra.turbo.launcher.lw:
    android.net.Uri mInUri -> a
    android.content.Context mContext -> b
    java.lang.String mInFilePath -> c
    byte[] mInImageBytes -> d
    int mInResId -> e
    android.graphics.RectF mCropBounds -> f
    int mOutWidth -> g
    int mOutHeight -> h
    int mRotation -> i
    java.lang.String mOutputFormat -> j
    boolean mSetWallpaper -> k
    boolean mSaveCroppedBitmap -> l
    android.graphics.Bitmap mCroppedBitmap -> m
    java.lang.Runnable mOnEndRunnable -> n
    android.content.res.Resources mResources -> o
    com.phonemetra.turbo.launcher.WallpaperCropActivity$OnBitmapCroppedHandler mOnBitmapCroppedHandler -> p
    boolean mNoCrop -> q
    void init(android.graphics.RectF,int,int,int,boolean,boolean,java.lang.Runnable) -> a
    void setOnBitmapCropped(com.phonemetra.turbo.launcher.WallpaperCropActivity$OnBitmapCroppedHandler) -> a
    void setNoCrop(boolean) -> a
    void setOnEndRunnable(java.lang.Runnable) -> a
    java.io.InputStream regenerateInputStream() -> d
    android.graphics.Point getImageBounds() -> a
    void setCropBounds(android.graphics.RectF) -> a
    android.graphics.Bitmap getCroppedBitmap() -> b
    boolean cropBitmap() -> c
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.WallpaperCropActivity$OnBitmapCroppedHandler -> com.phonemetra.turbo.launcher.lx:
    void onBitmapCropped(byte[]) -> a
com.phonemetra.turbo.launcher.WallpaperPickerActivity -> com.phonemetra.turbo.launcher.ly:
    android.view.View mSelectedTile -> f
    android.view.View mSetWallpaperButton -> d
    boolean mIgnoreNextTap -> g
    android.view.View$OnClickListener mThumbnailOnClickListener -> h
    android.widget.LinearLayout mWallpapersView -> i
    android.view.View mWallpaperStrip -> j
    android.view.ActionMode$Callback mActionModeCallback -> k
    android.view.ActionMode mActionMode -> l
    android.view.View$OnLongClickListener mLongClickListener -> m
    java.util.ArrayList mTempWallpaperTiles -> e
    com.phonemetra.turbo.launcher.SavedWallpaperImages mSavedImages -> n
    android.app.WallpaperInfo mLiveWallpaperInfoOnPickerLaunch -> o
    int mSelectedIndex -> p
    android.app.WallpaperInfo mLastClickedLiveWallpaperInfo -> q
    void setWallpaperStripYOffset(float) -> a
    void setSystemWallpaperVisiblity(boolean) -> a
    void changeWallpaperFlags(boolean) -> b
    void setCropViewTileSource(com.android.photos.BitmapRegionTileSource$BitmapSource,boolean,boolean,java.lang.Runnable) -> a
    void init() -> b
    void selectTile(android.view.View) -> a
    void initializeScrollForRtl() -> h
    android.graphics.Bitmap getThumbnailOfLastPhoto() -> d
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onStop() -> onStop
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void populateWallpapersFromAdapter(android.view.ViewGroup,android.widget.BaseAdapter,boolean) -> a
    void updateTileIndices() -> i
    android.graphics.Point getDefaultThumbnailSize(android.content.res.Resources) -> b
    android.graphics.Bitmap createThumbnail(android.graphics.Point,android.content.Context,android.net.Uri,byte[],android.content.res.Resources,int,int,boolean) -> b
    void addTemporaryWallpaperTile(android.net.Uri,boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setWallpaperItemPaddingToZero(android.widget.FrameLayout) -> a
    void addLongPressHandler(android.view.View) -> b
    java.util.ArrayList findBundledWallpapers() -> j
    boolean writeImageToFileAsJpeg(java.io.File,android.graphics.Bitmap) -> a
    com.phonemetra.turbo.launcher.WallpaperPickerActivity$ResourceWallpaperInfo getPreKKDefaultWallpaperInfo() -> k
    com.phonemetra.turbo.launcher.WallpaperPickerActivity$DefaultWallpaperInfo getDefaultWallpaper() -> l
    android.util.Pair getWallpaperArrayResourceId() -> e
    java.util.ArrayList addWallpapers(android.content.res.Resources,java.lang.String,int) -> a
    com.phonemetra.turbo.launcher.CropView getCropView() -> f
    com.phonemetra.turbo.launcher.SavedWallpaperImages getSavedImages() -> g
    void onLiveWallpaperPickerLaunch(android.app.WallpaperInfo) -> a
    android.view.View createImageTileView(android.view.LayoutInflater,int,android.view.View,android.view.ViewGroup,android.graphics.drawable.Drawable) -> a
    void startActivityForResultSafely(android.content.Intent,int) -> a
    void access$0(com.phonemetra.turbo.launcher.WallpaperPickerActivity,android.view.View) -> a
    android.graphics.Point access$1(android.content.res.Resources) -> a
    android.graphics.Bitmap access$2(android.graphics.Point,android.content.Context,android.net.Uri,byte[],android.content.res.Resources,int,int,boolean) -> a
    void access$3(com.phonemetra.turbo.launcher.WallpaperPickerActivity,boolean) -> a
    android.view.View access$4(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> a
    void access$5(com.phonemetra.turbo.launcher.WallpaperPickerActivity,boolean) -> b
    boolean access$6(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> b
    android.view.ActionMode access$7(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> c
    android.view.View$OnLongClickListener access$8(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> d
    android.view.ActionMode$Callback access$9(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> e
    void access$10(com.phonemetra.turbo.launcher.WallpaperPickerActivity,android.view.ActionMode) -> a
    android.widget.LinearLayout access$11(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> f
    void access$12(com.phonemetra.turbo.launcher.WallpaperPickerActivity,android.view.ViewGroup,android.widget.BaseAdapter,boolean) -> a
    void access$13(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> g
    void access$14(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> h
    int access$15(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> i
    android.view.View$OnClickListener access$16(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> j
    android.view.View access$17(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> k
    void access$18(com.phonemetra.turbo.launcher.WallpaperPickerActivity,int) -> a
    void access$19(com.phonemetra.turbo.launcher.WallpaperPickerActivity,android.view.View) -> b
com.phonemetra.turbo.launcher.WallpaperPickerActivity$1 -> com.phonemetra.turbo.launcher.lz:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    boolean val$visible -> b
    void run() -> run
com.phonemetra.turbo.launcher.WallpaperPickerActivity$10 -> com.phonemetra.turbo.launcher.ma:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    android.widget.HorizontalScrollView val$scroll -> b
    void onGlobalLayout() -> onGlobalLayout
com.phonemetra.turbo.launcher.WallpaperPickerActivity$11 -> com.phonemetra.turbo.launcher.mb:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    android.content.Context val$context -> b
    android.net.Uri val$uri -> c
    android.graphics.Point val$defaultSize -> d
    android.widget.ImageView val$image -> e
    android.widget.FrameLayout val$pickedImageThumbnail -> f
    android.graphics.Bitmap doInBackground(java.lang.Void[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.WallpaperPickerActivity$2 -> com.phonemetra.turbo.launcher.mc:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    java.lang.Runnable val$postExecute -> b
    void run() -> run
com.phonemetra.turbo.launcher.WallpaperPickerActivity$3 -> com.phonemetra.turbo.launcher.md:
    android.view.ViewPropertyAnimator mAnim -> a
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> b
    void onTouchDown() -> a
    void onTouchUp() -> c
    void onTap() -> b
    com.phonemetra.turbo.launcher.WallpaperPickerActivity access$0(com.phonemetra.turbo.launcher.WallpaperPickerActivity$3) -> a
com.phonemetra.turbo.launcher.WallpaperPickerActivity$3$1 -> com.phonemetra.turbo.launcher.me:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity$3 this$1 -> a
    void run() -> run
com.phonemetra.turbo.launcher.WallpaperPickerActivity$4 -> com.phonemetra.turbo.launcher.mf:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.WallpaperPickerActivity$5 -> com.phonemetra.turbo.launcher.mg:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    boolean onLongClick(android.view.View) -> onLongClick
com.phonemetra.turbo.launcher.WallpaperPickerActivity$6 -> com.phonemetra.turbo.launcher.mh:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    android.widget.LinearLayout val$liveWallpapersView -> b
    com.phonemetra.turbo.launcher.LiveWallpaperListAdapter val$a -> c
    void onChanged() -> onChanged
com.phonemetra.turbo.launcher.WallpaperPickerActivity$7 -> com.phonemetra.turbo.launcher.mi:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int) -> onLayoutChange
com.phonemetra.turbo.launcher.WallpaperPickerActivity$8 -> com.phonemetra.turbo.launcher.mj:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.WallpaperPickerActivity$9 -> com.phonemetra.turbo.launcher.mk:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity this$0 -> a
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    int numCheckedItems() -> a
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
com.phonemetra.turbo.launcher.WallpaperPickerActivity$BuiltInWallpapersAdapter -> com.phonemetra.turbo.launcher.ml:
    android.view.LayoutInflater mLayoutInflater -> a
    java.util.ArrayList mWallpapers -> b
    int getCount() -> getCount
    com.phonemetra.turbo.launcher.WallpaperPickerActivity$ResourceWallpaperInfo getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.phonemetra.turbo.launcher.WallpaperPickerActivity$DefaultWallpaperInfo -> com.phonemetra.turbo.launcher.mm:
    android.graphics.drawable.Drawable mThumb -> a
    void onClick(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> a
    void onSave(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> b
    boolean isSelectable() -> a
    boolean isNamelessWallpaper() -> b
com.phonemetra.turbo.launcher.WallpaperPickerActivity$PickImageInfo -> com.phonemetra.turbo.launcher.mn:
    void onClick(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> a
com.phonemetra.turbo.launcher.WallpaperPickerActivity$ResourceWallpaperInfo -> com.phonemetra.turbo.launcher.mo:
    android.content.res.Resources mResources -> a
    int mResId -> c
    android.graphics.drawable.Drawable mThumb -> d
    void onClick(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> a
    void onSave(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> b
    boolean isSelectable() -> a
    boolean isNamelessWallpaper() -> b
    android.graphics.drawable.Drawable access$0(com.phonemetra.turbo.launcher.WallpaperPickerActivity$ResourceWallpaperInfo) -> a
com.phonemetra.turbo.launcher.WallpaperPickerActivity$UriWallpaperInfo -> com.phonemetra.turbo.launcher.mp:
    android.net.Uri mUri -> a
    boolean mFirstClick -> c
    com.android.photos.BitmapRegionTileSource$UriBitmapSource mBitmapSource -> d
    void onClick(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> a
    void onSave(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> b
    boolean isSelectable() -> a
    boolean isNamelessWallpaper() -> b
    com.android.photos.BitmapRegionTileSource$UriBitmapSource access$0(com.phonemetra.turbo.launcher.WallpaperPickerActivity$UriWallpaperInfo) -> a
com.phonemetra.turbo.launcher.WallpaperPickerActivity$UriWallpaperInfo$1 -> com.phonemetra.turbo.launcher.mq:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity$UriWallpaperInfo this$1 -> a
    com.phonemetra.turbo.launcher.WallpaperPickerActivity val$a -> b
    void run() -> run
com.phonemetra.turbo.launcher.WallpaperPickerActivity$UriWallpaperInfo$2 -> com.phonemetra.turbo.launcher.mr:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity$UriWallpaperInfo this$1 -> a
    com.phonemetra.turbo.launcher.WallpaperPickerActivity val$a -> b
    void onBitmapCropped(byte[]) -> a
com.phonemetra.turbo.launcher.WallpaperPickerActivity$WallpaperTileInfo -> com.phonemetra.turbo.launcher.ms:
    android.view.View mView -> b
    void setView(android.view.View) -> a
    void onClick(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> a
    void onSave(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> b
    void onDelete(com.phonemetra.turbo.launcher.WallpaperPickerActivity) -> c
    boolean isSelectable() -> a
    boolean isNamelessWallpaper() -> b
    void onIndexUpdated(java.lang.CharSequence) -> a
com.phonemetra.turbo.launcher.WallpaperPickerActivity$ZeroPaddingDrawable -> com.phonemetra.turbo.launcher.mt:
    boolean getPadding(android.graphics.Rect) -> getPadding
com.phonemetra.turbo.launcher.WallpaperRootView -> com.phonemetra.turbo.launcher.WallpaperRootView:
    com.phonemetra.turbo.launcher.WallpaperPickerActivity mWallPicker -> a
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
com.phonemetra.turbo.launcher.WidgetAdder -> com.phonemetra.turbo.launcher.mu:
com.phonemetra.turbo.launcher.WidgetPreviewLoader -> com.phonemetra.turbo.launcher.mv:
    int mPreviewBitmapWidth -> a
    int mPreviewBitmapHeight -> b
    java.lang.String mSize -> c
    android.content.Context mContext -> d
    android.content.pm.PackageManager mPackageManager -> e
    com.phonemetra.turbo.launcher.PagedViewCellLayout mWidgetSpacingLayout -> f
    com.phonemetra.turbo.launcher.BitmapCache mCachedShortcutPreviewBitmap -> g
    com.phonemetra.turbo.launcher.PaintCache mCachedShortcutPreviewPaint -> h
    com.phonemetra.turbo.launcher.CanvasCache mCachedShortcutPreviewCanvas -> i
    com.phonemetra.turbo.launcher.CanvasCache mCachedAppWidgetPreviewCanvas -> j
    com.phonemetra.turbo.launcher.RectCache mCachedAppWidgetPreviewSrcRect -> k
    com.phonemetra.turbo.launcher.RectCache mCachedAppWidgetPreviewDestRect -> l
    com.phonemetra.turbo.launcher.PaintCache mCachedAppWidgetPreviewPaint -> m
    java.lang.String mCachedSelectQuery -> n
    com.phonemetra.turbo.launcher.BitmapFactoryOptionsCache mCachedBitmapFactoryOptions -> o
    int mAppIconSize -> p
    com.phonemetra.turbo.launcher.IconCache mIconCache -> q
    float sWidgetPreviewIconPaddingPercentage -> r
    com.phonemetra.turbo.launcher.WidgetPreviewLoader$CacheDb mDb -> s
    java.util.HashMap mLoadedPreviews -> t
    java.util.ArrayList mUnusedBitmaps -> u
    java.util.HashSet sInvalidPackages -> v
    void recreateDb() -> a
    void setPreviewSize(int,int,com.phonemetra.turbo.launcher.PagedViewCellLayout) -> a
    android.graphics.Bitmap getPreview(java.lang.Object) -> a
    void recycleBitmap(java.lang.Object,android.graphics.Bitmap) -> a
    java.lang.String getObjectName(java.lang.Object) -> b
    java.lang.String getObjectPackage(java.lang.Object) -> c
    void writeToDb(java.lang.Object,android.graphics.Bitmap) -> c
    void clearDb() -> c
    void removePackageFromDb(com.phonemetra.turbo.launcher.WidgetPreviewLoader$CacheDb,java.lang.String) -> a
    void removeItemFromDb(com.phonemetra.turbo.launcher.WidgetPreviewLoader$CacheDb,java.lang.String) -> b
    android.graphics.Bitmap readFromDb(java.lang.String,android.graphics.Bitmap) -> a
    android.graphics.Bitmap generatePreview(java.lang.Object,android.graphics.Bitmap) -> b
    android.graphics.Bitmap generateWidgetPreview(android.appwidget.AppWidgetProviderInfo,android.graphics.Bitmap) -> a
    int maxWidthForWidgetPreview(int) -> a
    int maxHeightForWidgetPreview(int) -> b
    android.graphics.Bitmap generateWidgetPreview(android.content.ComponentName,int,int,int,int,int,int,android.graphics.Bitmap,int[]) -> a
    android.graphics.Bitmap generateShortcutPreview(android.content.pm.ResolveInfo,int,int,android.graphics.Bitmap) -> a
    void renderDrawableToBitmap(android.graphics.drawable.Drawable,android.graphics.Bitmap,int,int,int,int) -> a
    void renderDrawableToBitmap(android.graphics.drawable.Drawable,android.graphics.Bitmap,int,int,int,int,float) -> a
    void access$0(com.phonemetra.turbo.launcher.WidgetPreviewLoader,java.lang.Object,android.graphics.Bitmap) -> a
    java.util.HashSet access$1() -> b
com.phonemetra.turbo.launcher.WidgetPreviewLoader$1 -> com.phonemetra.turbo.launcher.mw:
    com.phonemetra.turbo.launcher.WidgetPreviewLoader this$0 -> a
    java.lang.Object val$o -> b
    android.graphics.Bitmap val$generatedPreview -> c
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.WidgetPreviewLoader$2 -> com.phonemetra.turbo.launcher.mx:
    com.phonemetra.turbo.launcher.WidgetPreviewLoader$CacheDb val$cacheDb -> a
    java.lang.String val$packageName -> b
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.WidgetPreviewLoader$3 -> com.phonemetra.turbo.launcher.my:
    com.phonemetra.turbo.launcher.WidgetPreviewLoader$CacheDb val$cacheDb -> a
    java.lang.String val$objectName -> b
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.WidgetPreviewLoader$CacheDb -> com.phonemetra.turbo.launcher.mz:
    android.content.Context mContext -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.phonemetra.turbo.launcher.Workspace -> com.phonemetra.turbo.launcher.Workspace:
    android.animation.ObjectAnimator mChildrenOutlineFadeInAnimation -> k
    android.animation.ObjectAnimator mChildrenOutlineFadeOutAnimation -> l
    float mChildrenOutlineAlpha -> at
    android.animation.ValueAnimator mBackgroundFadeInAnimation -> au
    android.animation.ValueAnimator mBackgroundFadeOutAnimation -> av
    android.graphics.drawable.Drawable mBackground -> aw
    boolean mDrawBackground -> b
    float mBackgroundAlpha -> ax
    long mTouchDownTime -> ay
    long mCustomContentShowTime -> az
    android.animation.LayoutTransition mLayoutTransition -> aA
    android.app.WallpaperManager mWallpaperManager -> aB
    android.os.IBinder mWindowToken -> aC
    int mDefaultPage -> aD
    long mDefaultScreenId -> aE
    com.phonemetra.turbo.launcher.ShortcutAndWidgetContainer mDragSourceInternal -> aF
    boolean sAccessibilityEnabled -> aG
    java.util.HashMap mWorkspaceScreens -> aH
    java.util.ArrayList mScreenOrder -> aI
    java.lang.Runnable mRemoveEmptyScreenRunnable -> aJ
    com.phonemetra.turbo.launcher.CellLayout$CellInfo mDragInfo -> aK
    int[] mTargetCell -> aL
    int mDragOverX -> aM
    int mDragOverY -> aN
    android.graphics.Rect mLandscapeCellLayoutMetrics -> c
    android.graphics.Rect mPortraitCellLayoutMetrics -> d
    com.phonemetra.turbo.launcher.Launcher$CustomContentCallbacks mCustomContentCallbacks -> e
    boolean mCustomContentShowing -> f
    float mLastCustomContentScrollProgress -> aO
    java.lang.String mCustomContentDescription -> aP
    com.phonemetra.turbo.launcher.CellLayout mDragTargetLayout -> aQ
    com.phonemetra.turbo.launcher.CellLayout mDragOverlappingLayout -> aR
    com.phonemetra.turbo.launcher.CellLayout mDropToLayout -> aS
    com.phonemetra.turbo.launcher.Launcher mLauncher -> aT
    com.phonemetra.turbo.launcher.IconCache mIconCache -> aU
    com.phonemetra.turbo.launcher.DragController mDragController -> aV
    int[] mTempCell -> aW
    int[] mTempPt -> aX
    int[] mTempEstimate -> aY
    float[] mDragViewVisualCenter -> aZ
    float[] mTempCellLayoutCenterCoordinates -> ba
    android.graphics.Matrix mTempInverseMatrix -> bb
    com.phonemetra.turbo.launcher.SpringLoadedDragController mSpringLoadedDragController -> bc
    float mSpringLoadedShrinkFactor -> bd
    float mOverviewModeShrinkFactor -> be
    com.phonemetra.turbo.launcher.Workspace$State mState -> bf
    boolean mIsSwitchingState -> bg
    boolean mAnimatingViewIntoPlace -> g
    boolean mIsDragOccuring -> h
    boolean mChildrenLayersEnabled -> i
    boolean mStripScreensOnPageStopMoving -> bh
    boolean mInScrollArea -> bi
    com.phonemetra.turbo.launcher.HolographicOutlineHelper mOutlineHelper -> bj
    android.graphics.Bitmap mDragOutline -> bk
    android.graphics.Rect mTempRect -> bl
    int[] mTempXY -> bm
    int[] mTempVisiblePagesRange -> bn
    boolean mOverscrollTransformsSet -> bo
    float mLastOverscrollPivotX -> bp
    boolean mWorkspaceFadeInAdjacentScreens -> bq
    com.phonemetra.turbo.launcher.Workspace$WallpaperOffsetInterpolator mWallpaperOffset -> j
    boolean mScrollWallpaper -> br
    boolean mWallpaperIsLiveWallpaper -> bs
    int mNumPagesForWallpaperParallax -> bt
    float mLastSetWallpaperOffsetSteps -> bu
    java.lang.Runnable mDelayedResizeRunnable -> bv
    android.graphics.Point mDisplaySize -> bw
    int mCameraDistance -> bx
    com.phonemetra.turbo.launcher.Alarm mFolderCreationAlarm -> by
    com.phonemetra.turbo.launcher.Alarm mReorderAlarm -> bz
    com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator mDragFolderRingAnimator -> bA
    com.phonemetra.turbo.launcher.FolderIcon mDragOverFolderIcon -> bB
    boolean mCreateUserFolderOnDrop -> bC
    boolean mAddToExistingFolderOnDrop -> bD
    com.phonemetra.turbo.launcher.DropTarget$DragEnforcer mDragEnforcer -> bE
    float mMaxDistanceForFolderCreation -> bF
    float mXDown -> bG
    float mYDown -> bH
    int mDragMode -> bI
    int mLastReorderX -> bJ
    int mLastReorderY -> bK
    android.util.SparseArray mSavedStates -> bL
    java.util.ArrayList mRestoredPages -> bM
    int mSavedScrollX -> bN
    float mSavedRotationY -> bO
    float mSavedTranslationX -> bP
    float mCurrentScale -> bQ
    float mNewScale -> bR
    float[] mOldBackgroundAlphas -> bS
    float[] mOldBackgroundAlphaMultipliers -> bT
    float[] mOldAlphas -> bU
    float[] mNewBackgroundAlphas -> bV
    float[] mNewBackgroundAlphaMultipliers -> bW
    float[] mNewAlphas -> bX
    int mLastChildCount -> bY
    float mTransitionProgress -> bZ
    java.lang.Runnable mDeferredAction -> ca
    boolean mDeferDropAfterUninstall -> cb
    boolean mUninstallSuccessful -> cc
    java.lang.Runnable mBindPages -> cd
    boolean mShowSearchBar -> ce
    boolean mShowOutlines -> cf
    boolean mHideIconLabels -> cg
    com.phonemetra.turbo.launcher.Workspace$ZoomInInterpolator mZoomInInterpolator -> ch
    void setInsets(android.graphics.Rect) -> setInsets
    int[] estimateItemSize(int,int,com.phonemetra.turbo.launcher.ItemInfo,boolean) -> a
    android.graphics.Rect estimateItemPosition(com.phonemetra.turbo.launcher.CellLayout,com.phonemetra.turbo.launcher.ItemInfo,int,int,int,int) -> a
    void onDragStart(com.phonemetra.turbo.launcher.DragSource,java.lang.Object,int) -> a
    void onDragEnd() -> b
    void initWorkspace() -> k
    void setupLayoutTransition() -> az
    void enableLayoutTransitions() -> l
    void disableLayoutTransitions() -> m
    int getScrollMode() -> getScrollMode
    void setChildAlpha(android.view.View,float) -> a
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    boolean shouldDrawChild(android.view.View) -> d
    com.phonemetra.turbo.launcher.Folder getOpenFolder() -> getOpenFolder
    boolean isTouchActive() -> n
    void removeAllWorkspaceScreens() -> o
    long insertNewWorkspaceScreenBeforeEmptyScreen(long) -> a
    long insertNewWorkspaceScreen(long) -> b
    long insertNewWorkspaceScreen(long,int) -> a
    void createCustomContentContainer() -> p
    void removeCustomContentPage() -> q
    void addExtraEmptyScreenOnDrag() -> r
    boolean addExtraEmptyScreen() -> s
    void convertFinalScreenToEmptyScreenIfNecessary() -> aA
    void removeExtraEmptyScreen(boolean,java.lang.Runnable) -> a
    void removeExtraEmptyScreen(boolean,java.lang.Runnable,int,boolean) -> a
    void fadeAndRemoveEmptyScreen(int,int,java.lang.Runnable,boolean) -> a
    boolean hasExtraEmptyScreen() -> T
    long commitExtraEmptyScreen() -> U
    com.phonemetra.turbo.launcher.CellLayout getScreenWithId(long) -> c
    long getIdForScreen(com.phonemetra.turbo.launcher.CellLayout) -> a
    int getPageIndexForScreenId(long) -> d
    long getScreenIdForPageIndex(int) -> a
    java.util.ArrayList getScreenOrder() -> getScreenOrder
    void stripEmptyScreens() -> V
    void addInScreen(android.view.View,long,long,int,int,int,int) -> a
    void addInScreenFromBind(android.view.View,long,long,int,int,int,int) -> b
    void addInScreen(android.view.View,long,long,int,int,int,int,boolean) -> a
    void addInScreen(android.view.View,long,long,int,int,int,int,boolean,boolean) -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean isSwitchingState() -> W
    boolean isFinishedSwitchingState() -> X
    void onWindowVisibilityChanged(int) -> onWindowVisibilityChanged
    boolean dispatchUnhandledMove(android.view.View,int) -> dispatchUnhandledMove
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void reinflateWidgetsIfNecessary() -> Y
    void determineScrollingStart(android.view.MotionEvent) -> b
    void onPageBeginMoving() -> D
    void onPageEndMoving() -> j
    void notifyPageSwitchListener() -> z
    com.phonemetra.turbo.launcher.Launcher$CustomContentCallbacks getCustomContentCallbacks() -> getCustomContentCallbacks
    void setWallpaperDimension() -> Z
    void snapToPage(int,java.lang.Runnable) -> a
    void snapToPage(int,int,java.lang.Runnable) -> a
    void snapToScreenId(long,java.lang.Runnable) -> a
    void computeScroll() -> computeScroll
    void showOutlines() -> aa
    void hideOutlines() -> ab
    void showOutlinesTemporarily() -> ac
    void setChildrenOutlineAlpha(float) -> setChildrenOutlineAlpha
    float getChildrenOutlineAlpha() -> getChildrenOutlineAlpha
    void animateBackgroundGradient(float,boolean) -> a
    void setBackgroundAlpha(float) -> setBackgroundAlpha
    float getBackgroundAlpha() -> getBackgroundAlpha
    void updatePageAlphaValues(int) -> r
    void setChildrenBackgroundAlphaMultipliers(float) -> setChildrenBackgroundAlphaMultipliers
    boolean hasCustomContent() -> ad
    int numCustomPages() -> ae
    boolean isOnOrMovingToCustomContent() -> af
    void updateStateForCustomContent(int) -> s
    android.view.View$OnClickListener getPageIndicatorClickListener() -> getPageIndicatorClickListener
    void setShowOutlines(boolean) -> setShowOutlines
    void setFadeInAdjacentScreens(boolean) -> setFadeInAdjacentScreens
    void screenScrolled(int) -> e
    void overScroll(float) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onResume() -> ag
    void moveAwayFromCustomContentIfRequired() -> ah
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    int getDescendantFocusability() -> getDescendantFocusability
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    boolean isSmall() -> ai
    void enableChildrenCache(int,int) -> a
    void clearChildrenCache() -> aj
    void updateChildrenLayersEnabled(boolean) -> e
    void enableHwLayersOnVisiblePages() -> aB
    void buildPageHardwareLayers() -> ak
    void onWallpaperTap(android.view.MotionEvent) -> a
    void onDragStartedWithItem(android.view.View) -> a
    void onDragStartedWithItem(com.phonemetra.turbo.launcher.PendingAddItemInfo,android.graphics.Bitmap,boolean) -> a
    void exitWidgetResizeMode() -> al
    void initAnimationArrays() -> aC
    android.animation.Animator getChangeStateAnimation(com.phonemetra.turbo.launcher.Workspace$State,boolean) -> a
    void updateDefaultScreenButton() -> aD
    void onClickDefaultScreenButton() -> am
    void getOverviewModePages(int[]) -> a
    void onStartReordering() -> Q
    void onEndReordering() -> R
    boolean isInOverviewMode() -> an
    boolean enterOverviewMode() -> ao
    void exitOverviewMode(boolean) -> a
    void exitOverviewMode(int,boolean) -> a
    void enableOverviewMode(boolean,int,boolean) -> a
    int getOverviewModeTranslationY() -> getOverviewModeTranslationY
    float getOverviewModeScaleY() -> getOverviewModeScaleY
    boolean shouldVoiceButtonProxyBeVisible() -> ap
    void updateInteractionForState() -> aq
    void setState(com.phonemetra.turbo.launcher.Workspace$State) -> setState
    void updateAccessibilityFlags() -> aE
    android.animation.Animator getChangeStateAnimation(com.phonemetra.turbo.launcher.Workspace$State,boolean,int,int) -> a
    void onLauncherTransitionPrepare(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> a
    void onLauncherTransitionStart(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> b
    void onLauncherTransitionStep(com.phonemetra.turbo.launcher.Launcher,float) -> a
    void onLauncherTransitionEnd(com.phonemetra.turbo.launcher.Launcher,boolean,boolean) -> c
    void onTransitionPrepare() -> aF
    void updateCustomContentVisibility() -> ar
    void showCustomContentIfNecessary() -> as
    void hideCustomContentIfNecessary() -> at
    void onTransitionEnd() -> aG
    android.view.View getContent() -> getContent
    void drawDragView(android.view.View,android.graphics.Canvas,int,boolean) -> a
    android.graphics.Bitmap createDragBitmap(android.view.View,android.graphics.Canvas,int) -> a
    android.graphics.Bitmap createDragOutline(android.view.View,android.graphics.Canvas,int) -> b
    android.graphics.Bitmap createDragOutline(android.graphics.Bitmap,android.graphics.Canvas,int,int,int,boolean) -> a
    void startDrag(com.phonemetra.turbo.launcher.CellLayout$CellInfo) -> a
    void beginDragShared(android.view.View,com.phonemetra.turbo.launcher.DragSource) -> a
    void addApplicationShortcut(com.phonemetra.turbo.launcher.ShortcutInfo,com.phonemetra.turbo.launcher.CellLayout,long,long,int,int,boolean,int,int) -> a
    boolean transitionStateShouldAllowDrop() -> au
    boolean acceptDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    boolean willCreateUserFolder(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.CellLayout,int[],float,boolean) -> a
    boolean willAddToExistingUserFolder(java.lang.Object,com.phonemetra.turbo.launcher.CellLayout,int[],float) -> a
    boolean createUserFolderIfNecessary(android.view.View,long,com.phonemetra.turbo.launcher.CellLayout,int[],float,boolean,com.phonemetra.turbo.launcher.DragView,java.lang.Runnable) -> a
    boolean addToExistingFolderIfNecessary(android.view.View,com.phonemetra.turbo.launcher.CellLayout,int[],float,com.phonemetra.turbo.launcher.DropTarget$DragObject,boolean) -> a
    void onDrop(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> b
    void setFinalScrollForPageChange(int) -> setFinalScrollForPageChange
    void resetFinalScrollForPageChange(int) -> b
    void onDragEnter(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> c
    android.graphics.Rect getCellLayoutMetrics(com.phonemetra.turbo.launcher.Launcher,int) -> a
    void onDragExit(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> e
    void setCurrentDropLayout(com.phonemetra.turbo.launcher.CellLayout) -> setCurrentDropLayout
    void setCurrentDragOverlappingLayout(com.phonemetra.turbo.launcher.CellLayout) -> setCurrentDragOverlappingLayout
    void setCurrentDropOverCell(int,int) -> d
    void setDragMode(int) -> setDragMode
    void cleanupFolderCreation() -> aH
    void cleanupAddToFolder() -> aI
    void cleanupReorder(boolean) -> f
    void mapPointFromSelfToChild(android.view.View,float[],android.graphics.Matrix) -> a
    boolean isPointInSelfOverHotseat(int,int,android.graphics.Rect) -> a
    void mapPointFromSelfToHotseatLayout(com.phonemetra.turbo.launcher.Hotseat,float[]) -> a
    void mapPointFromChildToSelf(android.view.View,float[]) -> a
    float squaredDistance(float[],float[]) -> a
    com.phonemetra.turbo.launcher.CellLayout findMatchingPageForDragOver(com.phonemetra.turbo.launcher.DragView,float,float,boolean) -> a
    float[] getDragViewVisualCenter(int,int,int,int,com.phonemetra.turbo.launcher.DragView,float[]) -> a
    boolean isDragWidget(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> f
    boolean isExternalDragWidget(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> g
    void onDragOver(com.phonemetra.turbo.launcher.DropTarget$DragObject) -> d
    void manageFolderFeedback(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.CellLayout,int[],float,android.view.View) -> a
    void getHitRectRelativeToDragLayer(android.graphics.Rect) -> a
    void onDropExternal(int[],java.lang.Object,com.phonemetra.turbo.launcher.CellLayout,boolean,com.phonemetra.turbo.launcher.DropTarget$DragObject) -> a
    android.graphics.Bitmap createWidgetBitmap(com.phonemetra.turbo.launcher.ItemInfo,android.view.View) -> a
    void getFinalPositionForDropAnimation(int[],float[],com.phonemetra.turbo.launcher.DragView,com.phonemetra.turbo.launcher.CellLayout,com.phonemetra.turbo.launcher.ItemInfo,int[],boolean,boolean) -> a
    void animateWidgetDrop(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.CellLayout,com.phonemetra.turbo.launcher.DragView,java.lang.Runnable,int,android.view.View,boolean) -> a
    void setFinalTransitionTransform(com.phonemetra.turbo.launcher.CellLayout) -> setFinalTransitionTransform
    void resetTransitionTransform(com.phonemetra.turbo.launcher.CellLayout) -> b
    com.phonemetra.turbo.launcher.CellLayout getCurrentDropLayout() -> getCurrentDropLayout
    com.phonemetra.turbo.launcher.CellLayout$CellInfo getDragInfo() -> getDragInfo
    int getCurrentPageOffsetFromCustomContent() -> getCurrentPageOffsetFromCustomContent
    int[] findNearestArea(int,int,int,int,com.phonemetra.turbo.launcher.CellLayout,int[]) -> a
    void setup(com.phonemetra.turbo.launcher.DragController) -> setup
    void onDropCompleted(android.view.View,com.phonemetra.turbo.launcher.DropTarget$DragObject,boolean,boolean) -> a
    void deferCompleteDropAfterUninstallActivity() -> av
    void onUninstallActivityReturned(boolean) -> c
    void updateItemLocationsInDatabase(com.phonemetra.turbo.launcher.CellLayout) -> c
    java.util.ArrayList getUniqueComponents(boolean,java.util.ArrayList) -> a
    void getUniqueIntents(com.phonemetra.turbo.launcher.CellLayout,java.util.ArrayList,java.util.ArrayList,boolean) -> a
    float getIntrinsicIconScaleFactor() -> getIntrinsicIconScaleFactor
    boolean supportsFlingToDelete() -> c
    boolean supportsAppInfoDropTarget() -> d
    boolean supportsDeleteDropTarget() -> e
    void onFlingToDelete(com.phonemetra.turbo.launcher.DropTarget$DragObject,int,int,android.graphics.PointF) -> a
    void onFlingToDeleteCompleted() -> d_
    boolean isDropEnabled() -> e_
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
    void restoreInstanceStateForChild(int) -> q
    void restoreInstanceStateForRemainingPages() -> aw
    void scrollLeft() -> b_
    void scrollRight() -> c_
    boolean onEnterScrollArea(int,int,int) -> a
    boolean onExitScrollArea() -> i
    void onResetScrollArea() -> aJ
    com.phonemetra.turbo.launcher.CellLayout getParentCellLayoutForView(android.view.View) -> b
    java.util.ArrayList getWorkspaceAndHotseatCellLayouts() -> getWorkspaceAndHotseatCellLayouts
    java.util.ArrayList getAllShortcutAndWidgetContainers() -> getAllShortcutAndWidgetContainers
    com.phonemetra.turbo.launcher.Folder getFolderForTag(java.lang.Object) -> a
    android.view.View getViewForTag(java.lang.Object) -> b
    void clearDropTargets() -> ax
    void removeItemsByPackageName(java.util.ArrayList) -> a
    void removeItemsByApplicationInfo(java.util.ArrayList) -> b
    void removeItemsByComponentName(java.util.HashSet) -> a
    void updateShortcut(java.util.HashMap,com.phonemetra.turbo.launcher.ItemInfo,android.view.View) -> a
    void updateShortcuts(java.util.ArrayList) -> c
    void moveToScreen(int,boolean) -> b
    void moveToDefaultScreen(boolean) -> d
    com.phonemetra.turbo.launcher.PageIndicator$PageMarkerResources getPageIndicatorMarker(int) -> h
    void syncPages() -> h
    void syncPageItems(int,boolean) -> c
    java.lang.String getPageIndicatorDescription() -> getPageIndicatorDescription
    java.lang.String getCurrentPageDescription() -> getCurrentPageDescription
    void reloadSettings() -> aK
    boolean getShowSearchBar() -> getShowSearchBar
    boolean getHideIconLables() -> getHideIconLables
    void scrollTo(int,int) -> scrollTo
    com.phonemetra.turbo.launcher.Launcher access$0(com.phonemetra.turbo.launcher.Workspace) -> a
    android.os.IBinder access$1(com.phonemetra.turbo.launcher.Workspace) -> b
    android.app.WallpaperManager access$2(com.phonemetra.turbo.launcher.Workspace) -> c
    boolean access$3(com.phonemetra.turbo.launcher.Workspace) -> d
    void access$4(com.phonemetra.turbo.launcher.Workspace,int) -> a
    int access$5(com.phonemetra.turbo.launcher.Workspace) -> e
    float access$6(com.phonemetra.turbo.launcher.Workspace) -> f
    void access$7(com.phonemetra.turbo.launcher.Workspace,float) -> a
    boolean access$8() -> ay
    com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator access$9(com.phonemetra.turbo.launcher.Workspace) -> g
    void access$10(com.phonemetra.turbo.launcher.Workspace,com.phonemetra.turbo.launcher.FolderIcon$FolderRingAnimator) -> a
    float[] access$11(com.phonemetra.turbo.launcher.Workspace) -> h
    com.phonemetra.turbo.launcher.CellLayout access$12(com.phonemetra.turbo.launcher.Workspace) -> i
    int[] access$13(com.phonemetra.turbo.launcher.Workspace) -> j
    int[] access$14(com.phonemetra.turbo.launcher.Workspace,int,int,int,int,com.phonemetra.turbo.launcher.CellLayout,int[]) -> a
    void access$15(com.phonemetra.turbo.launcher.Workspace,int[]) -> a
    void access$16(com.phonemetra.turbo.launcher.Workspace,int) -> b
    void access$17(com.phonemetra.turbo.launcher.Workspace,int) -> c
    android.graphics.Bitmap access$18(com.phonemetra.turbo.launcher.Workspace) -> k
    java.util.HashMap access$19(com.phonemetra.turbo.launcher.Workspace) -> l
    java.util.ArrayList access$20(com.phonemetra.turbo.launcher.Workspace) -> m
    java.lang.Runnable access$21(com.phonemetra.turbo.launcher.Workspace) -> n
    void access$22(com.phonemetra.turbo.launcher.Workspace) -> o
    float[] access$23(com.phonemetra.turbo.launcher.Workspace) -> p
    float[] access$24(com.phonemetra.turbo.launcher.Workspace) -> q
    float[] access$25(com.phonemetra.turbo.launcher.Workspace) -> r
    float[] access$26(com.phonemetra.turbo.launcher.Workspace) -> s
    void access$27(com.phonemetra.turbo.launcher.Workspace,java.lang.Runnable) -> a
    void access$28(com.phonemetra.turbo.launcher.Workspace,boolean) -> a
    void access$29(com.phonemetra.turbo.launcher.Workspace,java.lang.Runnable) -> b
com.phonemetra.turbo.launcher.Workspace$1 -> com.phonemetra.turbo.launcher.na:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$10 -> com.phonemetra.turbo.launcher.nb:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    com.phonemetra.turbo.launcher.CellLayout val$cl -> b
    int val$i -> c
    void onAnimationUpdate(float,float) -> a
com.phonemetra.turbo.launcher.Workspace$11 -> com.phonemetra.turbo.launcher.nc:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    com.phonemetra.turbo.launcher.ItemInfo val$info -> b
    com.phonemetra.turbo.launcher.LauncherAppWidgetHostView val$hostView -> c
    com.phonemetra.turbo.launcher.CellLayout val$cellLayout -> d
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$12 -> com.phonemetra.turbo.launcher.nd:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    java.lang.Runnable val$addResizeFrame -> b
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$13 -> com.phonemetra.turbo.launcher.ne:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    java.lang.Runnable val$finalResizeRunnable -> b
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$14 -> com.phonemetra.turbo.launcher.nf:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    void run() -> run
    com.phonemetra.turbo.launcher.Workspace access$0(com.phonemetra.turbo.launcher.Workspace$14) -> a
com.phonemetra.turbo.launcher.Workspace$14$1 -> com.phonemetra.turbo.launcher.ng:
    com.phonemetra.turbo.launcher.Workspace$14 this$1 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$15 -> com.phonemetra.turbo.launcher.nh:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    com.phonemetra.turbo.launcher.PendingAddItemInfo val$pendingInfo -> b
    com.phonemetra.turbo.launcher.ItemInfo val$item -> c
    long val$container -> d
    long val$screenId -> e
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$16 -> com.phonemetra.turbo.launcher.ni:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    android.view.View val$finalView -> b
    java.lang.Runnable val$onCompleteRunnable -> c
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$17 -> com.phonemetra.turbo.launcher.nj:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    android.view.View val$target -> b
    com.phonemetra.turbo.launcher.DropTarget$DragObject val$d -> c
    boolean val$isFlingToDelete -> d
    boolean val$success -> e
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$18 -> com.phonemetra.turbo.launcher.nk:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    java.util.HashSet val$packageNames -> b
    java.util.HashSet val$cns -> c
    boolean filterItem(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.ItemInfo,android.content.ComponentName) -> a
com.phonemetra.turbo.launcher.Workspace$19 -> com.phonemetra.turbo.launcher.nl:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    java.util.HashSet val$componentNames -> b
    java.util.HashMap val$folderAppsToRemove -> c
    java.util.ArrayList val$childrenToRemove -> d
    java.util.HashMap val$children -> e
    boolean filterItem(com.phonemetra.turbo.launcher.ItemInfo,com.phonemetra.turbo.launcher.ItemInfo,android.content.ComponentName) -> a
com.phonemetra.turbo.launcher.Workspace$2 -> com.phonemetra.turbo.launcher.nm:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$3 -> com.phonemetra.turbo.launcher.nn:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    boolean val$animate -> b
    java.lang.Runnable val$onComplete -> c
    boolean val$stripEmptyScreens -> d
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$4 -> com.phonemetra.turbo.launcher.no:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    com.phonemetra.turbo.launcher.CellLayout val$cl -> b
    boolean val$stripEmptyScreens -> c
    void run() -> run
com.phonemetra.turbo.launcher.Workspace$5 -> com.phonemetra.turbo.launcher.np:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    java.lang.Runnable val$onComplete -> b
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.Workspace$6 -> com.phonemetra.turbo.launcher.nq:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.phonemetra.turbo.launcher.Workspace$7 -> com.phonemetra.turbo.launcher.nr:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.phonemetra.turbo.launcher.Workspace$8 -> com.phonemetra.turbo.launcher.ns:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.Workspace$9 -> com.phonemetra.turbo.launcher.nt:
    com.phonemetra.turbo.launcher.Workspace this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.phonemetra.turbo.launcher.Workspace$AlphaUpdateListener -> com.phonemetra.turbo.launcher.nu:
    android.view.View view -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
    void updateVisibility(android.view.View) -> a
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
com.phonemetra.turbo.launcher.Workspace$FolderCreationAlarmListener -> com.phonemetra.turbo.launcher.nv:
    com.phonemetra.turbo.launcher.CellLayout layout -> a
    int cellX -> b
    int cellY -> c
    com.phonemetra.turbo.launcher.Workspace this$0 -> d
    void onAlarm(com.phonemetra.turbo.launcher.Alarm) -> a
com.phonemetra.turbo.launcher.Workspace$ReorderAlarmListener -> com.phonemetra.turbo.launcher.nw:
    float[] dragViewCenter -> a
    int minSpanX -> b
    int minSpanY -> c
    int spanX -> d
    int spanY -> e
    com.phonemetra.turbo.launcher.DragView dragView -> f
    android.view.View child -> g
    com.phonemetra.turbo.launcher.Workspace this$0 -> h
    void onAlarm(com.phonemetra.turbo.launcher.Alarm) -> a
com.phonemetra.turbo.launcher.Workspace$State -> com.phonemetra.turbo.launcher.nx:
    com.phonemetra.turbo.launcher.Workspace$State NORMAL -> a
    com.phonemetra.turbo.launcher.Workspace$State SPRING_LOADED -> b
    com.phonemetra.turbo.launcher.Workspace$State SMALL -> c
    com.phonemetra.turbo.launcher.Workspace$State OVERVIEW -> d
    com.phonemetra.turbo.launcher.Workspace$State[] ENUM$VALUES -> e
    com.phonemetra.turbo.launcher.Workspace$State[] values() -> values
    com.phonemetra.turbo.launcher.Workspace$State valueOf(java.lang.String) -> valueOf
com.phonemetra.turbo.launcher.Workspace$WallpaperOffsetInterpolator -> com.phonemetra.turbo.launcher.ny:
    float mFinalOffset -> a
    float mCurrentOffset -> b
    boolean mWaitingForUpdate -> c
    android.view.Choreographer mChoreographer -> d
    android.view.animation.Interpolator mInterpolator -> e
    boolean mAnimating -> f
    long mAnimationStartTime -> g
    float mAnimationStartOffset -> h
    int ANIMATION_DURATION -> k
    int MIN_PARALLAX_PAGE_SPAN -> l
    int mNumScreens -> i
    com.phonemetra.turbo.launcher.Workspace this$0 -> j
    void doFrame(long) -> doFrame
    void updateOffset(boolean) -> a
    boolean computeScrollOffset() -> a
    float wallpaperOffsetForCurrentScroll() -> e
    int numEmptyScreensToIgnore() -> f
    int getNumScreensExcludingEmptyAndCustom() -> g
    void syncWithScroll() -> b
    float getCurrX() -> c
    void animateToFinal() -> h
    void setWallpaperOffsetSteps() -> i
    void setFinalX(float) -> a
    void scheduleUpdate() -> j
    void jumpToFinal() -> d
com.phonemetra.turbo.launcher.Workspace$ZoomInInterpolator -> com.phonemetra.turbo.launcher.nz:
    com.phonemetra.turbo.launcher.PagedView$InverseZInterpolator inverseZInterpolator -> a
    android.view.animation.DecelerateInterpolator decelerate -> b
    float getInterpolation(float) -> getInterpolation
com.phonemetra.turbo.launcher.Workspace$ZoomOutInterpolator -> com.phonemetra.turbo.launcher.oa:
    android.view.animation.DecelerateInterpolator decelerate -> a
    com.phonemetra.turbo.launcher.PagedView$ZInterpolator zInterpolator -> b
    float getInterpolation(float) -> getInterpolation
com.phonemetra.turbo.launcher.backup.BackupProtos -> com.phonemetra.turbo.launcher.a.a:
com.phonemetra.turbo.launcher.backup.BackupProtos$CheckedMessage -> com.phonemetra.turbo.launcher.a.b:
    com.phonemetra.turbo.launcher.backup.BackupProtos$CheckedMessage[] EMPTY_ARRAY -> a
    byte[] payload -> b
    long checksum -> c
    int cachedSize -> d
    void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano) -> a
    int getCachedSize() -> a
    int getSerializedSize() -> b
    com.phonemetra.turbo.launcher.backup.BackupProtos$CheckedMessage mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> b
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> a
com.phonemetra.turbo.launcher.backup.BackupProtos$Favorite -> com.phonemetra.turbo.launcher.a.c:
    com.phonemetra.turbo.launcher.backup.BackupProtos$Favorite[] EMPTY_ARRAY -> a
    long id -> b
    int itemType -> c
    java.lang.String title -> d
    int container -> e
    int screen -> f
    int cellX -> g
    int cellY -> h
    int spanX -> i
    int spanY -> j
    int displayMode -> k
    int appWidgetId -> l
    java.lang.String appWidgetProvider -> m
    java.lang.String intent -> n
    java.lang.String uri -> o
    int iconType -> p
    java.lang.String iconPackage -> q
    java.lang.String iconResource -> r
    byte[] icon -> s
    int cachedSize -> t
    void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano) -> a
    int getCachedSize() -> a
    int getSerializedSize() -> b
    com.phonemetra.turbo.launcher.backup.BackupProtos$Favorite mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> b
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> a
com.phonemetra.turbo.launcher.backup.BackupProtos$Journal -> com.phonemetra.turbo.launcher.a.d:
    com.phonemetra.turbo.launcher.backup.BackupProtos$Journal[] EMPTY_ARRAY -> a
    int appVersion -> b
    long t -> c
    long bytes -> d
    int rows -> e
    com.phonemetra.turbo.launcher.backup.BackupProtos$Key[] key -> f
    int cachedSize -> g
    com.phonemetra.turbo.launcher.backup.BackupProtos$Journal clear() -> c
    void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano) -> a
    int getCachedSize() -> a
    int getSerializedSize() -> b
    com.phonemetra.turbo.launcher.backup.BackupProtos$Journal mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> b
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> a
com.phonemetra.turbo.launcher.backup.BackupProtos$Key -> com.phonemetra.turbo.launcher.a.e:
    com.phonemetra.turbo.launcher.backup.BackupProtos$Key[] EMPTY_ARRAY -> a
    int type -> b
    java.lang.String name -> c
    long id -> d
    long checksum -> e
    int cachedSize -> f
    void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano) -> a
    int getCachedSize() -> a
    int getSerializedSize() -> b
    com.phonemetra.turbo.launcher.backup.BackupProtos$Key mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> b
    com.phonemetra.turbo.launcher.backup.BackupProtos$Key parseFrom(byte[]) -> a
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> a
com.phonemetra.turbo.launcher.backup.BackupProtos$Resource -> com.phonemetra.turbo.launcher.a.f:
    com.phonemetra.turbo.launcher.backup.BackupProtos$Resource[] EMPTY_ARRAY -> a
    int dpi -> b
    byte[] data -> c
    int cachedSize -> d
    void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano) -> a
    int getCachedSize() -> a
    int getSerializedSize() -> b
    com.phonemetra.turbo.launcher.backup.BackupProtos$Resource mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> b
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> a
com.phonemetra.turbo.launcher.backup.BackupProtos$Screen -> com.phonemetra.turbo.launcher.a.g:
    com.phonemetra.turbo.launcher.backup.BackupProtos$Screen[] EMPTY_ARRAY -> a
    long id -> b
    int rank -> c
    int cachedSize -> d
    void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano) -> a
    int getCachedSize() -> a
    int getSerializedSize() -> b
    com.phonemetra.turbo.launcher.backup.BackupProtos$Screen mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> b
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> a
com.phonemetra.turbo.launcher.backup.BackupProtos$Widget -> com.phonemetra.turbo.launcher.a.h:
    com.phonemetra.turbo.launcher.backup.BackupProtos$Widget[] EMPTY_ARRAY -> a
    java.lang.String provider -> b
    java.lang.String label -> c
    boolean configure -> d
    com.phonemetra.turbo.launcher.backup.BackupProtos$Resource icon -> e
    com.phonemetra.turbo.launcher.backup.BackupProtos$Resource preview -> f
    int cachedSize -> g
    void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano) -> a
    int getCachedSize() -> a
    int getSerializedSize() -> b
    com.phonemetra.turbo.launcher.backup.BackupProtos$Widget mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> b
    com.google.protobuf.nano.MessageNano mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano) -> a
com.phonemetra.turbo.launcher.list.AutoScrollListView -> com.phonemetra.turbo.launcher.list.a:
    int mRequestedScrollPosition -> a
    boolean mSmoothScrollRequested -> b
    void layoutChildren() -> layoutChildren
com.phonemetra.turbo.launcher.list.CompositeCursorAdapter -> com.phonemetra.turbo.launcher.list.b:
    android.content.Context mContext -> a
    java.util.ArrayList mPartitions -> b
    int mCount -> c
    boolean mCacheValid -> d
    boolean mNotificationsEnabled -> e
    boolean mNotificationNeeded -> f
    android.content.Context getContext() -> a
    void addPartition(boolean,boolean) -> a
    void addPartition(com.phonemetra.turbo.launcher.list.CompositeCursorAdapter$Partition) -> a
    void invalidate() -> b
    int getPartitionCount() -> c
    void ensureCacheValid() -> d
    boolean hasHeader(int) -> a
    int getCount() -> getCount
    android.database.Cursor getCursor(int) -> b
    void changeCursor(int,android.database.Cursor) -> a
    boolean isPartitionEmpty(int) -> c
    int getPartitionForPosition(int) -> d
    int getPositionForPartition(int) -> e
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewTypeCount() -> e
    int getItemViewType(int,int) -> a
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getHeaderView(int,android.database.Cursor,android.view.View,android.view.ViewGroup) -> a
    android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup) -> a
    void bindHeaderView(android.view.View,int,android.database.Cursor) -> a
    android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup) -> a
    android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup) -> a
    void bindView(android.view.View,int,android.database.Cursor,int) -> a
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    boolean isEnabled(int,int) -> b
    void notifyDataSetChanged() -> notifyDataSetChanged
com.phonemetra.turbo.launcher.list.CompositeCursorAdapter$Partition -> com.phonemetra.turbo.launcher.list.c:
    boolean showIfEmpty -> a
    boolean hasHeader -> b
    android.database.Cursor cursor -> c
    int idColumnIndex -> d
    int count -> e
com.phonemetra.turbo.launcher.list.PinnedHeaderListAdapter -> com.phonemetra.turbo.launcher.list.d:
    boolean mPinnedPartitionHeadersEnabled -> a
    boolean[] mHeaderVisibility -> b
    boolean getPinnedPartitionHeadersEnabled() -> f
    int getPinnedHeaderCount() -> g
    boolean isPinnedPartitionHeaderVisible(int) -> f
    android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup) -> a
    void configurePinnedHeaders(com.phonemetra.turbo.launcher.list.PinnedHeaderListView) -> a
    int getScrollPositionForHeader(int) -> g
com.phonemetra.turbo.launcher.list.PinnedHeaderListView -> com.phonemetra.turbo.launcher.list.PinnedHeaderListView:
    com.phonemetra.turbo.launcher.list.PinnedHeaderListView$PinnedHeaderAdapter mAdapter -> a
    int mSize -> b
    com.phonemetra.turbo.launcher.list.PinnedHeaderListView$PinnedHeader[] mHeaders -> c
    android.graphics.RectF mBounds -> d
    android.graphics.Rect mClipRect -> e
    android.widget.AbsListView$OnScrollListener mOnScrollListener -> f
    android.widget.AdapterView$OnItemSelectedListener mOnItemSelectedListener -> g
    int mScrollState -> h
    boolean mScrollToSectionOnHeaderTouch -> i
    boolean mHeaderTouched -> j
    int mAnimationDuration -> k
    boolean mAnimating -> l
    long mAnimationTargetTime -> m
    int mHeaderPaddingStart -> n
    int mHeaderWidth -> o
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setPinnedHeaderAnimationDuration(int) -> setPinnedHeaderAnimationDuration
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setOnScrollListener(android.widget.AbsListView$OnScrollListener) -> setOnScrollListener
    void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener) -> setOnItemSelectedListener
    void setScrollToSectionOnHeaderTouch(boolean) -> setScrollToSectionOnHeaderTouch
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    float getTopFadingEdgeStrength() -> getTopFadingEdgeStrength
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    int getPinnedHeaderHeight(int) -> a
    void setHeaderPinnedAtTop(int,int,boolean) -> a
    void setHeaderInvisible(int,boolean) -> a
    void ensurePinnedHeaderLayout(int) -> c
    int getTotalTopPinnedHeaderHeight() -> getTotalTopPinnedHeaderHeight
    int getPositionAt(int) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean smoothScrollToPartition(int) -> d
    void invalidateIfAnimating() -> b
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void drawHeader(android.graphics.Canvas,com.phonemetra.turbo.launcher.list.PinnedHeaderListView$PinnedHeader,long) -> a
    boolean isLayoutRtl() -> a
com.phonemetra.turbo.launcher.list.PinnedHeaderListView$PinnedHeader -> com.phonemetra.turbo.launcher.list.e:
    android.view.View view -> a
    boolean visible -> b
    int y -> c
    int height -> d
    int alpha -> e
    int state -> f
    boolean animating -> g
    boolean targetVisible -> h
    int sourceY -> i
    int targetY -> j
    long targetTime -> k
com.phonemetra.turbo.launcher.list.PinnedHeaderListView$PinnedHeaderAdapter -> com.phonemetra.turbo.launcher.list.f:
    int getPinnedHeaderCount() -> g
    android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup) -> a
    void configurePinnedHeaders(com.phonemetra.turbo.launcher.list.PinnedHeaderListView) -> a
    int getScrollPositionForHeader(int) -> g
com.phonemetra.turbo.launcher.list.SettingsPinnedHeaderAdapter -> com.phonemetra.turbo.launcher.list.g:
    com.phonemetra.turbo.launcher.Launcher mLauncher -> c
    android.content.Context mContext -> d
    java.lang.String[] mHeaders -> e
    int mPinnedHeaderCount -> a
    android.view.View$OnClickListener mSettingsItemListener -> b
    int[] $SWITCH_TABLE$com$phonemetra$turbo$launcher$AppsCustomizePagedView$SortMode -> f
    void setHeaders(java.lang.String[]) -> a
    android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup) -> a
    void bindHeaderView(android.view.View,int,android.database.Cursor) -> a
    android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup) -> a
    void bindView(android.view.View,int,android.database.Cursor,int) -> a
    android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup) -> a
    int getPinnedHeaderCount() -> g
    void updateDrawerSortSettingsItem(android.view.View) -> a
    java.lang.String mapEffectToValue(java.lang.String) -> a
    void onSettingsBooleanChanged(android.view.View,java.lang.String,int) -> a
    void onClickSortButton() -> i
    void access$0(com.phonemetra.turbo.launcher.list.SettingsPinnedHeaderAdapter,android.view.View,java.lang.String,int) -> a
    com.phonemetra.turbo.launcher.Launcher access$1(com.phonemetra.turbo.launcher.list.SettingsPinnedHeaderAdapter) -> a
    void access$2(com.phonemetra.turbo.launcher.list.SettingsPinnedHeaderAdapter) -> b
    int[] $SWITCH_TABLE$com$phonemetra$turbo$launcher$AppsCustomizePagedView$SortMode() -> h
com.phonemetra.turbo.launcher.list.SettingsPinnedHeaderAdapter$1 -> com.phonemetra.turbo.launcher.list.h:
    com.phonemetra.turbo.launcher.list.SettingsPinnedHeaderAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.list.SettingsPinnedHeaderAdapter$SettingsPosition -> com.phonemetra.turbo.launcher.list.i:
    int partition -> a
    int position -> b
    com.phonemetra.turbo.launcher.list.SettingsPinnedHeaderAdapter this$0 -> c
com.phonemetra.turbo.launcher.settings.SettingsPanel -> com.phonemetra.turbo.launcher.b.a:
    com.phonemetra.turbo.launcher.Launcher mLauncher -> a
    android.view.View mOverviewPanel -> b
    com.phonemetra.turbo.launcher.list.SettingsPinnedHeaderAdapter mSettingsAdapter -> c
    com.phonemetra.turbo.launcher.list.PinnedHeaderListView mListView -> d
    void initializeAdapter() -> a
    android.database.Cursor createCursor(java.lang.String,java.lang.String[]) -> a
    void initializeViews() -> b
    void update() -> c
    void notifyDataSetInvalidated() -> d
    com.phonemetra.turbo.launcher.Launcher access$0(com.phonemetra.turbo.launcher.settings.SettingsPanel) -> a
    android.view.View access$1(com.phonemetra.turbo.launcher.settings.SettingsPanel) -> b
com.phonemetra.turbo.launcher.settings.SettingsPanel$1 -> com.phonemetra.turbo.launcher.b.b:
    com.phonemetra.turbo.launcher.settings.SettingsPanel this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.settings.SettingsPanel$2 -> com.phonemetra.turbo.launcher.b.c:
    com.phonemetra.turbo.launcher.settings.SettingsPanel this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.settings.SettingsPanel$3 -> com.phonemetra.turbo.launcher.b.d:
    com.phonemetra.turbo.launcher.settings.SettingsPanel this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.settings.SettingsPanel$4 -> com.phonemetra.turbo.launcher.b.e:
    com.phonemetra.turbo.launcher.settings.SettingsPanel this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.settings.SettingsPanel$5 -> com.phonemetra.turbo.launcher.b.f:
    com.phonemetra.turbo.launcher.settings.SettingsPanel this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.settings.SettingsPanel$6 -> com.phonemetra.turbo.launcher.b.g:
    com.phonemetra.turbo.launcher.settings.SettingsPanel this$0 -> a
    void onClick(android.view.View) -> onClick
com.phonemetra.turbo.launcher.settings.SettingsPanel$SettingsSimplePanelSlideListener -> com.phonemetra.turbo.launcher.b.h:
    com.phonemetra.turbo.launcher.settings.SettingsPanel this$0 -> a
    void onPanelCollapsed(android.view.View) -> a
    void onPanelExpanded(android.view.View) -> b
com.phonemetra.turbo.launcher.settings.SettingsProvider -> com.phonemetra.turbo.launcher.b.i:
    android.content.SharedPreferences get(android.content.Context) -> a
    int getIntCustomDefault(android.content.Context,java.lang.String,int) -> a
    long getLongCustomDefault(android.content.Context,java.lang.String,long) -> a
    boolean getBooleanCustomDefault(android.content.Context,java.lang.String,boolean) -> a
    boolean getBoolean(android.content.Context,java.lang.String,int) -> b
    java.lang.String getStringCustomDefault(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.String getString(android.content.Context,java.lang.String,int) -> c
    void putInt(android.content.Context,java.lang.String,int) -> d
    boolean getThemeIcons(android.content.Context) -> b
    boolean getThemeFont(android.content.Context) -> c
    java.lang.String getThemePackageName(android.content.Context,java.lang.String) -> a
    void setThemePackageName(android.content.Context,java.lang.String) -> b
